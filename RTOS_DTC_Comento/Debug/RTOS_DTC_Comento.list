
RTOS_DTC_Comento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009284  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08009464  08009464  0000a464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c4  080095c4  0000b010  2**0
                  CONTENTS
  4 .ARM          00000008  080095c4  080095c4  0000a5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095cc  080095cc  0000b010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095cc  080095cc  0000a5cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095d0  080095d0  0000a5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080095d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e98  20000010  080095e4  0000b010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ea8  080095e4  0000bea8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a990  00000000  00000000  0000b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003878  00000000  00000000  000259d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00029248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b3  00000000  00000000  0002a8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000037da  00000000  00000000  0002baa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a34a  00000000  00000000  0002f27d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1fa1  00000000  00000000  000495c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b568  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006010  00000000  00000000  0012b5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  001315bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800944c 	.word	0x0800944c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	0800944c 	.word	0x0800944c

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b988 	b.w	8000548 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	468e      	mov	lr, r1
 8000258:	4604      	mov	r4, r0
 800025a:	4688      	mov	r8, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4617      	mov	r7, r2
 8000264:	d962      	bls.n	800032c <__udivmoddi4+0xdc>
 8000266:	fab2 f682 	clz	r6, r2
 800026a:	b14e      	cbz	r6, 8000280 <__udivmoddi4+0x30>
 800026c:	f1c6 0320 	rsb	r3, r6, #32
 8000270:	fa01 f806 	lsl.w	r8, r1, r6
 8000274:	fa20 f303 	lsr.w	r3, r0, r3
 8000278:	40b7      	lsls	r7, r6
 800027a:	ea43 0808 	orr.w	r8, r3, r8
 800027e:	40b4      	lsls	r4, r6
 8000280:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000284:	fa1f fc87 	uxth.w	ip, r7
 8000288:	fbb8 f1fe 	udiv	r1, r8, lr
 800028c:	0c23      	lsrs	r3, r4, #16
 800028e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000292:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000296:	fb01 f20c 	mul.w	r2, r1, ip
 800029a:	429a      	cmp	r2, r3
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029e:	18fb      	adds	r3, r7, r3
 80002a0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a4:	f080 80ea 	bcs.w	800047c <__udivmoddi4+0x22c>
 80002a8:	429a      	cmp	r2, r3
 80002aa:	f240 80e7 	bls.w	800047c <__udivmoddi4+0x22c>
 80002ae:	3902      	subs	r1, #2
 80002b0:	443b      	add	r3, r7
 80002b2:	1a9a      	subs	r2, r3, r2
 80002b4:	b2a3      	uxth	r3, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c6:	459c      	cmp	ip, r3
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0x8e>
 80002ca:	18fb      	adds	r3, r7, r3
 80002cc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d0:	f080 80d6 	bcs.w	8000480 <__udivmoddi4+0x230>
 80002d4:	459c      	cmp	ip, r3
 80002d6:	f240 80d3 	bls.w	8000480 <__udivmoddi4+0x230>
 80002da:	443b      	add	r3, r7
 80002dc:	3802      	subs	r0, #2
 80002de:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e2:	eba3 030c 	sub.w	r3, r3, ip
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40f3      	lsrs	r3, r6
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xb6>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb0>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x14c>
 800030e:	4573      	cmp	r3, lr
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xc8>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 8105 	bhi.w	8000522 <__udivmoddi4+0x2d2>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb6e 0203 	sbc.w	r2, lr, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4690      	mov	r8, r2
 8000322:	2d00      	cmp	r5, #0
 8000324:	d0e5      	beq.n	80002f2 <__udivmoddi4+0xa2>
 8000326:	e9c5 4800 	strd	r4, r8, [r5]
 800032a:	e7e2      	b.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	2a00      	cmp	r2, #0
 800032e:	f000 8090 	beq.w	8000452 <__udivmoddi4+0x202>
 8000332:	fab2 f682 	clz	r6, r2
 8000336:	2e00      	cmp	r6, #0
 8000338:	f040 80a4 	bne.w	8000484 <__udivmoddi4+0x234>
 800033c:	1a8a      	subs	r2, r1, r2
 800033e:	0c03      	lsrs	r3, r0, #16
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	b280      	uxth	r0, r0
 8000346:	b2bc      	uxth	r4, r7
 8000348:	2101      	movs	r1, #1
 800034a:	fbb2 fcfe 	udiv	ip, r2, lr
 800034e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000356:	fb04 f20c 	mul.w	r2, r4, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d907      	bls.n	800036e <__udivmoddi4+0x11e>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x11c>
 8000366:	429a      	cmp	r2, r3
 8000368:	f200 80e0 	bhi.w	800052c <__udivmoddi4+0x2dc>
 800036c:	46c4      	mov	ip, r8
 800036e:	1a9b      	subs	r3, r3, r2
 8000370:	fbb3 f2fe 	udiv	r2, r3, lr
 8000374:	fb0e 3312 	mls	r3, lr, r2, r3
 8000378:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800037c:	fb02 f404 	mul.w	r4, r2, r4
 8000380:	429c      	cmp	r4, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x144>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f102 30ff 	add.w	r0, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x142>
 800038c:	429c      	cmp	r4, r3
 800038e:	f200 80ca 	bhi.w	8000526 <__udivmoddi4+0x2d6>
 8000392:	4602      	mov	r2, r0
 8000394:	1b1b      	subs	r3, r3, r4
 8000396:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x98>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa0e f401 	lsl.w	r4, lr, r1
 80003ac:	fa20 f306 	lsr.w	r3, r0, r6
 80003b0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fa00 f801 	lsl.w	r8, r0, r1
 80003be:	fa1f fc87 	uxth.w	ip, r7
 80003c2:	fbbe f0f9 	udiv	r0, lr, r9
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003cc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1a0>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e2:	f080 809c 	bcs.w	800051e <__udivmoddi4+0x2ce>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f240 8099 	bls.w	800051e <__udivmoddi4+0x2ce>
 80003ec:	3802      	subs	r0, #2
 80003ee:	443c      	add	r4, r7
 80003f0:	eba4 040e 	sub.w	r4, r4, lr
 80003f4:	fa1f fe83 	uxth.w	lr, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000404:	fb03 fc0c 	mul.w	ip, r3, ip
 8000408:	45a4      	cmp	ip, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1ce>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000412:	f080 8082 	bcs.w	800051a <__udivmoddi4+0x2ca>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d97f      	bls.n	800051a <__udivmoddi4+0x2ca>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	fba0 ec02 	umull	lr, ip, r0, r2
 800042a:	4564      	cmp	r4, ip
 800042c:	4673      	mov	r3, lr
 800042e:	46e1      	mov	r9, ip
 8000430:	d362      	bcc.n	80004f8 <__udivmoddi4+0x2a8>
 8000432:	d05f      	beq.n	80004f4 <__udivmoddi4+0x2a4>
 8000434:	b15d      	cbz	r5, 800044e <__udivmoddi4+0x1fe>
 8000436:	ebb8 0203 	subs.w	r2, r8, r3
 800043a:	eb64 0409 	sbc.w	r4, r4, r9
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	fa22 f301 	lsr.w	r3, r2, r1
 8000446:	431e      	orrs	r6, r3
 8000448:	40cc      	lsrs	r4, r1
 800044a:	e9c5 6400 	strd	r6, r4, [r5]
 800044e:	2100      	movs	r1, #0
 8000450:	e74f      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000452:	fbb1 fcf2 	udiv	ip, r1, r2
 8000456:	0c01      	lsrs	r1, r0, #16
 8000458:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800045c:	b280      	uxth	r0, r0
 800045e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000462:	463b      	mov	r3, r7
 8000464:	4638      	mov	r0, r7
 8000466:	463c      	mov	r4, r7
 8000468:	46b8      	mov	r8, r7
 800046a:	46be      	mov	lr, r7
 800046c:	2620      	movs	r6, #32
 800046e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000472:	eba2 0208 	sub.w	r2, r2, r8
 8000476:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047a:	e766      	b.n	800034a <__udivmoddi4+0xfa>
 800047c:	4601      	mov	r1, r0
 800047e:	e718      	b.n	80002b2 <__udivmoddi4+0x62>
 8000480:	4610      	mov	r0, r2
 8000482:	e72c      	b.n	80002de <__udivmoddi4+0x8e>
 8000484:	f1c6 0220 	rsb	r2, r6, #32
 8000488:	fa2e f302 	lsr.w	r3, lr, r2
 800048c:	40b7      	lsls	r7, r6
 800048e:	40b1      	lsls	r1, r6
 8000490:	fa20 f202 	lsr.w	r2, r0, r2
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	430a      	orrs	r2, r1
 800049a:	fbb3 f8fe 	udiv	r8, r3, lr
 800049e:	b2bc      	uxth	r4, r7
 80004a0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a4:	0c11      	lsrs	r1, r2, #16
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb08 f904 	mul.w	r9, r8, r4
 80004ae:	40b0      	lsls	r0, r6
 80004b0:	4589      	cmp	r9, r1
 80004b2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004b6:	b280      	uxth	r0, r0
 80004b8:	d93e      	bls.n	8000538 <__udivmoddi4+0x2e8>
 80004ba:	1879      	adds	r1, r7, r1
 80004bc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c0:	d201      	bcs.n	80004c6 <__udivmoddi4+0x276>
 80004c2:	4589      	cmp	r9, r1
 80004c4:	d81f      	bhi.n	8000506 <__udivmoddi4+0x2b6>
 80004c6:	eba1 0109 	sub.w	r1, r1, r9
 80004ca:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ce:	fb09 f804 	mul.w	r8, r9, r4
 80004d2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004d6:	b292      	uxth	r2, r2
 80004d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004dc:	4542      	cmp	r2, r8
 80004de:	d229      	bcs.n	8000534 <__udivmoddi4+0x2e4>
 80004e0:	18ba      	adds	r2, r7, r2
 80004e2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004e6:	d2c4      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004e8:	4542      	cmp	r2, r8
 80004ea:	d2c2      	bcs.n	8000472 <__udivmoddi4+0x222>
 80004ec:	f1a9 0102 	sub.w	r1, r9, #2
 80004f0:	443a      	add	r2, r7
 80004f2:	e7be      	b.n	8000472 <__udivmoddi4+0x222>
 80004f4:	45f0      	cmp	r8, lr
 80004f6:	d29d      	bcs.n	8000434 <__udivmoddi4+0x1e4>
 80004f8:	ebbe 0302 	subs.w	r3, lr, r2
 80004fc:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000500:	3801      	subs	r0, #1
 8000502:	46e1      	mov	r9, ip
 8000504:	e796      	b.n	8000434 <__udivmoddi4+0x1e4>
 8000506:	eba7 0909 	sub.w	r9, r7, r9
 800050a:	4449      	add	r1, r9
 800050c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000510:	fbb1 f9fe 	udiv	r9, r1, lr
 8000514:	fb09 f804 	mul.w	r8, r9, r4
 8000518:	e7db      	b.n	80004d2 <__udivmoddi4+0x282>
 800051a:	4673      	mov	r3, lr
 800051c:	e77f      	b.n	800041e <__udivmoddi4+0x1ce>
 800051e:	4650      	mov	r0, sl
 8000520:	e766      	b.n	80003f0 <__udivmoddi4+0x1a0>
 8000522:	4608      	mov	r0, r1
 8000524:	e6fd      	b.n	8000322 <__udivmoddi4+0xd2>
 8000526:	443b      	add	r3, r7
 8000528:	3a02      	subs	r2, #2
 800052a:	e733      	b.n	8000394 <__udivmoddi4+0x144>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	443b      	add	r3, r7
 8000532:	e71c      	b.n	800036e <__udivmoddi4+0x11e>
 8000534:	4649      	mov	r1, r9
 8000536:	e79c      	b.n	8000472 <__udivmoddi4+0x222>
 8000538:	eba1 0109 	sub.w	r1, r1, r9
 800053c:	46c4      	mov	ip, r8
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fb09 f804 	mul.w	r8, r9, r4
 8000546:	e7c4      	b.n	80004d2 <__udivmoddi4+0x282>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f001 f862 	bl	8001618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f874 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 faae 	bl	8000ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 800055c:	f000 fa46 	bl	80009ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000560:	f000 f8cc 	bl	80006fc <MX_ADC1_Init>
  MX_CAN1_Init();
 8000564:	f000 f91c 	bl	80007a0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000568:	f000 f94e 	bl	8000808 <MX_I2C1_Init>
  MX_I2C2_Init();
 800056c:	f000 f97a 	bl	8000864 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000570:	f000 f9a6 	bl	80008c0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000574:	f000 f9da 	bl	800092c <MX_SPI2_Init>
  MX_UART4_Init();
 8000578:	f000 fa0e 	bl	8000998 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800057c:	f006 f828 	bl	80065d0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of CommMutexHandle */
  CommMutexHandleHandle = osMutexNew(&CommMutexHandle_attributes);
 8000580:	481c      	ldr	r0, [pc, #112]	@ (80005f4 <main+0xa8>)
 8000582:	f006 f91c 	bl	80067be <osMutexNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a1b      	ldr	r2, [pc, #108]	@ (80005f8 <main+0xac>)
 800058a:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of CanQueue */
  CanQueueHandle = osMessageQueueNew (8, 8, &CanQueue_attributes);
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <main+0xb0>)
 800058e:	2108      	movs	r1, #8
 8000590:	2008      	movs	r0, #8
 8000592:	f006 f99a 	bl	80068ca <osMessageQueueNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a19      	ldr	r2, [pc, #100]	@ (8000600 <main+0xb4>)
 800059a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059c:	4a19      	ldr	r2, [pc, #100]	@ (8000604 <main+0xb8>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4819      	ldr	r0, [pc, #100]	@ (8000608 <main+0xbc>)
 80005a2:	f006 f85f 	bl	8006664 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a18      	ldr	r2, [pc, #96]	@ (800060c <main+0xc0>)
 80005aa:	6013      	str	r3, [r2, #0]

  /* creation of I2CTask */
  I2CTaskHandle = osThreadNew(StartI2CTask, NULL, &I2CTask_attributes);
 80005ac:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <main+0xc4>)
 80005ae:	2100      	movs	r1, #0
 80005b0:	4818      	ldr	r0, [pc, #96]	@ (8000614 <main+0xc8>)
 80005b2:	f006 f857 	bl	8006664 <osThreadNew>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4a17      	ldr	r2, [pc, #92]	@ (8000618 <main+0xcc>)
 80005ba:	6013      	str	r3, [r2, #0]

  /* creation of SPITask */
  SPITaskHandle = osThreadNew(StartSPITask, NULL, &SPITask_attributes);
 80005bc:	4a17      	ldr	r2, [pc, #92]	@ (800061c <main+0xd0>)
 80005be:	2100      	movs	r1, #0
 80005c0:	4817      	ldr	r0, [pc, #92]	@ (8000620 <main+0xd4>)
 80005c2:	f006 f84f 	bl	8006664 <osThreadNew>
 80005c6:	4603      	mov	r3, r0
 80005c8:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <main+0xd8>)
 80005ca:	6013      	str	r3, [r2, #0]

  /* creation of CANTask */
  CANTaskHandle = osThreadNew(StartCANTask, NULL, &CANTask_attributes);
 80005cc:	4a16      	ldr	r2, [pc, #88]	@ (8000628 <main+0xdc>)
 80005ce:	2100      	movs	r1, #0
 80005d0:	4816      	ldr	r0, [pc, #88]	@ (800062c <main+0xe0>)
 80005d2:	f006 f847 	bl	8006664 <osThreadNew>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a15      	ldr	r2, [pc, #84]	@ (8000630 <main+0xe4>)
 80005da:	6013      	str	r3, [r2, #0]

  /* creation of UARTTask */
  UARTTaskHandle = osThreadNew(StartUARTTask, NULL, &UARTTask_attributes);
 80005dc:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <main+0xe8>)
 80005de:	2100      	movs	r1, #0
 80005e0:	4815      	ldr	r0, [pc, #84]	@ (8000638 <main+0xec>)
 80005e2:	f006 f83f 	bl	8006664 <osThreadNew>
 80005e6:	4603      	mov	r3, r0
 80005e8:	4a14      	ldr	r2, [pc, #80]	@ (800063c <main+0xf0>)
 80005ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ec:	f006 f814 	bl	8006618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <main+0xa4>
 80005f4:	08009594 	.word	0x08009594
 80005f8:	20000550 	.word	0x20000550
 80005fc:	0800957c 	.word	0x0800957c
 8000600:	2000054c 	.word	0x2000054c
 8000604:	080094c8 	.word	0x080094c8
 8000608:	08000bad 	.word	0x08000bad
 800060c:	20000538 	.word	0x20000538
 8000610:	080094ec 	.word	0x080094ec
 8000614:	08000bbd 	.word	0x08000bbd
 8000618:	2000053c 	.word	0x2000053c
 800061c:	08009510 	.word	0x08009510
 8000620:	08000bcd 	.word	0x08000bcd
 8000624:	20000540 	.word	0x20000540
 8000628:	08009534 	.word	0x08009534
 800062c:	08000bdd 	.word	0x08000bdd
 8000630:	20000544 	.word	0x20000544
 8000634:	08009558 	.word	0x08009558
 8000638:	08000bed 	.word	0x08000bed
 800063c:	20000548 	.word	0x20000548

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	@ 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	@ 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f008 fec2 	bl	80093d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <SystemClock_Config+0xb4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <SystemClock_Config+0xb4>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	@ 0x40
 8000674:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <SystemClock_Config+0xb4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <SystemClock_Config+0xb8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <SystemClock_Config+0xb8>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <SystemClock_Config+0xb8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 fc09 	bl	8004ec8 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006bc:	f000 fa9e 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f004 fa14 	bl	8004b08 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006e6:	f000 fa89 	bl	8000bfc <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070e:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <MX_ADC1_Init+0x9c>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800071a:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000734:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <MX_ADC1_Init+0x98>)
 800073c:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_ADC1_Init+0xa0>)
 800073e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000748:	2201      	movs	r2, #1
 800074a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800074c:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_ADC1_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_ADC1_Init+0x98>)
 8000756:	2201      	movs	r2, #1
 8000758:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075a:	480e      	ldr	r0, [pc, #56]	@ (8000794 <MX_ADC1_Init+0x98>)
 800075c:	f000 ffce 	bl	80016fc <HAL_ADC_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 fa49 	bl	8000bfc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800076a:	2302      	movs	r3, #2
 800076c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800076e:	2301      	movs	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	@ (8000794 <MX_ADC1_Init+0x98>)
 800077c:	f001 f802 	bl	8001784 <HAL_ADC_ConfigChannel>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000786:	f000 fa39 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000002c 	.word	0x2000002c
 8000798:	40012000 	.word	0x40012000
 800079c:	0f000001 	.word	0x0f000001

080007a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_CAN1_Init+0x64>)
 80007a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007aa:	4b15      	ldr	r3, [pc, #84]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007ac:	2210      	movs	r2, #16
 80007ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007bc:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_CAN1_Init+0x60>)
 80007ee:	f001 f9f7 	bl	8001be0 <HAL_CAN_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 fa00 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000074 	.word	0x20000074
 8000804:	40006400 	.word	0x40006400

08000808 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_I2C1_Init+0x50>)
 800080e:	4a13      	ldr	r2, [pc, #76]	@ (800085c <MX_I2C1_Init+0x54>)
 8000810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000814:	4a12      	ldr	r2, [pc, #72]	@ (8000860 <MX_I2C1_Init+0x58>)
 8000816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000826:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800082a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_I2C1_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_I2C1_Init+0x50>)
 8000846:	f002 fb49 	bl	8002edc <HAL_I2C_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000850:	f000 f9d4 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2000009c 	.word	0x2000009c
 800085c:	40005400 	.word	0x40005400
 8000860:	000186a0 	.word	0x000186a0

08000864 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_I2C2_Init+0x50>)
 800086a:	4a13      	ldr	r2, [pc, #76]	@ (80008b8 <MX_I2C2_Init+0x54>)
 800086c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000870:	4a12      	ldr	r2, [pc, #72]	@ (80008bc <MX_I2C2_Init+0x58>)
 8000872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_I2C2_Init+0x50>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000882:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000886:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000888:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <MX_I2C2_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <MX_I2C2_Init+0x50>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_I2C2_Init+0x50>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <MX_I2C2_Init+0x50>)
 80008a2:	f002 fb1b 	bl	8002edc <HAL_I2C_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008ac:	f000 f9a6 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000f0 	.word	0x200000f0
 80008b8:	40005800 	.word	0x40005800
 80008bc:	000186a0 	.word	0x000186a0

080008c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008c6:	4a18      	ldr	r2, [pc, #96]	@ (8000928 <MX_SPI1_Init+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008de:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <MX_SPI1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <MX_SPI1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <MX_SPI1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_SPI1_Init+0x64>)
 800090c:	220a      	movs	r2, #10
 800090e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	@ (8000924 <MX_SPI1_Init+0x64>)
 8000912:	f004 fd5d 	bl	80053d0 <HAL_SPI_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800091c:	f000 f96e 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200002c4 	.word	0x200002c4
 8000928:	40013000 	.word	0x40013000

0800092c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000932:	4a18      	ldr	r2, [pc, #96]	@ (8000994 <MX_SPI2_Init+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000938:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800093c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_SPI2_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000956:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800095c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <MX_SPI2_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_SPI2_Init+0x64>)
 8000978:	220a      	movs	r2, #10
 800097a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800097c:	4804      	ldr	r0, [pc, #16]	@ (8000990 <MX_SPI2_Init+0x64>)
 800097e:	f004 fd27 	bl	80053d0 <HAL_SPI_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000988:	f000 f938 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}
 8000990:	2000031c 	.word	0x2000031c
 8000994:	40003800 	.word	0x40003800

08000998 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <MX_UART4_Init+0x4c>)
 800099e:	4a12      	ldr	r2, [pc, #72]	@ (80009e8 <MX_UART4_Init+0x50>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_UART4_Init+0x4c>)
 80009d0:	f004 fea6 	bl	8005720 <HAL_UART_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009da:	f000 f90f 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	200004f4 	.word	0x200004f4
 80009e8:	40004c00 	.word	0x40004c00

080009ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 80009fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b28      	ldr	r3, [pc, #160]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a27      	ldr	r2, [pc, #156]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 8000a18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b25      	ldr	r3, [pc, #148]	@ (8000ab4 <MX_DMA_Init+0xc8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2105      	movs	r1, #5
 8000a2e:	200b      	movs	r0, #11
 8000a30:	f001 fce5 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a34:	200b      	movs	r0, #11
 8000a36:	f001 fcfe 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	200d      	movs	r0, #13
 8000a40:	f001 fcdd 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a44:	200d      	movs	r0, #13
 8000a46:	f001 fcf6 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	200e      	movs	r0, #14
 8000a50:	f001 fcd5 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a54:	200e      	movs	r0, #14
 8000a56:	f001 fcee 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	200f      	movs	r0, #15
 8000a60:	f001 fccd 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a64:	200f      	movs	r0, #15
 8000a66:	f001 fce6 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2011      	movs	r0, #17
 8000a70:	f001 fcc5 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a74:	2011      	movs	r0, #17
 8000a76:	f001 fcde 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	202f      	movs	r0, #47	@ 0x2f
 8000a80:	f001 fcbd 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000a84:	202f      	movs	r0, #47	@ 0x2f
 8000a86:	f001 fcd6 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2105      	movs	r1, #5
 8000a8e:	2038      	movs	r0, #56	@ 0x38
 8000a90:	f001 fcb5 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a94:	2038      	movs	r0, #56	@ 0x38
 8000a96:	f001 fcce 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	203b      	movs	r0, #59	@ 0x3b
 8000aa0:	f001 fcad 	bl	80023fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000aa4:	203b      	movs	r0, #59	@ 0x3b
 8000aa6:	f001 fcc6 	bl	8002436 <HAL_NVIC_EnableIRQ>

}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	@ 0x28
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b34      	ldr	r3, [pc, #208]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a33      	ldr	r2, [pc, #204]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000ad8:	f043 0320 	orr.w	r3, r3, #32
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b31      	ldr	r3, [pc, #196]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0320 	and.w	r3, r3, #32
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b2d      	ldr	r3, [pc, #180]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a25      	ldr	r2, [pc, #148]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60bb      	str	r3, [r7, #8]
 8000b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	603b      	str	r3, [r7, #0]
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a17      	ldr	r2, [pc, #92]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_GPIO_Init+0xec>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	4812      	ldr	r0, [pc, #72]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b60:	f002 f9a2 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b64:	2303      	movs	r3, #3
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	480b      	ldr	r0, [pc, #44]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b7c:	f002 f800 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b80:	2304      	movs	r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b84:	2311      	movs	r3, #17
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_GPIO_Init+0xf0>)
 8000b98:	f001 fff2 	bl	8002b80 <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020400 	.word	0x40020400

08000bac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f005 fde7 	bl	8006788 <osDelay>
 8000bba:	e7fb      	b.n	8000bb4 <StartDefaultTask+0x8>

08000bbc <StartI2CTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartI2CTask */
void StartI2CTask(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartI2CTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f005 fddf 	bl	8006788 <osDelay>
 8000bca:	e7fb      	b.n	8000bc4 <StartI2CTask+0x8>

08000bcc <StartSPITask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSPITask */
void StartSPITask(void *argument)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSPITask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	f005 fdd7 	bl	8006788 <osDelay>
 8000bda:	e7fb      	b.n	8000bd4 <StartSPITask+0x8>

08000bdc <StartCANTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANTask */
void StartCANTask(void *argument)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000be4:	2001      	movs	r0, #1
 8000be6:	f005 fdcf 	bl	8006788 <osDelay>
 8000bea:	e7fb      	b.n	8000be4 <StartCANTask+0x8>

08000bec <StartUARTTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUARTTask */
void StartUARTTask(void *argument)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f005 fdc7 	bl	8006788 <osDelay>
 8000bfa:	e7fb      	b.n	8000bf4 <StartUARTTask+0x8>

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <Error_Handler+0x8>

08000c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	4a11      	ldr	r2, [pc, #68]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	4a0a      	ldr	r2, [pc, #40]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_MspInit+0x54>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	210f      	movs	r1, #15
 8000c4a:	f06f 0001 	mvn.w	r0, #1
 8000c4e:	f001 fbd6 	bl	80023fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800

08000c60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 0314 	add.w	r3, r7, #20
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a17      	ldr	r2, [pc, #92]	@ (8000cdc <HAL_ADC_MspInit+0x7c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d127      	bne.n	8000cd2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000c8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c92:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_ADC_MspInit+0x80>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <HAL_ADC_MspInit+0x84>)
 8000cce:	f001 ff57 	bl	8002b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40012000 	.word	0x40012000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a21      	ldr	r2, [pc, #132]	@ (8000d8c <HAL_CAN_MspInit+0xa4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d13b      	bne.n	8000d82 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <HAL_CAN_MspInit+0xa8>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d12:	4a1f      	ldr	r2, [pc, #124]	@ (8000d90 <HAL_CAN_MspInit+0xa8>)
 8000d14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <HAL_CAN_MspInit+0xa8>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <HAL_CAN_MspInit+0xa8>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	4a18      	ldr	r2, [pc, #96]	@ (8000d90 <HAL_CAN_MspInit+0xa8>)
 8000d30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <HAL_CAN_MspInit+0xa8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PG0     ------> CAN1_RX
    PG1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d42:	2303      	movs	r3, #3
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d52:	2309      	movs	r3, #9
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <HAL_CAN_MspInit+0xac>)
 8000d5e:	f001 ff0f 	bl	8002b80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2105      	movs	r1, #5
 8000d66:	2013      	movs	r0, #19
 8000d68:	f001 fb49 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000d6c:	2013      	movs	r0, #19
 8000d6e:	f001 fb62 	bl	8002436 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	2014      	movs	r0, #20
 8000d78:	f001 fb41 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000d7c:	2014      	movs	r0, #20
 8000d7e:	f001 fb5a 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	@ 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40006400 	.word	0x40006400
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40021800 	.word	0x40021800

08000d98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08c      	sub	sp, #48	@ 0x30
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a9c      	ldr	r2, [pc, #624]	@ (8001028 <HAL_I2C_MspInit+0x290>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	f040 809b 	bne.w	8000ef2 <HAL_I2C_MspInit+0x15a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
 8000dc0:	4b9a      	ldr	r3, [pc, #616]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	4a99      	ldr	r2, [pc, #612]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dcc:	4b97      	ldr	r3, [pc, #604]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dd8:	23c0      	movs	r3, #192	@ 0xc0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ddc:	2312      	movs	r3, #18
 8000dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000de8:	2304      	movs	r3, #4
 8000dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dec:	f107 031c 	add.w	r3, r7, #28
 8000df0:	4619      	mov	r1, r3
 8000df2:	488f      	ldr	r0, [pc, #572]	@ (8001030 <HAL_I2C_MspInit+0x298>)
 8000df4:	f001 fec4 	bl	8002b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	4b8b      	ldr	r3, [pc, #556]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e00:	4a8a      	ldr	r2, [pc, #552]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000e02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e08:	4b88      	ldr	r3, [pc, #544]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000e14:	4b87      	ldr	r3, [pc, #540]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e16:	4a88      	ldr	r2, [pc, #544]	@ (8001038 <HAL_I2C_MspInit+0x2a0>)
 8000e18:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000e1a:	4b86      	ldr	r3, [pc, #536]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e1c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e20:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e22:	4b84      	ldr	r3, [pc, #528]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b82      	ldr	r3, [pc, #520]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b81      	ldr	r3, [pc, #516]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e34:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e36:	4b7f      	ldr	r3, [pc, #508]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e3c:	4b7d      	ldr	r3, [pc, #500]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e42:	4b7c      	ldr	r3, [pc, #496]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e48:	4b7a      	ldr	r3, [pc, #488]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e4e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e50:	4b78      	ldr	r3, [pc, #480]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e56:	4877      	ldr	r0, [pc, #476]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e58:	f001 fb08 	bl	800246c <HAL_DMA_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8000e62:	f7ff fecb 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a72      	ldr	r2, [pc, #456]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e6c:	4a71      	ldr	r2, [pc, #452]	@ (8001034 <HAL_I2C_MspInit+0x29c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000e72:	4b72      	ldr	r3, [pc, #456]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000e74:	4a72      	ldr	r2, [pc, #456]	@ (8001040 <HAL_I2C_MspInit+0x2a8>)
 8000e76:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e78:	4b70      	ldr	r3, [pc, #448]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000e7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e7e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e80:	4b6e      	ldr	r3, [pc, #440]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000e82:	2240      	movs	r2, #64	@ 0x40
 8000e84:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e86:	4b6d      	ldr	r3, [pc, #436]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e92:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e94:	4b69      	ldr	r3, [pc, #420]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9a:	4b68      	ldr	r3, [pc, #416]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ea0:	4b66      	ldr	r3, [pc, #408]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ea6:	4b65      	ldr	r3, [pc, #404]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000ea8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eac:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eae:	4b63      	ldr	r3, [pc, #396]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000eb4:	4861      	ldr	r0, [pc, #388]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000eb6:	f001 fad9 	bl	800246c <HAL_DMA_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8000ec0:	f7ff fe9c 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a5d      	ldr	r2, [pc, #372]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000ec8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000eca:	4a5c      	ldr	r2, [pc, #368]	@ (800103c <HAL_I2C_MspInit+0x2a4>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2105      	movs	r1, #5
 8000ed4:	201f      	movs	r0, #31
 8000ed6:	f001 fa92 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000eda:	201f      	movs	r0, #31
 8000edc:	f001 faab 	bl	8002436 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	2020      	movs	r0, #32
 8000ee6:	f001 fa8a 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000eea:	2020      	movs	r0, #32
 8000eec:	f001 faa3 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ef0:	e095      	b.n	800101e <HAL_I2C_MspInit+0x286>
  else if(hi2c->Instance==I2C2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a53      	ldr	r2, [pc, #332]	@ (8001044 <HAL_I2C_MspInit+0x2ac>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	f040 8090 	bne.w	800101e <HAL_I2C_MspInit+0x286>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b4a      	ldr	r3, [pc, #296]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a49      	ldr	r2, [pc, #292]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b47      	ldr	r3, [pc, #284]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0320 	and.w	r3, r3, #32
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f1e:	2312      	movs	r3, #18
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	4844      	ldr	r0, [pc, #272]	@ (8001048 <HAL_I2C_MspInit+0x2b0>)
 8000f36:	f001 fe23 	bl	8002b80 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	4a3a      	ldr	r2, [pc, #232]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000f44:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4a:	4b38      	ldr	r3, [pc, #224]	@ (800102c <HAL_I2C_MspInit+0x294>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8000f56:	4b3d      	ldr	r3, [pc, #244]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f58:	4a3d      	ldr	r2, [pc, #244]	@ (8001050 <HAL_I2C_MspInit+0x2b8>)
 8000f5a:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f5e:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000f62:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f64:	4b39      	ldr	r3, [pc, #228]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f6a:	4b38      	ldr	r3, [pc, #224]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f70:	4b36      	ldr	r3, [pc, #216]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f76:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f78:	4b34      	ldr	r3, [pc, #208]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f7e:	4b33      	ldr	r3, [pc, #204]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000f84:	4b31      	ldr	r3, [pc, #196]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f8a:	4b30      	ldr	r3, [pc, #192]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f90:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000f96:	482d      	ldr	r0, [pc, #180]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000f98:	f001 fa68 	bl	800246c <HAL_DMA_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_I2C_MspInit+0x20e>
      Error_Handler();
 8000fa2:	f7ff fe2b 	bl	8000bfc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a28      	ldr	r2, [pc, #160]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000faa:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fac:	4a27      	ldr	r2, [pc, #156]	@ (800104c <HAL_I2C_MspInit+0x2b4>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000fb2:	4b28      	ldr	r3, [pc, #160]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fb4:	4a28      	ldr	r2, [pc, #160]	@ (8001058 <HAL_I2C_MspInit+0x2c0>)
 8000fb6:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000fb8:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fba:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000fbe:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fc2:	2240      	movs	r2, #64	@ 0x40
 8000fc4:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fcc:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd2:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fda:	4b1e      	ldr	r3, [pc, #120]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8000ff2:	4818      	ldr	r0, [pc, #96]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8000ff4:	f001 fa3a 	bl	800246c <HAL_DMA_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_I2C_MspInit+0x26a>
      Error_Handler();
 8000ffe:	f7ff fdfd 	bl	8000bfc <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 8001006:	635a      	str	r2, [r3, #52]	@ 0x34
 8001008:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <HAL_I2C_MspInit+0x2bc>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2021      	movs	r0, #33	@ 0x21
 8001014:	f001 f9f3 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001018:	2021      	movs	r0, #33	@ 0x21
 800101a:	f001 fa0c 	bl	8002436 <HAL_NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3730      	adds	r7, #48	@ 0x30
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40005400 	.word	0x40005400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400
 8001034:	20000144 	.word	0x20000144
 8001038:	40026010 	.word	0x40026010
 800103c:	200001a4 	.word	0x200001a4
 8001040:	400260a0 	.word	0x400260a0
 8001044:	40005800 	.word	0x40005800
 8001048:	40021400 	.word	0x40021400
 800104c:	20000204 	.word	0x20000204
 8001050:	40026040 	.word	0x40026040
 8001054:	20000264 	.word	0x20000264
 8001058:	400260b8 	.word	0x400260b8

0800105c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a4a      	ldr	r2, [pc, #296]	@ (80011a4 <HAL_SPI_MspInit+0x148>)
 800107a:	4293      	cmp	r3, r2
 800107c:	f040 80a0 	bne.w	80011c0 <HAL_SPI_MspInit+0x164>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
 8001084:	4b48      	ldr	r3, [pc, #288]	@ (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001088:	4a47      	ldr	r2, [pc, #284]	@ (80011a8 <HAL_SPI_MspInit+0x14c>)
 800108a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800108e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001090:	4b45      	ldr	r3, [pc, #276]	@ (80011a8 <HAL_SPI_MspInit+0x14c>)
 8001092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001098:	61bb      	str	r3, [r7, #24]
 800109a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	4b41      	ldr	r3, [pc, #260]	@ (80011a8 <HAL_SPI_MspInit+0x14c>)
 80010a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a4:	4a40      	ldr	r2, [pc, #256]	@ (80011a8 <HAL_SPI_MspInit+0x14c>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ac:	4b3e      	ldr	r3, [pc, #248]	@ (80011a8 <HAL_SPI_MspInit+0x14c>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010b8:	23e0      	movs	r3, #224	@ 0xe0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c8:	2305      	movs	r3, #5
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	4836      	ldr	r0, [pc, #216]	@ (80011ac <HAL_SPI_MspInit+0x150>)
 80010d4:	f001 fd54 	bl	8002b80 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80010d8:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 80010da:	4a36      	ldr	r2, [pc, #216]	@ (80011b4 <HAL_SPI_MspInit+0x158>)
 80010dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 80010e0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e6:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ec:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010f2:	4b2f      	ldr	r3, [pc, #188]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010fa:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001100:	4b2b      	ldr	r3, [pc, #172]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800110c:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001112:	4b27      	ldr	r3, [pc, #156]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001118:	4825      	ldr	r0, [pc, #148]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 800111a:	f001 f9a7 	bl	800246c <HAL_DMA_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8001124:	f7ff fd6a 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a21      	ldr	r2, [pc, #132]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 800112c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800112e:	4a20      	ldr	r2, [pc, #128]	@ (80011b0 <HAL_SPI_MspInit+0x154>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001136:	4a21      	ldr	r2, [pc, #132]	@ (80011bc <HAL_SPI_MspInit+0x160>)
 8001138:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800113a:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 800113c:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001140:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001144:	2240      	movs	r2, #64	@ 0x40
 8001146:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800114e:	4b1a      	ldr	r3, [pc, #104]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001150:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001154:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001158:	2200      	movs	r2, #0
 800115a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 800115e:	2200      	movs	r2, #0
 8001160:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001164:	2200      	movs	r2, #0
 8001166:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 800116a:	2200      	movs	r2, #0
 800116c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001170:	2200      	movs	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001174:	4810      	ldr	r0, [pc, #64]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001176:	f001 f979 	bl	800246c <HAL_DMA_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001180:	f7ff fd3c 	bl	8000bfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 8001188:	649a      	str	r2, [r3, #72]	@ 0x48
 800118a:	4a0b      	ldr	r2, [pc, #44]	@ (80011b8 <HAL_SPI_MspInit+0x15c>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2105      	movs	r1, #5
 8001194:	2023      	movs	r0, #35	@ 0x23
 8001196:	f001 f932 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800119a:	2023      	movs	r0, #35	@ 0x23
 800119c:	f001 f94b 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011a0:	e0c1      	b.n	8001326 <HAL_SPI_MspInit+0x2ca>
 80011a2:	bf00      	nop
 80011a4:	40013000 	.word	0x40013000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	20000374 	.word	0x20000374
 80011b4:	40026410 	.word	0x40026410
 80011b8:	200003d4 	.word	0x200003d4
 80011bc:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001330 <HAL_SPI_MspInit+0x2d4>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	f040 80ad 	bne.w	8001326 <HAL_SPI_MspInit+0x2ca>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	4b58      	ldr	r3, [pc, #352]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 80011d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d4:	4a57      	ldr	r2, [pc, #348]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 80011d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011da:	6413      	str	r3, [r2, #64]	@ 0x40
 80011dc:	4b55      	ldr	r3, [pc, #340]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	4b51      	ldr	r3, [pc, #324]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 80011ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f0:	4a50      	ldr	r2, [pc, #320]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120c:	4a49      	ldr	r2, [pc, #292]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	6313      	str	r3, [r2, #48]	@ 0x30
 8001214:	4b47      	ldr	r3, [pc, #284]	@ (8001334 <HAL_SPI_MspInit+0x2d8>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001220:	230c      	movs	r3, #12
 8001222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001230:	2305      	movs	r3, #5
 8001232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	483f      	ldr	r0, [pc, #252]	@ (8001338 <HAL_SPI_MspInit+0x2dc>)
 800123c:	f001 fca0 	bl	8002b80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001252:	2305      	movs	r3, #5
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4837      	ldr	r0, [pc, #220]	@ (800133c <HAL_SPI_MspInit+0x2e0>)
 800125e:	f001 fc8f 	bl	8002b80 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001262:	4b37      	ldr	r3, [pc, #220]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 8001264:	4a37      	ldr	r2, [pc, #220]	@ (8001344 <HAL_SPI_MspInit+0x2e8>)
 8001266:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001268:	4b35      	ldr	r3, [pc, #212]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800126e:	4b34      	ldr	r3, [pc, #208]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001274:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800127a:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 800127c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001280:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001288:	4b2d      	ldr	r3, [pc, #180]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800128e:	4b2c      	ldr	r3, [pc, #176]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 8001290:	2200      	movs	r2, #0
 8001292:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001294:	4b2a      	ldr	r3, [pc, #168]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 8001296:	2200      	movs	r2, #0
 8001298:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129a:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80012a0:	4827      	ldr	r0, [pc, #156]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 80012a2:	f001 f8e3 	bl	800246c <HAL_DMA_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_SPI_MspInit+0x254>
      Error_Handler();
 80012ac:	f7ff fca6 	bl	8000bfc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a23      	ldr	r2, [pc, #140]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 80012b4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012b6:	4a22      	ldr	r2, [pc, #136]	@ (8001340 <HAL_SPI_MspInit+0x2e4>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80012bc:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012be:	4a23      	ldr	r2, [pc, #140]	@ (800134c <HAL_SPI_MspInit+0x2f0>)
 80012c0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80012c2:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012ca:	2240      	movs	r2, #64	@ 0x40
 80012cc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012da:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80012e8:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012ee:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 80012fc:	f001 f8b6 	bl	800246c <HAL_DMA_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_SPI_MspInit+0x2ae>
      Error_Handler();
 8001306:	f7ff fc79 	bl	8000bfc <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 800130e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001310:	4a0d      	ldr	r2, [pc, #52]	@ (8001348 <HAL_SPI_MspInit+0x2ec>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2105      	movs	r1, #5
 800131a:	2024      	movs	r0, #36	@ 0x24
 800131c:	f001 f86f 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001320:	2024      	movs	r0, #36	@ 0x24
 8001322:	f001 f888 	bl	8002436 <HAL_NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	@ 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40003800 	.word	0x40003800
 8001334:	40023800 	.word	0x40023800
 8001338:	40020800 	.word	0x40020800
 800133c:	40020400 	.word	0x40020400
 8001340:	20000434 	.word	0x20000434
 8001344:	40026058 	.word	0x40026058
 8001348:	20000494 	.word	0x20000494
 800134c:	40026070 	.word	0x40026070

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a25      	ldr	r2, [pc, #148]	@ (8001404 <HAL_UART_MspInit+0xb4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d144      	bne.n	80013fc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a23      	ldr	r2, [pc, #140]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 800137c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a1c      	ldr	r2, [pc, #112]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80013ba:	2308      	movs	r3, #8
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013c6:	f001 fbdb 	bl	8002b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_UART4;
 80013dc:	230b      	movs	r3, #11
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013e8:	f001 fbca 	bl	8002b80 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2105      	movs	r1, #5
 80013f0:	2034      	movs	r0, #52	@ 0x34
 80013f2:	f001 f804 	bl	80023fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80013f6:	2034      	movs	r0, #52	@ 0x34
 80013f8:	f001 f81d 	bl	8002436 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40004c00 	.word	0x40004c00
 8001408:	40023800 	.word	0x40023800
 800140c:	40020000 	.word	0x40020000

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <NMI_Handler+0x4>

08001418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <MemManage_Handler+0x4>

08001428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <UsageFault_Handler+0x4>

08001438 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144a:	f000 f937 	bl	80016bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800144e:	f006 ff43 	bl	80082d8 <xTaskGetSchedulerState>
 8001452:	4603      	mov	r3, r0
 8001454:	2b01      	cmp	r3, #1
 8001456:	d001      	beq.n	800145c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001458:	f007 fd3e 	bl	8008ed8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <DMA1_Stream0_IRQHandler+0x10>)
 8001466:	f001 f941 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000144 	.word	0x20000144

08001474 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <DMA1_Stream2_IRQHandler+0x10>)
 800147a:	f001 f937 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000204 	.word	0x20000204

08001488 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <DMA1_Stream3_IRQHandler+0x10>)
 800148e:	f001 f92d 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000434 	.word	0x20000434

0800149c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <DMA1_Stream4_IRQHandler+0x10>)
 80014a2:	f001 f923 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000494 	.word	0x20000494

080014b0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <DMA1_Stream6_IRQHandler+0x10>)
 80014b6:	f001 f919 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001a4 	.word	0x200001a4

080014c4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <CAN1_TX_IRQHandler+0x10>)
 80014ca:	f000 fc84 	bl	8001dd6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000074 	.word	0x20000074

080014d8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <CAN1_RX0_IRQHandler+0x10>)
 80014de:	f000 fc7a 	bl	8001dd6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	20000074 	.word	0x20000074

080014ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80014f0:	4802      	ldr	r0, [pc, #8]	@ (80014fc <I2C1_EV_IRQHandler+0x10>)
 80014f2:	f001 fe37 	bl	8003164 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2000009c 	.word	0x2000009c

08001500 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <I2C1_ER_IRQHandler+0x10>)
 8001506:	f001 ff9e 	bl	8003446 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000009c 	.word	0x2000009c

08001514 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <I2C2_EV_IRQHandler+0x10>)
 800151a:	f001 fe23 	bl	8003164 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200000f0 	.word	0x200000f0

08001528 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <SPI1_IRQHandler+0x10>)
 800152e:	f003 ffd9 	bl	80054e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200002c4 	.word	0x200002c4

0800153c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <SPI2_IRQHandler+0x10>)
 8001542:	f003 ffcf 	bl	80054e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000031c 	.word	0x2000031c

08001550 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <DMA1_Stream7_IRQHandler+0x10>)
 8001556:	f001 f8c9 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000264 	.word	0x20000264

08001564 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <UART4_IRQHandler+0x10>)
 800156a:	f004 f927 	bl	80057bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200004f4 	.word	0x200004f4

08001578 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <DMA2_Stream0_IRQHandler+0x10>)
 800157e:	f001 f8b5 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000374 	.word	0x20000374

0800158c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA2_Stream3_IRQHandler+0x10>)
 8001592:	f001 f8ab 	bl	80026ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003d4 	.word	0x200003d4

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	@ (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015c8:	480d      	ldr	r0, [pc, #52]	@ (8001600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ca:	490e      	ldr	r1, [pc, #56]	@ (8001604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015cc:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0b      	ldr	r2, [pc, #44]	@ (800160c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e0:	4c0b      	ldr	r4, [pc, #44]	@ (8001610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ee:	f7ff ffd7 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f007 fef9 	bl	80093e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7fe ffa9 	bl	800054c <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001608:	080095d4 	.word	0x080095d4
  ldr r2, =_sbss
 800160c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001610:	20004ea8 	.word	0x20004ea8

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	@ (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 fed1 	bl	80023e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	200f      	movs	r0, #15
 8001648:	f000 f808 	bl	800165c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fadc 	bl	8000c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <HAL_InitTick+0x54>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_InitTick+0x58>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	4619      	mov	r1, r3
 800166e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001672:	fbb3 f3f1 	udiv	r3, r3, r1
 8001676:	fbb2 f3f3 	udiv	r3, r2, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f000 fee9 	bl	8002452 <HAL_SYSTICK_Config>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e00e      	b.n	80016a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d80a      	bhi.n	80016a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001690:	2200      	movs	r2, #0
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f000 feb1 	bl	80023fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800169c:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_InitTick+0x5c>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e000      	b.n	80016a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000000 	.word	0x20000000
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_IncTick+0x20>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_IncTick+0x24>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4413      	add	r3, r2
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_IncTick+0x24>)
 80016ce:	6013      	str	r3, [r2, #0]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000554 	.word	0x20000554

080016e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  return uwTick;
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <HAL_GetTick+0x14>)
 80016ea:	681b      	ldr	r3, [r3, #0]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000554 	.word	0x20000554

080016fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e033      	b.n	800177a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff faa0 	bl	8000c60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001742:	f023 0302 	bic.w	r3, r3, #2
 8001746:	f043 0202 	orr.w	r2, r3, #2
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f94a 	bl	80019e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	641a      	str	r2, [r3, #64]	@ 0x40
 800176a:	e001      	b.n	8001770 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1c>
 800179c:	2302      	movs	r3, #2
 800179e:	e113      	b.n	80019c8 <HAL_ADC_ConfigChannel+0x244>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b09      	cmp	r3, #9
 80017ae:	d925      	bls.n	80017fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68d9      	ldr	r1, [r3, #12]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	461a      	mov	r2, r3
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	3b1e      	subs	r3, #30
 80017c6:	2207      	movs	r2, #7
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43da      	mvns	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	400a      	ands	r2, r1
 80017d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68d9      	ldr	r1, [r3, #12]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4403      	add	r3, r0
 80017ee:	3b1e      	subs	r3, #30
 80017f0:	409a      	lsls	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	e022      	b.n	8001842 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6919      	ldr	r1, [r3, #16]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4613      	mov	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	4413      	add	r3, r2
 8001810:	2207      	movs	r2, #7
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	400a      	ands	r2, r1
 800181e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6919      	ldr	r1, [r3, #16]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	b29b      	uxth	r3, r3
 8001830:	4618      	mov	r0, r3
 8001832:	4603      	mov	r3, r0
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	4403      	add	r3, r0
 8001838:	409a      	lsls	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	430a      	orrs	r2, r1
 8001840:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b06      	cmp	r3, #6
 8001848:	d824      	bhi.n	8001894 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b05      	subs	r3, #5
 800185c:	221f      	movs	r2, #31
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	400a      	ands	r2, r1
 800186a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b05      	subs	r3, #5
 8001886:	fa00 f203 	lsl.w	r2, r0, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34
 8001892:	e04c      	b.n	800192e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b0c      	cmp	r3, #12
 800189a:	d824      	bhi.n	80018e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	3b23      	subs	r3, #35	@ 0x23
 80018ae:	221f      	movs	r2, #31
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43da      	mvns	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	400a      	ands	r2, r1
 80018bc:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	3b23      	subs	r3, #35	@ 0x23
 80018d8:	fa00 f203 	lsl.w	r2, r0, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80018e4:	e023      	b.n	800192e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	3b41      	subs	r3, #65	@ 0x41
 80018f8:	221f      	movs	r2, #31
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	400a      	ands	r2, r1
 8001906:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	3b41      	subs	r3, #65	@ 0x41
 8001922:	fa00 f203 	lsl.w	r2, r0, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800192e:	4b29      	ldr	r3, [pc, #164]	@ (80019d4 <HAL_ADC_ConfigChannel+0x250>)
 8001930:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a28      	ldr	r2, [pc, #160]	@ (80019d8 <HAL_ADC_ConfigChannel+0x254>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d10f      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1d8>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b12      	cmp	r3, #18
 8001942:	d10b      	bne.n	800195c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1d      	ldr	r2, [pc, #116]	@ (80019d8 <HAL_ADC_ConfigChannel+0x254>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d12b      	bne.n	80019be <HAL_ADC_ConfigChannel+0x23a>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a1c      	ldr	r2, [pc, #112]	@ (80019dc <HAL_ADC_ConfigChannel+0x258>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d003      	beq.n	8001978 <HAL_ADC_ConfigChannel+0x1f4>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b11      	cmp	r3, #17
 8001976:	d122      	bne.n	80019be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a11      	ldr	r2, [pc, #68]	@ (80019dc <HAL_ADC_ConfigChannel+0x258>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d111      	bne.n	80019be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_ADC_ConfigChannel+0x25c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a11      	ldr	r2, [pc, #68]	@ (80019e4 <HAL_ADC_ConfigChannel+0x260>)
 80019a0:	fba2 2303 	umull	r2, r3, r2, r3
 80019a4:	0c9a      	lsrs	r2, r3, #18
 80019a6:	4613      	mov	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	4413      	add	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019b0:	e002      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	3b01      	subs	r3, #1
 80019b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f9      	bne.n	80019b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	40012300 	.word	0x40012300
 80019d8:	40012000 	.word	0x40012000
 80019dc:	10000012 	.word	0x10000012
 80019e0:	20000000 	.word	0x20000000
 80019e4:	431bde83 	.word	0x431bde83

080019e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f0:	4b79      	ldr	r3, [pc, #484]	@ (8001bd8 <ADC_Init+0x1f0>)
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	021a      	lsls	r2, r3, #8
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001a40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6899      	ldr	r1, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7a:	4a58      	ldr	r2, [pc, #352]	@ (8001bdc <ADC_Init+0x1f4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6899      	ldr	r1, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	e00f      	b.n	8001ae6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ad4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ae4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0202 	bic.w	r2, r2, #2
 8001af4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6899      	ldr	r1, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e1b      	ldrb	r3, [r3, #24]
 8001b00:	005a      	lsls	r2, r3, #1
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01b      	beq.n	8001b4c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b22:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001b32:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6859      	ldr	r1, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	035a      	lsls	r2, r3, #13
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	e007      	b.n	8001b5c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001b6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	051a      	lsls	r2, r3, #20
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6899      	ldr	r1, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b9e:	025a      	lsls	r2, r3, #9
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6899      	ldr	r1, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	029a      	lsls	r2, r3, #10
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	40012300 	.word	0x40012300
 8001bdc:	0f000001 	.word	0x0f000001

08001be0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e0ed      	b.n	8001dce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d102      	bne.n	8001c04 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff f872 	bl	8000ce8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c14:	f7ff fd66 	bl	80016e4 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c1a:	e012      	b.n	8001c42 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c1c:	f7ff fd62 	bl	80016e4 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b0a      	cmp	r3, #10
 8001c28:	d90b      	bls.n	8001c42 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2205      	movs	r2, #5
 8001c3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0c5      	b.n	8001dce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0e5      	beq.n	8001c1c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f022 0202 	bic.w	r2, r2, #2
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c60:	f7ff fd40 	bl	80016e4 <HAL_GetTick>
 8001c64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c66:	e012      	b.n	8001c8e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c68:	f7ff fd3c 	bl	80016e4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b0a      	cmp	r3, #10
 8001c74:	d90b      	bls.n	8001c8e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2205      	movs	r2, #5
 8001c86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e09f      	b.n	8001dce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0302 	and.w	r3, r3, #2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e5      	bne.n	8001c68 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7e1b      	ldrb	r3, [r3, #24]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d108      	bne.n	8001cb6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e007      	b.n	8001cc6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7e5b      	ldrb	r3, [r3, #25]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d108      	bne.n	8001ce0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e007      	b.n	8001cf0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7e9b      	ldrb	r3, [r3, #26]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d108      	bne.n	8001d0a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0220 	orr.w	r2, r2, #32
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e007      	b.n	8001d1a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0220 	bic.w	r2, r2, #32
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7edb      	ldrb	r3, [r3, #27]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d108      	bne.n	8001d34 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0210 	bic.w	r2, r2, #16
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e007      	b.n	8001d44 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0210 	orr.w	r2, r2, #16
 8001d42:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7f1b      	ldrb	r3, [r3, #28]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d108      	bne.n	8001d5e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 0208 	orr.w	r2, r2, #8
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e007      	b.n	8001d6e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0208 	bic.w	r2, r2, #8
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7f5b      	ldrb	r3, [r3, #29]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0204 	orr.w	r2, r2, #4
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	e007      	b.n	8001d98 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0204 	bic.w	r2, r2, #4
 8001d96:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	ea42 0103 	orr.w	r1, r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	1e5a      	subs	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b08a      	sub	sp, #40	@ 0x28
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d07c      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d023      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f983 	bl	8002144 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e3e:	e016      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d004      	beq.n	8001e54 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e52:	e00c      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e66:	e002      	b.n	8001e6e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f989 	bl	8002180 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d024      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f963 	bl	8002158 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e92:	e016      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ea6:	e00c      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d004      	beq.n	8001ebc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eba:	e002      	b.n	8001ec2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f969 	bl	8002194 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d024      	beq.n	8001f16 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ed4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f943 	bl	800216c <HAL_CAN_TxMailbox2CompleteCallback>
 8001ee6:	e016      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d004      	beq.n	8001efc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efa:	e00c      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0e:	e002      	b.n	8001f16 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f000 f949 	bl	80021a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f16:	6a3b      	ldr	r3, [r7, #32]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00c      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0310 	and.w	r3, r3, #16
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2210      	movs	r2, #16
 8001f38:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00b      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2208      	movs	r2, #8
 8001f54:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f93a 	bl	80021d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f921 	bl	80021bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00c      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0310 	and.w	r3, r3, #16
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f94:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2208      	movs	r2, #8
 8001fb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f91c 	bl	80021f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d002      	beq.n	8001fde <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f903 	bl	80021e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2210      	movs	r2, #16
 8001ff8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f906 	bl	800220c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d006      	beq.n	8002022 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2208      	movs	r2, #8
 800201a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f8ff 	bl	8002220 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d07b      	beq.n	8002124 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	d072      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002058:	2b00      	cmp	r3, #0
 800205a:	d008      	beq.n	800206e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002090:	2b00      	cmp	r3, #0
 8002092:	d043      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800209a:	2b00      	cmp	r3, #0
 800209c:	d03e      	beq.n	800211c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020a4:	2b60      	cmp	r3, #96	@ 0x60
 80020a6:	d02b      	beq.n	8002100 <HAL_CAN_IRQHandler+0x32a>
 80020a8:	2b60      	cmp	r3, #96	@ 0x60
 80020aa:	d82e      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020ac:	2b50      	cmp	r3, #80	@ 0x50
 80020ae:	d022      	beq.n	80020f6 <HAL_CAN_IRQHandler+0x320>
 80020b0:	2b50      	cmp	r3, #80	@ 0x50
 80020b2:	d82a      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020b4:	2b40      	cmp	r3, #64	@ 0x40
 80020b6:	d019      	beq.n	80020ec <HAL_CAN_IRQHandler+0x316>
 80020b8:	2b40      	cmp	r3, #64	@ 0x40
 80020ba:	d826      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020bc:	2b30      	cmp	r3, #48	@ 0x30
 80020be:	d010      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x30c>
 80020c0:	2b30      	cmp	r3, #48	@ 0x30
 80020c2:	d822      	bhi.n	800210a <HAL_CAN_IRQHandler+0x334>
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d002      	beq.n	80020ce <HAL_CAN_IRQHandler+0x2f8>
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d005      	beq.n	80020d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020cc:	e01d      	b.n	800210a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020d6:	e019      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f043 0310 	orr.w	r3, r3, #16
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020e0:	e014      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020ea:	e00f      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020f4:	e00a      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020fe:	e005      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002108:	e000      	b.n	800210c <HAL_CAN_IRQHandler+0x336>
            break;
 800210a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800211a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2204      	movs	r2, #4
 8002122:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	d008      	beq.n	800213c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 f87c 	bl	8002234 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800213c:	bf00      	nop
 800213e:	3728      	adds	r7, #40	@ 0x28
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f003 0307 	and.w	r3, r3, #7
 8002256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002258:	4b0c      	ldr	r3, [pc, #48]	@ (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002264:	4013      	ands	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002270:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002274:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227a:	4a04      	ldr	r2, [pc, #16]	@ (800228c <__NVIC_SetPriorityGrouping+0x44>)
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	60d3      	str	r3, [r2, #12]
}
 8002280:	bf00      	nop
 8002282:	3714      	adds	r7, #20
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002294:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	f003 0307 	and.w	r3, r3, #7
}
 800229e:	4618      	mov	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	db0b      	blt.n	80022d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f003 021f 	and.w	r2, r3, #31
 80022c4:	4907      	ldr	r1, [pc, #28]	@ (80022e4 <__NVIC_EnableIRQ+0x38>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	2001      	movs	r0, #1
 80022ce:	fa00 f202 	lsl.w	r2, r0, r2
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	e000e100 	.word	0xe000e100

080022e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	db0a      	blt.n	8002312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	490c      	ldr	r1, [pc, #48]	@ (8002334 <__NVIC_SetPriority+0x4c>)
 8002302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002306:	0112      	lsls	r2, r2, #4
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	440b      	add	r3, r1
 800230c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002310:	e00a      	b.n	8002328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	b2da      	uxtb	r2, r3
 8002316:	4908      	ldr	r1, [pc, #32]	@ (8002338 <__NVIC_SetPriority+0x50>)
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	3b04      	subs	r3, #4
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	440b      	add	r3, r1
 8002326:	761a      	strb	r2, [r3, #24]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000e100 	.word	0xe000e100
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233c:	b480      	push	{r7}
 800233e:	b089      	sub	sp, #36	@ 0x24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f1c3 0307 	rsb	r3, r3, #7
 8002356:	2b04      	cmp	r3, #4
 8002358:	bf28      	it	cs
 800235a:	2304      	movcs	r3, #4
 800235c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	3304      	adds	r3, #4
 8002362:	2b06      	cmp	r3, #6
 8002364:	d902      	bls.n	800236c <NVIC_EncodePriority+0x30>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3b03      	subs	r3, #3
 800236a:	e000      	b.n	800236e <NVIC_EncodePriority+0x32>
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	f04f 32ff 	mov.w	r2, #4294967295
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	401a      	ands	r2, r3
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002384:	f04f 31ff 	mov.w	r1, #4294967295
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43d9      	mvns	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002394:	4313      	orrs	r3, r2
         );
}
 8002396:	4618      	mov	r0, r3
 8002398:	3724      	adds	r7, #36	@ 0x24
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023b4:	d301      	bcc.n	80023ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023b6:	2301      	movs	r3, #1
 80023b8:	e00f      	b.n	80023da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <SysTick_Config+0x40>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c2:	210f      	movs	r1, #15
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	f7ff ff8e 	bl	80022e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <SysTick_Config+0x40>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d2:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <SysTick_Config+0x40>)
 80023d4:	2207      	movs	r2, #7
 80023d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	e000e010 	.word	0xe000e010

080023e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f7ff ff29 	bl	8002248 <__NVIC_SetPriorityGrouping>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002410:	f7ff ff3e 	bl	8002290 <__NVIC_GetPriorityGrouping>
 8002414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7ff ff8e 	bl	800233c <NVIC_EncodePriority>
 8002420:	4602      	mov	r2, r0
 8002422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff5d 	bl	80022e8 <__NVIC_SetPriority>
}
 800242e:	bf00      	nop
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff31 	bl	80022ac <__NVIC_EnableIRQ>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7ff ffa2 	bl	80023a4 <SysTick_Config>
 8002460:	4603      	mov	r3, r0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002478:	f7ff f934 	bl	80016e4 <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e099      	b.n	80025bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 0201 	bic.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a8:	e00f      	b.n	80024ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024aa:	f7ff f91b 	bl	80016e4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b05      	cmp	r3, #5
 80024b6:	d908      	bls.n	80024ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2220      	movs	r2, #32
 80024bc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2203      	movs	r2, #3
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e078      	b.n	80025bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1e8      	bne.n	80024aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4b38      	ldr	r3, [pc, #224]	@ (80025c4 <HAL_DMA_Init+0x158>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002502:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	2b04      	cmp	r3, #4
 8002522:	d107      	bne.n	8002534 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252c:	4313      	orrs	r3, r2
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0307 	bic.w	r3, r3, #7
 800254a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255a:	2b04      	cmp	r3, #4
 800255c:	d117      	bne.n	800258e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	4313      	orrs	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00e      	beq.n	800258e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa89 	bl	8002a88 <DMA_CheckFifoParam>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2240      	movs	r2, #64	@ 0x40
 8002580:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800258a:	2301      	movs	r3, #1
 800258c:	e016      	b.n	80025bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 fa40 	bl	8002a1c <DMA_CalcBaseAndBitshift>
 800259c:	4603      	mov	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	223f      	movs	r2, #63	@ 0x3f
 80025a6:	409a      	lsls	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	e010803f 	.word	0xe010803f

080025c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025d6:	f7ff f885 	bl	80016e4 <HAL_GetTick>
 80025da:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d008      	beq.n	80025fa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2280      	movs	r2, #128	@ 0x80
 80025ec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e052      	b.n	80026a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0216 	bic.w	r2, r2, #22
 8002608:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002618:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <HAL_DMA_Abort+0x62>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0208 	bic.w	r2, r2, #8
 8002638:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0201 	bic.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800264a:	e013      	b.n	8002674 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800264c:	f7ff f84a 	bl	80016e4 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b05      	cmp	r3, #5
 8002658:	d90c      	bls.n	8002674 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2203      	movs	r2, #3
 8002664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e015      	b.n	80026a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0301 	and.w	r3, r3, #1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1e4      	bne.n	800264c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002686:	223f      	movs	r2, #63	@ 0x3f
 8002688:	409a      	lsls	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d004      	beq.n	80026c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2280      	movs	r2, #128	@ 0x80
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00c      	b.n	80026e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2205      	movs	r2, #5
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002934 <HAL_DMA_IRQHandler+0x248>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a8e      	ldr	r2, [pc, #568]	@ (8002938 <HAL_DMA_IRQHandler+0x24c>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0a9b      	lsrs	r3, r3, #10
 8002704:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	2208      	movs	r2, #8
 8002718:	409a      	lsls	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4013      	ands	r3, r2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d013      	beq.n	8002758 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0204 	bic.w	r2, r2, #4
 800273e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002744:	2208      	movs	r2, #8
 8002746:	409a      	lsls	r2, r3
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002750:	f043 0201 	orr.w	r2, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800275c:	2201      	movs	r2, #1
 800275e:	409a      	lsls	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4013      	ands	r3, r2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d012      	beq.n	800278e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800277a:	2201      	movs	r2, #1
 800277c:	409a      	lsls	r2, r3
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002786:	f043 0202 	orr.w	r2, r3, #2
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002792:	2204      	movs	r2, #4
 8002794:	409a      	lsls	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d012      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b0:	2204      	movs	r2, #4
 80027b2:	409a      	lsls	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c8:	2210      	movs	r2, #16
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d043      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d03c      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e6:	2210      	movs	r2, #16
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d018      	beq.n	800282e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d108      	bne.n	800281c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d024      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	4798      	blx	r3
 800281a:	e01f      	b.n	800285c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002820:	2b00      	cmp	r3, #0
 8002822:	d01b      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	4798      	blx	r3
 800282c:	e016      	b.n	800285c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d107      	bne.n	800284c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0208 	bic.w	r2, r2, #8
 800284a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002860:	2220      	movs	r2, #32
 8002862:	409a      	lsls	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4013      	ands	r3, r2
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 808f 	beq.w	800298c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8087 	beq.w	800298c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	2220      	movs	r2, #32
 8002884:	409a      	lsls	r2, r3
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b05      	cmp	r3, #5
 8002894:	d136      	bne.n	8002904 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0216 	bic.w	r2, r2, #22
 80028a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d103      	bne.n	80028c6 <HAL_DMA_IRQHandler+0x1da>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0208 	bic.w	r2, r2, #8
 80028d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028da:	223f      	movs	r2, #63	@ 0x3f
 80028dc:	409a      	lsls	r2, r3
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d07e      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
        }
        return;
 8002902:	e079      	b.n	80029f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01d      	beq.n	800294e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002924:	2b00      	cmp	r3, #0
 8002926:	d031      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
 8002930:	e02c      	b.n	800298c <HAL_DMA_IRQHandler+0x2a0>
 8002932:	bf00      	nop
 8002934:	20000000 	.word	0x20000000
 8002938:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002940:	2b00      	cmp	r3, #0
 8002942:	d023      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e01e      	b.n	800298c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10f      	bne.n	800297c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0210 	bic.w	r2, r2, #16
 800296a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	2b00      	cmp	r3, #0
 8002992:	d032      	beq.n	80029fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d022      	beq.n	80029e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2205      	movs	r2, #5
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3301      	adds	r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d307      	bcc.n	80029d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f2      	bne.n	80029b8 <HAL_DMA_IRQHandler+0x2cc>
 80029d2:	e000      	b.n	80029d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80029d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	4798      	blx	r3
 80029f6:	e000      	b.n	80029fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80029f8:	bf00      	nop
    }
  }
}
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a0e:	b2db      	uxtb	r3, r3
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	3b10      	subs	r3, #16
 8002a2c:	4a14      	ldr	r2, [pc, #80]	@ (8002a80 <DMA_CalcBaseAndBitshift+0x64>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a36:	4a13      	ldr	r2, [pc, #76]	@ (8002a84 <DMA_CalcBaseAndBitshift+0x68>)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	d909      	bls.n	8002a5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	1d1a      	adds	r2, r3, #4
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a5c:	e007      	b.n	8002a6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002a66:	f023 0303 	bic.w	r3, r3, #3
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	aaaaaaab 	.word	0xaaaaaaab
 8002a84:	080095bc 	.word	0x080095bc

08002a88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d11f      	bne.n	8002ae2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d856      	bhi.n	8002b56 <DMA_CheckFifoParam+0xce>
 8002aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab0 <DMA_CheckFifoParam+0x28>)
 8002aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aae:	bf00      	nop
 8002ab0:	08002ac1 	.word	0x08002ac1
 8002ab4:	08002ad3 	.word	0x08002ad3
 8002ab8:	08002ac1 	.word	0x08002ac1
 8002abc:	08002b57 	.word	0x08002b57
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d046      	beq.n	8002b5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad0:	e043      	b.n	8002b5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ada:	d140      	bne.n	8002b5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e03d      	b.n	8002b5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002aea:	d121      	bne.n	8002b30 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d837      	bhi.n	8002b62 <DMA_CheckFifoParam+0xda>
 8002af2:	a201      	add	r2, pc, #4	@ (adr r2, 8002af8 <DMA_CheckFifoParam+0x70>)
 8002af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af8:	08002b09 	.word	0x08002b09
 8002afc:	08002b0f 	.word	0x08002b0f
 8002b00:	08002b09 	.word	0x08002b09
 8002b04:	08002b21 	.word	0x08002b21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e030      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d025      	beq.n	8002b66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1e:	e022      	b.n	8002b66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b28:	d11f      	bne.n	8002b6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b2e:	e01c      	b.n	8002b6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d903      	bls.n	8002b3e <DMA_CheckFifoParam+0xb6>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b03      	cmp	r3, #3
 8002b3a:	d003      	beq.n	8002b44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b3c:	e018      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      break;
 8002b42:	e015      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      break;
 8002b54:	e00b      	b.n	8002b6e <DMA_CheckFifoParam+0xe6>
      break;
 8002b56:	bf00      	nop
 8002b58:	e00a      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5a:	bf00      	nop
 8002b5c:	e008      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b5e:	bf00      	nop
 8002b60:	e006      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b62:	bf00      	nop
 8002b64:	e004      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b66:	bf00      	nop
 8002b68:	e002      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b6a:	bf00      	nop
 8002b6c:	e000      	b.n	8002b70 <DMA_CheckFifoParam+0xe8>
      break;
 8002b6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	@ 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	e165      	b.n	8002e68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f040 8154 	bne.w	8002e62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d005      	beq.n	8002bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d130      	bne.n	8002c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0201 	and.w	r2, r3, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d017      	beq.n	8002c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d123      	bne.n	8002cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80ae 	beq.w	8002e62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002e80 <HAL_GPIO_Init+0x300>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002e80 <HAL_GPIO_Init+0x300>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d16:	4b5a      	ldr	r3, [pc, #360]	@ (8002e80 <HAL_GPIO_Init+0x300>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d22:	4a58      	ldr	r2, [pc, #352]	@ (8002e84 <HAL_GPIO_Init+0x304>)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4f      	ldr	r2, [pc, #316]	@ (8002e88 <HAL_GPIO_Init+0x308>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d025      	beq.n	8002d9a <HAL_GPIO_Init+0x21a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4e      	ldr	r2, [pc, #312]	@ (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <HAL_GPIO_Init+0x216>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4d      	ldr	r2, [pc, #308]	@ (8002e90 <HAL_GPIO_Init+0x310>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d019      	beq.n	8002d92 <HAL_GPIO_Init+0x212>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4c      	ldr	r2, [pc, #304]	@ (8002e94 <HAL_GPIO_Init+0x314>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x20e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4b      	ldr	r2, [pc, #300]	@ (8002e98 <HAL_GPIO_Init+0x318>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x20a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4a      	ldr	r2, [pc, #296]	@ (8002e9c <HAL_GPIO_Init+0x31c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x206>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a49      	ldr	r2, [pc, #292]	@ (8002ea0 <HAL_GPIO_Init+0x320>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x202>
 8002d7e:	2306      	movs	r3, #6
 8002d80:	e00c      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d82:	2307      	movs	r3, #7
 8002d84:	e00a      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e008      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e004      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e002      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	f002 0203 	and.w	r2, r2, #3
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	4093      	lsls	r3, r2
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dac:	4935      	ldr	r1, [pc, #212]	@ (8002e84 <HAL_GPIO_Init+0x304>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dba:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dde:	4a31      	ldr	r2, [pc, #196]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002de4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e08:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	f67f ae96 	bls.w	8002b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	@ 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40021400 	.word	0x40021400
 8002ea0:	40021800 	.word	0x40021800
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb8:	787b      	ldrb	r3, [r7, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec4:	e003      	b.n	8002ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	041a      	lsls	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	619a      	str	r2, [r3, #24]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e12b      	b.n	8003146 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d106      	bne.n	8002f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fd ff48 	bl	8000d98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2224      	movs	r2, #36	@ 0x24
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f40:	f001 ff9a 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8002f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a81      	ldr	r2, [pc, #516]	@ (8003150 <HAL_I2C_Init+0x274>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d807      	bhi.n	8002f60 <HAL_I2C_Init+0x84>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	4a80      	ldr	r2, [pc, #512]	@ (8003154 <HAL_I2C_Init+0x278>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	bf94      	ite	ls
 8002f58:	2301      	movls	r3, #1
 8002f5a:	2300      	movhi	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	e006      	b.n	8002f6e <HAL_I2C_Init+0x92>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4a7d      	ldr	r2, [pc, #500]	@ (8003158 <HAL_I2C_Init+0x27c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bf94      	ite	ls
 8002f68:	2301      	movls	r3, #1
 8002f6a:	2300      	movhi	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0e7      	b.n	8003146 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4a78      	ldr	r2, [pc, #480]	@ (800315c <HAL_I2C_Init+0x280>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0c9b      	lsrs	r3, r3, #18
 8002f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68ba      	ldr	r2, [r7, #8]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a6a      	ldr	r2, [pc, #424]	@ (8003150 <HAL_I2C_Init+0x274>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d802      	bhi.n	8002fb0 <HAL_I2C_Init+0xd4>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	3301      	adds	r3, #1
 8002fae:	e009      	b.n	8002fc4 <HAL_I2C_Init+0xe8>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fb6:	fb02 f303 	mul.w	r3, r2, r3
 8002fba:	4a69      	ldr	r2, [pc, #420]	@ (8003160 <HAL_I2C_Init+0x284>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	099b      	lsrs	r3, r3, #6
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002fd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	495c      	ldr	r1, [pc, #368]	@ (8003150 <HAL_I2C_Init+0x274>)
 8002fe0:	428b      	cmp	r3, r1
 8002fe2:	d819      	bhi.n	8003018 <HAL_I2C_Init+0x13c>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e59      	subs	r1, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ff2:	1c59      	adds	r1, r3, #1
 8002ff4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ff8:	400b      	ands	r3, r1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_I2C_Init+0x138>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1e59      	subs	r1, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	fbb1 f3f3 	udiv	r3, r1, r3
 800300c:	3301      	adds	r3, #1
 800300e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003012:	e051      	b.n	80030b8 <HAL_I2C_Init+0x1dc>
 8003014:	2304      	movs	r3, #4
 8003016:	e04f      	b.n	80030b8 <HAL_I2C_Init+0x1dc>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d111      	bne.n	8003044 <HAL_I2C_Init+0x168>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	440b      	add	r3, r1
 800302e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e012      	b.n	800306a <HAL_I2C_Init+0x18e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	1e58      	subs	r0, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6859      	ldr	r1, [r3, #4]
 800304c:	460b      	mov	r3, r1
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	0099      	lsls	r1, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	fbb0 f3f3 	udiv	r3, r0, r3
 800305a:	3301      	adds	r3, #1
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_I2C_Init+0x196>
 800306e:	2301      	movs	r3, #1
 8003070:	e022      	b.n	80030b8 <HAL_I2C_Init+0x1dc>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10e      	bne.n	8003098 <HAL_I2C_Init+0x1bc>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e58      	subs	r0, r3, #1
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6859      	ldr	r1, [r3, #4]
 8003082:	460b      	mov	r3, r1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	440b      	add	r3, r1
 8003088:	fbb0 f3f3 	udiv	r3, r0, r3
 800308c:	3301      	adds	r3, #1
 800308e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003096:	e00f      	b.n	80030b8 <HAL_I2C_Init+0x1dc>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	1e58      	subs	r0, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	0099      	lsls	r1, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ae:	3301      	adds	r3, #1
 80030b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	6809      	ldr	r1, [r1, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80030e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6911      	ldr	r1, [r2, #16]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68d2      	ldr	r2, [r2, #12]
 80030f2:	4311      	orrs	r1, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	430b      	orrs	r3, r1
 80030fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	695a      	ldr	r2, [r3, #20]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	000186a0 	.word	0x000186a0
 8003154:	001e847f 	.word	0x001e847f
 8003158:	003d08ff 	.word	0x003d08ff
 800315c:	431bde83 	.word	0x431bde83
 8003160:	10624dd3 	.word	0x10624dd3

08003164 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800316c:	2300      	movs	r3, #0
 800316e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003184:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800318c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	2b10      	cmp	r3, #16
 8003192:	d003      	beq.n	800319c <HAL_I2C_EV_IRQHandler+0x38>
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	2b40      	cmp	r3, #64	@ 0x40
 8003198:	f040 80c1 	bne.w	800331e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80031bc:	d003      	beq.n	80031c6 <HAL_I2C_EV_IRQHandler+0x62>
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80031c4:	d101      	bne.n	80031ca <HAL_I2C_EV_IRQHandler+0x66>
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_I2C_EV_IRQHandler+0x68>
 80031ca:	2300      	movs	r3, #0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	f000 8132 	beq.w	8003436 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00c      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x92>
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	0a5b      	lsrs	r3, r3, #9
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f001 fc71 	bl	8004ad0 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fd79 	bl	8003ce6 <I2C_Master_SB>
 80031f4:	e092      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	08db      	lsrs	r3, r3, #3
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_I2C_EV_IRQHandler+0xb2>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	0a5b      	lsrs	r3, r3, #9
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fdef 	bl	8003df2 <I2C_Master_ADD10>
 8003214:	e082      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <HAL_I2C_EV_IRQHandler+0xd2>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	0a5b      	lsrs	r3, r3, #9
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 fe09 	bl	8003e46 <I2C_Master_ADDR>
 8003234:	e072      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d03b      	beq.n	80032ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800324c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003250:	f000 80f3 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	09db      	lsrs	r3, r3, #7
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00f      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x11c>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	0a9b      	lsrs	r3, r3, #10
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	2b00      	cmp	r3, #0
 800326a:	d009      	beq.n	8003280 <HAL_I2C_EV_IRQHandler+0x11c>
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	089b      	lsrs	r3, r3, #2
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d103      	bne.n	8003280 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f9f3 	bl	8003664 <I2C_MasterTransmit_TXE>
 800327e:	e04d      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b00      	cmp	r3, #0
 800328a:	f000 80d6 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	0a5b      	lsrs	r3, r3, #9
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 80cf 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800329c:	7bbb      	ldrb	r3, [r7, #14]
 800329e:	2b21      	cmp	r3, #33	@ 0x21
 80032a0:	d103      	bne.n	80032aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 fa7a 	bl	800379c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a8:	e0c7      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	f040 80c4 	bne.w	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fae8 	bl	8003888 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032b8:	e0bf      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032c8:	f000 80b7 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	099b      	lsrs	r3, r3, #6
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00f      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x194>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	0a9b      	lsrs	r3, r3, #10
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d009      	beq.n	80032f8 <HAL_I2C_EV_IRQHandler+0x194>
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d103      	bne.n	80032f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fb5d 	bl	80039b0 <I2C_MasterReceive_RXNE>
 80032f6:	e011      	b.n	800331c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 809a 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	0a5b      	lsrs	r3, r3, #9
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8093 	beq.w	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 fbfc 	bl	8003b12 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800331a:	e08e      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
 800331c:	e08d      	b.n	800343a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d004      	beq.n	8003330 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	e007      	b.n	8003340 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d012      	beq.n	8003372 <HAL_I2C_EV_IRQHandler+0x20e>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	0a5b      	lsrs	r3, r3, #9
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00c      	beq.n	8003372 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003368:	69b9      	ldr	r1, [r7, #24]
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 ffba 	bl	80042e4 <I2C_Slave_ADDR>
 8003370:	e066      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d009      	beq.n	8003392 <HAL_I2C_EV_IRQHandler+0x22e>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	0a5b      	lsrs	r3, r3, #9
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fff4 	bl	8004378 <I2C_Slave_STOPF>
 8003390:	e056      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003392:	7bbb      	ldrb	r3, [r7, #14]
 8003394:	2b21      	cmp	r3, #33	@ 0x21
 8003396:	d002      	beq.n	800339e <HAL_I2C_EV_IRQHandler+0x23a>
 8003398:	7bbb      	ldrb	r3, [r7, #14]
 800339a:	2b29      	cmp	r3, #41	@ 0x29
 800339c:	d125      	bne.n	80033ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	09db      	lsrs	r3, r3, #7
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00f      	beq.n	80033ca <HAL_I2C_EV_IRQHandler+0x266>
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	0a9b      	lsrs	r3, r3, #10
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_I2C_EV_IRQHandler+0x266>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	089b      	lsrs	r3, r3, #2
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d103      	bne.n	80033ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fed0 	bl	8004168 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033c8:	e039      	b.n	800343e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d033      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x2da>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	0a5b      	lsrs	r3, r3, #9
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d02d      	beq.n	800343e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fefd 	bl	80041e2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033e8:	e029      	b.n	800343e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	099b      	lsrs	r3, r3, #6
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00f      	beq.n	8003416 <HAL_I2C_EV_IRQHandler+0x2b2>
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	0a9b      	lsrs	r3, r3, #10
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	089b      	lsrs	r3, r3, #2
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	d103      	bne.n	8003416 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 ff08 	bl	8004224 <I2C_SlaveReceive_RXNE>
 8003414:	e014      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	089b      	lsrs	r3, r3, #2
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00e      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	0a5b      	lsrs	r3, r3, #9
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 ff36 	bl	80042a0 <I2C_SlaveReceive_BTF>
 8003434:	e004      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003436:	bf00      	nop
 8003438:	e002      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800343e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b08a      	sub	sp, #40	@ 0x28
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003468:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	0a1b      	lsrs	r3, r3, #8
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00e      	beq.n	8003494 <HAL_I2C_ER_IRQHandler+0x4e>
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d008      	beq.n	8003494 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003492:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	0a5b      	lsrs	r3, r3, #9
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <HAL_I2C_ER_IRQHandler+0x78>
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	0a1b      	lsrs	r3, r3, #8
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d008      	beq.n	80034be <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ae:	f043 0302 	orr.w	r3, r3, #2
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80034bc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	0a9b      	lsrs	r3, r3, #10
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d03f      	beq.n	800354a <HAL_I2C_ER_IRQHandler+0x104>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	0a1b      	lsrs	r3, r3, #8
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d039      	beq.n	800354a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80034d6:	7efb      	ldrb	r3, [r7, #27]
 80034d8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034de:	b29b      	uxth	r3, r3
 80034e0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80034f0:	7ebb      	ldrb	r3, [r7, #26]
 80034f2:	2b20      	cmp	r3, #32
 80034f4:	d112      	bne.n	800351c <HAL_I2C_ER_IRQHandler+0xd6>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10f      	bne.n	800351c <HAL_I2C_ER_IRQHandler+0xd6>
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	2b21      	cmp	r3, #33	@ 0x21
 8003500:	d008      	beq.n	8003514 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003502:	7cfb      	ldrb	r3, [r7, #19]
 8003504:	2b29      	cmp	r3, #41	@ 0x29
 8003506:	d005      	beq.n	8003514 <HAL_I2C_ER_IRQHandler+0xce>
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	2b28      	cmp	r3, #40	@ 0x28
 800350c:	d106      	bne.n	800351c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2b21      	cmp	r3, #33	@ 0x21
 8003512:	d103      	bne.n	800351c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f001 f85f 	bl	80045d8 <I2C_Slave_AF>
 800351a:	e016      	b.n	800354a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003524:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800352e:	7efb      	ldrb	r3, [r7, #27]
 8003530:	2b10      	cmp	r3, #16
 8003532:	d002      	beq.n	800353a <HAL_I2C_ER_IRQHandler+0xf4>
 8003534:	7efb      	ldrb	r3, [r7, #27]
 8003536:	2b40      	cmp	r3, #64	@ 0x40
 8003538:	d107      	bne.n	800354a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003548:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	0adb      	lsrs	r3, r3, #11
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00e      	beq.n	8003574 <HAL_I2C_ER_IRQHandler+0x12e>
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	f043 0308 	orr.w	r3, r3, #8
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003572:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003576:	2b00      	cmp	r3, #0
 8003578:	d008      	beq.n	800358c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f001 f896 	bl	80046b8 <I2C_ITError>
  }
}
 800358c:	bf00      	nop
 800358e:	3728      	adds	r7, #40	@ 0x28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
 80035f0:	4613      	mov	r3, r2
 80035f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003672:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800367a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003680:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	d150      	bne.n	800372c <I2C_MasterTransmit_TXE+0xc8>
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b21      	cmp	r3, #33	@ 0x21
 800368e:	d14d      	bne.n	800372c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d01d      	beq.n	80036d2 <I2C_MasterTransmit_TXE+0x6e>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b20      	cmp	r3, #32
 800369a:	d01a      	beq.n	80036d2 <I2C_MasterTransmit_TXE+0x6e>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036a2:	d016      	beq.n	80036d2 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036b2:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2211      	movs	r2, #17
 80036b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff62 	bl	8003594 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80036d0:	e060      	b.n	8003794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80036e0:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f0:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b40      	cmp	r3, #64	@ 0x40
 800370a:	d107      	bne.n	800371c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff7d 	bl	8003614 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800371a:	e03b      	b.n	8003794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff35 	bl	8003594 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800372a:	e033      	b.n	8003794 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b21      	cmp	r3, #33	@ 0x21
 8003730:	d005      	beq.n	800373e <I2C_MasterTransmit_TXE+0xda>
 8003732:	7bbb      	ldrb	r3, [r7, #14]
 8003734:	2b40      	cmp	r3, #64	@ 0x40
 8003736:	d12d      	bne.n	8003794 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	2b22      	cmp	r3, #34	@ 0x22
 800373c:	d12a      	bne.n	8003794 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d108      	bne.n	800375a <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003756:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003758:	e01c      	b.n	8003794 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b40      	cmp	r3, #64	@ 0x40
 8003764:	d103      	bne.n	800376e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f88e 	bl	8003888 <I2C_MemoryTransmit_TXE_BTF>
}
 800376c:	e012      	b.n	8003794 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003772:	781a      	ldrb	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003788:	b29b      	uxth	r3, r3
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003792:	e7ff      	b.n	8003794 <I2C_MasterTransmit_TXE+0x130>
 8003794:	bf00      	nop
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b21      	cmp	r3, #33	@ 0x21
 80037b4:	d164      	bne.n	8003880 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	781a      	ldrb	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80037e4:	e04c      	b.n	8003880 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d01d      	beq.n	8003828 <I2C_MasterTransmit_BTF+0x8c>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d01a      	beq.n	8003828 <I2C_MasterTransmit_BTF+0x8c>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037f8:	d016      	beq.n	8003828 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003808:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2211      	movs	r2, #17
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7ff feb7 	bl	8003594 <HAL_I2C_MasterTxCpltCallback>
}
 8003826:	e02b      	b.n	8003880 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003836:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003846:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b40      	cmp	r3, #64	@ 0x40
 8003860:	d107      	bne.n	8003872 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff fed2 	bl	8003614 <HAL_I2C_MemTxCpltCallback>
}
 8003870:	e006      	b.n	8003880 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff fe8a 	bl	8003594 <HAL_I2C_MasterTxCpltCallback>
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003896:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389c:	2b00      	cmp	r3, #0
 800389e:	d11d      	bne.n	80038dc <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d10b      	bne.n	80038c0 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80038be:	e073      	b.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	121b      	asrs	r3, r3, #8
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038da:	e065      	b.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d10b      	bne.n	80038fc <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80038fa:	e055      	b.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003900:	2b02      	cmp	r3, #2
 8003902:	d151      	bne.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	2b22      	cmp	r3, #34	@ 0x22
 8003908:	d10d      	bne.n	8003926 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003918:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003924:	e040      	b.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d015      	beq.n	800395c <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	2b21      	cmp	r3, #33	@ 0x21
 8003934:	d112      	bne.n	800395c <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	1c5a      	adds	r2, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003950:	b29b      	uxth	r3, r3
 8003952:	3b01      	subs	r3, #1
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800395a:	e025      	b.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d120      	bne.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8003966:	7bfb      	ldrb	r3, [r7, #15]
 8003968:	2b21      	cmp	r3, #33	@ 0x21
 800396a:	d11d      	bne.n	80039a8 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800397a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800398a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff fe36 	bl	8003614 <HAL_I2C_MemTxCpltCallback>
}
 80039a8:	bf00      	nop
 80039aa:	3710      	adds	r7, #16
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b22      	cmp	r3, #34	@ 0x22
 80039c2:	f040 80a2 	bne.w	8003b0a <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2b03      	cmp	r3, #3
 80039d2:	d921      	bls.n	8003a18 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691a      	ldr	r2, [r3, #16]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	f040 8082 	bne.w	8003b0a <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a14:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003a16:	e078      	b.n	8003b0a <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d074      	beq.n	8003b0a <I2C_MasterReceive_RXNE+0x15a>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d002      	beq.n	8003a2c <I2C_MasterReceive_RXNE+0x7c>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d16e      	bne.n	8003b0a <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f001 f81d 	bl	8004a6c <I2C_WaitOnSTOPRequestThroughIT>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d142      	bne.n	8003abe <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a46:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003a56:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b40      	cmp	r3, #64	@ 0x40
 8003a90:	d10a      	bne.n	8003aa8 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7ff fdc1 	bl	8003628 <HAL_I2C_MemRxCpltCallback>
}
 8003aa6:	e030      	b.n	8003b0a <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2212      	movs	r2, #18
 8003ab4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7ff fd76 	bl	80035a8 <HAL_I2C_MasterRxCpltCallback>
}
 8003abc:	e025      	b.n	8003b0a <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003acc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	3b01      	subs	r3, #1
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff fd99 	bl	800363c <HAL_I2C_ErrorCallback>
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d11b      	bne.n	8003b62 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b38:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003b60:	e0bd      	b.n	8003cde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d129      	bne.n	8003bc0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b7a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d00a      	beq.n	8003b98 <I2C_MasterReceive_BTF+0x86>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d007      	beq.n	8003b98 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b96:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	691a      	ldr	r2, [r3, #16]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bbe:	e08e      	b.n	8003cde <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d176      	bne.n	8003cb8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d002      	beq.n	8003bd6 <I2C_MasterReceive_BTF+0xc4>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d108      	bne.n	8003be8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e019      	b.n	8003c1c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	d002      	beq.n	8003bf4 <I2C_MasterReceive_BTF+0xe2>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d108      	bne.n	8003c06 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	e00a      	b.n	8003c1c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d007      	beq.n	8003c1c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c76:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b40      	cmp	r3, #64	@ 0x40
 8003c8a:	d10a      	bne.n	8003ca2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff fcc4 	bl	8003628 <HAL_I2C_MemRxCpltCallback>
}
 8003ca0:	e01d      	b.n	8003cde <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2212      	movs	r2, #18
 8003cae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff fc79 	bl	80035a8 <HAL_I2C_MasterRxCpltCallback>
}
 8003cb6:	e012      	b.n	8003cde <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	b2d2      	uxtb	r2, r2
 8003cc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b40      	cmp	r3, #64	@ 0x40
 8003cf8:	d117      	bne.n	8003d2a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d12:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003d14:	e067      	b.n	8003de6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	611a      	str	r2, [r3, #16]
}
 8003d28:	e05d      	b.n	8003de6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d32:	d133      	bne.n	8003d9c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b21      	cmp	r3, #33	@ 0x21
 8003d3e:	d109      	bne.n	8003d54 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d50:	611a      	str	r2, [r3, #16]
 8003d52:	e008      	b.n	8003d66 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d004      	beq.n	8003d78 <I2C_Master_SB+0x92>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d032      	beq.n	8003de6 <I2C_Master_SB+0x100>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d02d      	beq.n	8003de6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d98:	605a      	str	r2, [r3, #4]
}
 8003d9a:	e024      	b.n	8003de6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10e      	bne.n	8003dc2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	11db      	asrs	r3, r3, #7
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f003 0306 	and.w	r3, r3, #6
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f063 030f 	orn	r3, r3, #15
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	611a      	str	r2, [r3, #16]
}
 8003dc0:	e011      	b.n	8003de6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d10d      	bne.n	8003de6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	11db      	asrs	r3, r3, #7
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f003 0306 	and.w	r3, r3, #6
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	f063 030e 	orn	r3, r3, #14
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	611a      	str	r2, [r3, #16]
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <I2C_Master_ADD10+0x26>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d108      	bne.n	8003e2a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00c      	beq.n	8003e3a <I2C_Master_ADD10+0x48>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e38:	605a      	str	r2, [r3, #4]
  }
}
 8003e3a:	bf00      	nop
 8003e3c:	370c      	adds	r7, #12
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b091      	sub	sp, #68	@ 0x44
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b22      	cmp	r3, #34	@ 0x22
 8003e6e:	f040 8169 	bne.w	8004144 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10f      	bne.n	8003e9a <I2C_Master_ADDR+0x54>
 8003e7a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8003e7e:	2b40      	cmp	r3, #64	@ 0x40
 8003e80:	d10b      	bne.n	8003e9a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e82:	2300      	movs	r3, #0
 8003e84:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e98:	e160      	b.n	800415c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d11d      	bne.n	8003ede <I2C_Master_ADDR+0x98>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003eaa:	d118      	bne.n	8003ede <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	651a      	str	r2, [r3, #80]	@ 0x50
 8003edc:	e13e      	b.n	800415c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d113      	bne.n	8003f10 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e115      	b.n	800413c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	f040 808a 	bne.w	8004030 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f22:	d137      	bne.n	8003f94 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f32:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f3e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f42:	d113      	bne.n	8003f6c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f52:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f54:	2300      	movs	r3, #0
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6a:	e0e7      	b.n	800413c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	623b      	str	r3, [r7, #32]
 8003f80:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e0d3      	b.n	800413c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f96:	2b08      	cmp	r3, #8
 8003f98:	d02e      	beq.n	8003ff8 <I2C_Master_ADDR+0x1b2>
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d02b      	beq.n	8003ff8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa2:	2b12      	cmp	r3, #18
 8003fa4:	d102      	bne.n	8003fac <I2C_Master_ADDR+0x166>
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d125      	bne.n	8003ff8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d00e      	beq.n	8003fd0 <I2C_Master_ADDR+0x18a>
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d00b      	beq.n	8003fd0 <I2C_Master_ADDR+0x18a>
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d008      	beq.n	8003fd0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	e007      	b.n	8003fe0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fde:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	61fb      	str	r3, [r7, #28]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	e0a1      	b.n	800413c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004006:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004008:	2300      	movs	r3, #0
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e085      	b.n	800413c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d14d      	bne.n	80040d6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	2b04      	cmp	r3, #4
 800403e:	d016      	beq.n	800406e <I2C_Master_ADDR+0x228>
 8004040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004042:	2b02      	cmp	r3, #2
 8004044:	d013      	beq.n	800406e <I2C_Master_ADDR+0x228>
 8004046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004048:	2b10      	cmp	r3, #16
 800404a:	d010      	beq.n	800406e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800405a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	e007      	b.n	800407e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800407c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800408c:	d117      	bne.n	80040be <I2C_Master_ADDR+0x278>
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004094:	d00b      	beq.n	80040ae <I2C_Master_ADDR+0x268>
 8004096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004098:	2b01      	cmp	r3, #1
 800409a:	d008      	beq.n	80040ae <I2C_Master_ADDR+0x268>
 800409c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d005      	beq.n	80040ae <I2C_Master_ADDR+0x268>
 80040a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a4:	2b10      	cmp	r3, #16
 80040a6:	d002      	beq.n	80040ae <I2C_Master_ADDR+0x268>
 80040a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d107      	bne.n	80040be <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80040bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	617b      	str	r3, [r7, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	e032      	b.n	800413c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040e4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f4:	d117      	bne.n	8004126 <I2C_Master_ADDR+0x2e0>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040fc:	d00b      	beq.n	8004116 <I2C_Master_ADDR+0x2d0>
 80040fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004100:	2b01      	cmp	r3, #1
 8004102:	d008      	beq.n	8004116 <I2C_Master_ADDR+0x2d0>
 8004104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004106:	2b08      	cmp	r3, #8
 8004108:	d005      	beq.n	8004116 <I2C_Master_ADDR+0x2d0>
 800410a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800410c:	2b10      	cmp	r3, #16
 800410e:	d002      	beq.n	8004116 <I2C_Master_ADDR+0x2d0>
 8004110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004112:	2b20      	cmp	r3, #32
 8004114:	d107      	bne.n	8004126 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004124:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	613b      	str	r3, [r7, #16]
 800413a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004142:	e00b      	b.n	800415c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	68fb      	ldr	r3, [r7, #12]
}
 800415a:	e7ff      	b.n	800415c <I2C_Master_ADDR+0x316>
 800415c:	bf00      	nop
 800415e:	3744      	adds	r7, #68	@ 0x44
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004176:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d02b      	beq.n	80041da <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	781a      	ldrb	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800419c:	b29b      	uxth	r3, r3
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d114      	bne.n	80041da <I2C_SlaveTransmit_TXE+0x72>
 80041b0:	7bfb      	ldrb	r3, [r7, #15]
 80041b2:	2b29      	cmp	r3, #41	@ 0x29
 80041b4:	d111      	bne.n	80041da <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2221      	movs	r2, #33	@ 0x21
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2228      	movs	r2, #40	@ 0x28
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff f9f1 	bl	80035bc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d011      	beq.n	8004218 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004232:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d02c      	beq.n	8004298 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d114      	bne.n	8004298 <I2C_SlaveReceive_RXNE+0x74>
 800426e:	7bfb      	ldrb	r3, [r7, #15]
 8004270:	2b2a      	cmp	r3, #42	@ 0x2a
 8004272:	d111      	bne.n	8004298 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004282:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2222      	movs	r2, #34	@ 0x22
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2228      	movs	r2, #40	@ 0x28
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff f99c 	bl	80035d0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d012      	beq.n	80042d8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042fe:	2b28      	cmp	r3, #40	@ 0x28
 8004300:	d127      	bne.n	8004352 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004310:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	089b      	lsrs	r3, r3, #2
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800431e:	2301      	movs	r3, #1
 8004320:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	09db      	lsrs	r3, r3, #7
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d103      	bne.n	8004336 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	81bb      	strh	r3, [r7, #12]
 8004334:	e002      	b.n	800433c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004344:	89ba      	ldrh	r2, [r7, #12]
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff f94a 	bl	80035e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004350:	e00e      	b.n	8004370 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004352:	2300      	movs	r3, #0
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004370:	bf00      	nop
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004386:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004396:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	60bb      	str	r3, [r7, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d4:	d172      	bne.n	80044bc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
 80043d8:	2b22      	cmp	r3, #34	@ 0x22
 80043da:	d002      	beq.n	80043e2 <I2C_Slave_STOPF+0x6a>
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	2b2a      	cmp	r3, #42	@ 0x2a
 80043e0:	d135      	bne.n	800444e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fe:	f043 0204 	orr.w	r2, r3, #4
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004414:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe faf0 	bl	8002a00 <HAL_DMA_GetState>
 8004420:	4603      	mov	r3, r0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d049      	beq.n	80044ba <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442a:	4a69      	ldr	r2, [pc, #420]	@ (80045d0 <I2C_Slave_STOPF+0x258>)
 800442c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe f938 	bl	80026a8 <HAL_DMA_Abort_IT>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d03d      	beq.n	80044ba <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004448:	4610      	mov	r0, r2
 800444a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800444c:	e035      	b.n	80044ba <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f043 0204 	orr.w	r2, r3, #4
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685a      	ldr	r2, [r3, #4]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004480:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe faba 	bl	8002a00 <HAL_DMA_GetState>
 800448c:	4603      	mov	r3, r0
 800448e:	2b01      	cmp	r3, #1
 8004490:	d014      	beq.n	80044bc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004496:	4a4e      	ldr	r2, [pc, #312]	@ (80045d0 <I2C_Slave_STOPF+0x258>)
 8004498:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe f902 	bl	80026a8 <HAL_DMA_Abort_IT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80044b4:	4610      	mov	r0, r2
 80044b6:	4798      	blx	r3
 80044b8:	e000      	b.n	80044bc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ba:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d03e      	beq.n	8004544 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f003 0304 	and.w	r3, r3, #4
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d112      	bne.n	80044fa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691a      	ldr	r2, [r3, #16]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b40      	cmp	r3, #64	@ 0x40
 8004506:	d112      	bne.n	800452e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	3b01      	subs	r3, #1
 8004528:	b29a      	uxth	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453c:	f043 0204 	orr.w	r2, r3, #4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f8b3 	bl	80046b8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004552:	e039      	b.n	80045c8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004554:	7bfb      	ldrb	r3, [r7, #15]
 8004556:	2b2a      	cmp	r3, #42	@ 0x2a
 8004558:	d109      	bne.n	800456e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2228      	movs	r2, #40	@ 0x28
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff f831 	bl	80035d0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b28      	cmp	r3, #40	@ 0x28
 8004578:	d111      	bne.n	800459e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a15      	ldr	r2, [pc, #84]	@ (80045d4 <I2C_Slave_STOPF+0x25c>)
 800457e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff f832 	bl	8003600 <HAL_I2C_ListenCpltCallback>
}
 800459c:	e014      	b.n	80045c8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	2b22      	cmp	r3, #34	@ 0x22
 80045a4:	d002      	beq.n	80045ac <I2C_Slave_STOPF+0x234>
 80045a6:	7bfb      	ldrb	r3, [r7, #15]
 80045a8:	2b22      	cmp	r3, #34	@ 0x22
 80045aa:	d10d      	bne.n	80045c8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff f804 	bl	80035d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	0800491d 	.word	0x0800491d
 80045d4:	ffff0000 	.word	0xffff0000

080045d8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ec:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d002      	beq.n	80045fa <I2C_Slave_AF+0x22>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d129      	bne.n	800464e <I2C_Slave_AF+0x76>
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	2b28      	cmp	r3, #40	@ 0x28
 80045fe:	d126      	bne.n	800464e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a2c      	ldr	r2, [pc, #176]	@ (80046b4 <I2C_Slave_AF+0xdc>)
 8004604:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004614:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800461e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2220      	movs	r2, #32
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7fe ffda 	bl	8003600 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800464c:	e02e      	b.n	80046ac <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b21      	cmp	r3, #33	@ 0x21
 8004652:	d126      	bne.n	80046a2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a17      	ldr	r2, [pc, #92]	@ (80046b4 <I2C_Slave_AF+0xdc>)
 8004658:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2221      	movs	r2, #33	@ 0x21
 800465e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800467e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004688:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004698:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7fe ff8e 	bl	80035bc <HAL_I2C_SlaveTxCpltCallback>
}
 80046a0:	e004      	b.n	80046ac <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046aa:	615a      	str	r2, [r3, #20]
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	ffff0000 	.word	0xffff0000

080046b8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b084      	sub	sp, #16
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046d0:	7bbb      	ldrb	r3, [r7, #14]
 80046d2:	2b10      	cmp	r3, #16
 80046d4:	d002      	beq.n	80046dc <I2C_ITError+0x24>
 80046d6:	7bbb      	ldrb	r3, [r7, #14]
 80046d8:	2b40      	cmp	r3, #64	@ 0x40
 80046da:	d10a      	bne.n	80046f2 <I2C_ITError+0x3a>
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b22      	cmp	r3, #34	@ 0x22
 80046e0:	d107      	bne.n	80046f2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80046f8:	2b28      	cmp	r3, #40	@ 0x28
 80046fa:	d107      	bne.n	800470c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2228      	movs	r2, #40	@ 0x28
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800470a:	e015      	b.n	8004738 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004716:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800471a:	d00a      	beq.n	8004732 <I2C_ITError+0x7a>
 800471c:	7bfb      	ldrb	r3, [r7, #15]
 800471e:	2b60      	cmp	r3, #96	@ 0x60
 8004720:	d007      	beq.n	8004732 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004742:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004746:	d162      	bne.n	800480e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004756:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800475c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	d020      	beq.n	80047a8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800476a:	4a6a      	ldr	r2, [pc, #424]	@ (8004914 <I2C_ITError+0x25c>)
 800476c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004772:	4618      	mov	r0, r3
 8004774:	f7fd ff98 	bl	80026a8 <HAL_DMA_Abort_IT>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8089 	beq.w	8004892 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800479c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80047a2:	4610      	mov	r0, r2
 80047a4:	4798      	blx	r3
 80047a6:	e074      	b.n	8004892 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	4a59      	ldr	r2, [pc, #356]	@ (8004914 <I2C_ITError+0x25c>)
 80047ae:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fd ff77 	bl	80026a8 <HAL_DMA_Abort_IT>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d068      	beq.n	8004892 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ca:	2b40      	cmp	r3, #64	@ 0x40
 80047cc:	d10b      	bne.n	80047e6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691a      	ldr	r2, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004808:	4610      	mov	r0, r2
 800480a:	4798      	blx	r3
 800480c:	e041      	b.n	8004892 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b60      	cmp	r3, #96	@ 0x60
 8004818:	d125      	bne.n	8004866 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004832:	2b40      	cmp	r3, #64	@ 0x40
 8004834:	d10b      	bne.n	800484e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe fef6 	bl	8003650 <HAL_I2C_AbortCpltCallback>
 8004864:	e015      	b.n	8004892 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004870:	2b40      	cmp	r3, #64	@ 0x40
 8004872:	d10b      	bne.n	800488c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7fe fed5 	bl	800363c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004896:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10e      	bne.n	80048c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d109      	bne.n	80048c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d104      	bne.n	80048c0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048ce:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b04      	cmp	r3, #4
 80048e2:	d113      	bne.n	800490c <I2C_ITError+0x254>
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b28      	cmp	r3, #40	@ 0x28
 80048e8:	d110      	bne.n	800490c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004918 <I2C_ITError+0x260>)
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fe fe7a 	bl	8003600 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800490c:	bf00      	nop
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	0800491d 	.word	0x0800491d
 8004918:	ffff0000 	.word	0xffff0000

0800491c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004934:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004936:	4b4b      	ldr	r3, [pc, #300]	@ (8004a64 <I2C_DMAAbort+0x148>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	08db      	lsrs	r3, r3, #3
 800493c:	4a4a      	ldr	r2, [pc, #296]	@ (8004a68 <I2C_DMAAbort+0x14c>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	0a1a      	lsrs	r2, r3, #8
 8004944:	4613      	mov	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	4413      	add	r3, r2
 800494a:	00da      	lsls	r2, r3, #3
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	f043 0220 	orr.w	r2, r3, #32
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004962:	e00a      	b.n	800497a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3b01      	subs	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004978:	d0ea      	beq.n	8004950 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004986:	2200      	movs	r2, #0
 8004988:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	2200      	movs	r2, #0
 8004998:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049bc:	2200      	movs	r2, #0
 80049be:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	2200      	movs	r2, #0
 80049ce:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b60      	cmp	r3, #96	@ 0x60
 80049ea:	d10e      	bne.n	8004a0a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2200      	movs	r2, #0
 8004a00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a02:	6978      	ldr	r0, [r7, #20]
 8004a04:	f7fe fe24 	bl	8003650 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a08:	e027      	b.n	8004a5a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a10:	2b28      	cmp	r3, #40	@ 0x28
 8004a12:	d117      	bne.n	8004a44 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0201 	orr.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a32:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2228      	movs	r2, #40	@ 0x28
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a42:	e007      	b.n	8004a54 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004a54:	6978      	ldr	r0, [r7, #20]
 8004a56:	f7fe fdf1 	bl	800363c <HAL_I2C_ErrorCallback>
}
 8004a5a:	bf00      	nop
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000000 	.word	0x20000000
 8004a68:	14f8b589 	.word	0x14f8b589

08004a6c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004a78:	4b13      	ldr	r3, [pc, #76]	@ (8004ac8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	08db      	lsrs	r3, r3, #3
 8004a7e:	4a13      	ldr	r2, [pc, #76]	@ (8004acc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	0a1a      	lsrs	r2, r3, #8
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3b01      	subs	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d107      	bne.n	8004aaa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e008      	b.n	8004abc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab8:	d0e9      	beq.n	8004a8e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	20000000 	.word	0x20000000
 8004acc:	14f8b589 	.word	0x14f8b589

08004ad0 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004ae0:	d103      	bne.n	8004aea <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ae8:	e007      	b.n	8004afa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004af2:	d102      	bne.n	8004afa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2208      	movs	r2, #8
 8004af8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0cc      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b1c:	4b68      	ldr	r3, [pc, #416]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d90c      	bls.n	8004b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2a:	4b65      	ldr	r3, [pc, #404]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b63      	ldr	r3, [pc, #396]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0b8      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d020      	beq.n	8004b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b5c:	4b59      	ldr	r3, [pc, #356]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	4a58      	ldr	r2, [pc, #352]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b74:	4b53      	ldr	r3, [pc, #332]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	4a52      	ldr	r2, [pc, #328]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b80:	4b50      	ldr	r3, [pc, #320]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	494d      	ldr	r1, [pc, #308]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d044      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d107      	bne.n	8004bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	4b47      	ldr	r3, [pc, #284]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d119      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e07f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d003      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d107      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d109      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e06f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e067      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004be6:	4b37      	ldr	r3, [pc, #220]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f023 0203 	bic.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	4934      	ldr	r1, [pc, #208]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bf8:	f7fc fd74 	bl	80016e4 <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bfe:	e00a      	b.n	8004c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c00:	f7fc fd70 	bl	80016e4 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e04f      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c16:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 020c 	and.w	r2, r3, #12
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d1eb      	bne.n	8004c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c28:	4b25      	ldr	r3, [pc, #148]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0307 	and.w	r3, r3, #7
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d20c      	bcs.n	8004c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c36:	4b22      	ldr	r3, [pc, #136]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c3e:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e032      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c5c:	4b19      	ldr	r3, [pc, #100]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	4916      	ldr	r1, [pc, #88]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d009      	beq.n	8004c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7a:	4b12      	ldr	r3, [pc, #72]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	00db      	lsls	r3, r3, #3
 8004c88:	490e      	ldr	r1, [pc, #56]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c8e:	f000 f821 	bl	8004cd4 <HAL_RCC_GetSysClockFreq>
 8004c92:	4602      	mov	r2, r0
 8004c94:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	490a      	ldr	r1, [pc, #40]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca0:	5ccb      	ldrb	r3, [r1, r3]
 8004ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ca6:	4a09      	ldr	r2, [pc, #36]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004caa:	4b09      	ldr	r3, [pc, #36]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fc fcd4 	bl	800165c <HAL_InitTick>

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	40023c00 	.word	0x40023c00
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	080095a4 	.word	0x080095a4
 8004ccc:	20000000 	.word	0x20000000
 8004cd0:	20000004 	.word	0x20000004

08004cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd8:	b090      	sub	sp, #64	@ 0x40
 8004cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cec:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 030c 	and.w	r3, r3, #12
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d00d      	beq.n	8004d14 <HAL_RCC_GetSysClockFreq+0x40>
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	f200 80a1 	bhi.w	8004e40 <HAL_RCC_GetSysClockFreq+0x16c>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_RCC_GetSysClockFreq+0x34>
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d003      	beq.n	8004d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d06:	e09b      	b.n	8004e40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d08:	4b53      	ldr	r3, [pc, #332]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004d0c:	e09b      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d0e:	4b53      	ldr	r3, [pc, #332]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8004d10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d12:	e098      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d14:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d028      	beq.n	8004d7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	2200      	movs	r2, #0
 8004d32:	623b      	str	r3, [r7, #32]
 8004d34:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4b47      	ldr	r3, [pc, #284]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8004d40:	fb03 f201 	mul.w	r2, r3, r1
 8004d44:	2300      	movs	r3, #0
 8004d46:	fb00 f303 	mul.w	r3, r0, r3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	4a43      	ldr	r2, [pc, #268]	@ (8004e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8004d4e:	fba0 1202 	umull	r1, r2, r0, r2
 8004d52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d54:	460a      	mov	r2, r1
 8004d56:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004d58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d5a:	4413      	add	r3, r2
 8004d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d60:	2200      	movs	r2, #0
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	61fa      	str	r2, [r7, #28]
 8004d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004d6e:	f7fb fa57 	bl	8000220 <__aeabi_uldivmod>
 8004d72:	4602      	mov	r2, r0
 8004d74:	460b      	mov	r3, r1
 8004d76:	4613      	mov	r3, r2
 8004d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d7a:	e053      	b.n	8004e24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7c:	4b35      	ldr	r3, [pc, #212]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	099b      	lsrs	r3, r3, #6
 8004d82:	2200      	movs	r2, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	617a      	str	r2, [r7, #20]
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d8e:	f04f 0b00 	mov.w	fp, #0
 8004d92:	4652      	mov	r2, sl
 8004d94:	465b      	mov	r3, fp
 8004d96:	f04f 0000 	mov.w	r0, #0
 8004d9a:	f04f 0100 	mov.w	r1, #0
 8004d9e:	0159      	lsls	r1, r3, #5
 8004da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da4:	0150      	lsls	r0, r2, #5
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	ebb2 080a 	subs.w	r8, r2, sl
 8004dae:	eb63 090b 	sbc.w	r9, r3, fp
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	f04f 0300 	mov.w	r3, #0
 8004dba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004dbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004dc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004dc6:	ebb2 0408 	subs.w	r4, r2, r8
 8004dca:	eb63 0509 	sbc.w	r5, r3, r9
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	00eb      	lsls	r3, r5, #3
 8004dd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ddc:	00e2      	lsls	r2, r4, #3
 8004dde:	4614      	mov	r4, r2
 8004de0:	461d      	mov	r5, r3
 8004de2:	eb14 030a 	adds.w	r3, r4, sl
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	eb45 030b 	adc.w	r3, r5, fp
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	028b      	lsls	r3, r1, #10
 8004dfe:	4621      	mov	r1, r4
 8004e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e04:	4621      	mov	r1, r4
 8004e06:	028a      	lsls	r2, r1, #10
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0e:	2200      	movs	r2, #0
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	60fa      	str	r2, [r7, #12]
 8004e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e18:	f7fb fa02 	bl	8000220 <__aeabi_uldivmod>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4613      	mov	r3, r2
 8004e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004e34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e3e:	e002      	b.n	8004e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e40:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8004e42:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3740      	adds	r7, #64	@ 0x40
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	00f42400 	.word	0x00f42400
 8004e5c:	017d7840 	.word	0x017d7840

08004e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e66:	681b      	ldr	r3, [r3, #0]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	20000000 	.word	0x20000000

08004e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e7c:	f7ff fff0 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004e80:	4602      	mov	r2, r0
 8004e82:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	0a9b      	lsrs	r3, r3, #10
 8004e88:	f003 0307 	and.w	r3, r3, #7
 8004e8c:	4903      	ldr	r1, [pc, #12]	@ (8004e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e8e:	5ccb      	ldrb	r3, [r1, r3]
 8004e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	080095b4 	.word	0x080095b4

08004ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ea4:	f7ff ffdc 	bl	8004e60 <HAL_RCC_GetHCLKFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b05      	ldr	r3, [pc, #20]	@ (8004ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	0b5b      	lsrs	r3, r3, #13
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	4903      	ldr	r1, [pc, #12]	@ (8004ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	080095b4 	.word	0x080095b4

08004ec8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e273      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d075      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ee6:	4b88      	ldr	r3, [pc, #544]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d00c      	beq.n	8004f0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ef2:	4b85      	ldr	r3, [pc, #532]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d112      	bne.n	8004f24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004efe:	4b82      	ldr	r3, [pc, #520]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f0a:	d10b      	bne.n	8004f24 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0c:	4b7e      	ldr	r3, [pc, #504]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d05b      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x108>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d157      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e24e      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f2c:	d106      	bne.n	8004f3c <HAL_RCC_OscConfig+0x74>
 8004f2e:	4b76      	ldr	r3, [pc, #472]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a75      	ldr	r2, [pc, #468]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e01d      	b.n	8004f78 <HAL_RCC_OscConfig+0xb0>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f44:	d10c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x98>
 8004f46:	4b70      	ldr	r3, [pc, #448]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a6f      	ldr	r2, [pc, #444]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	4b6d      	ldr	r3, [pc, #436]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a6c      	ldr	r2, [pc, #432]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCC_OscConfig+0xb0>
 8004f60:	4b69      	ldr	r3, [pc, #420]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a68      	ldr	r2, [pc, #416]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	4b66      	ldr	r3, [pc, #408]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a65      	ldr	r2, [pc, #404]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d013      	beq.n	8004fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fc fbb0 	bl	80016e4 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f88:	f7fc fbac 	bl	80016e4 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b64      	cmp	r3, #100	@ 0x64
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e213      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9a:	4b5b      	ldr	r3, [pc, #364]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0xc0>
 8004fa6:	e014      	b.n	8004fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fc fb9c 	bl	80016e4 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fc fb98 	bl	80016e4 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e1ff      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc2:	4b51      	ldr	r3, [pc, #324]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f0      	bne.n	8004fb0 <HAL_RCC_OscConfig+0xe8>
 8004fce:	e000      	b.n	8004fd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d063      	beq.n	80050a6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004fde:	4b4a      	ldr	r3, [pc, #296]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fea:	4b47      	ldr	r3, [pc, #284]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d11c      	bne.n	8005030 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ff6:	4b44      	ldr	r3, [pc, #272]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d116      	bne.n	8005030 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005002:	4b41      	ldr	r3, [pc, #260]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d005      	beq.n	800501a <HAL_RCC_OscConfig+0x152>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d001      	beq.n	800501a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e1d3      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501a:	4b3b      	ldr	r3, [pc, #236]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4937      	ldr	r1, [pc, #220]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800502e:	e03a      	b.n	80050a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d020      	beq.n	800507a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005038:	4b34      	ldr	r3, [pc, #208]	@ (800510c <HAL_RCC_OscConfig+0x244>)
 800503a:	2201      	movs	r2, #1
 800503c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503e:	f7fc fb51 	bl	80016e4 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005044:	e008      	b.n	8005058 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005046:	f7fc fb4d 	bl	80016e4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e1b4      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005058:	4b2b      	ldr	r3, [pc, #172]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d0f0      	beq.n	8005046 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005064:	4b28      	ldr	r3, [pc, #160]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	4925      	ldr	r1, [pc, #148]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 8005074:	4313      	orrs	r3, r2
 8005076:	600b      	str	r3, [r1, #0]
 8005078:	e015      	b.n	80050a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800507a:	4b24      	ldr	r3, [pc, #144]	@ (800510c <HAL_RCC_OscConfig+0x244>)
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7fc fb30 	bl	80016e4 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005088:	f7fc fb2c 	bl	80016e4 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e193      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800509a:	4b1b      	ldr	r3, [pc, #108]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f0      	bne.n	8005088 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d036      	beq.n	8005120 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d016      	beq.n	80050e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ba:	4b15      	ldr	r3, [pc, #84]	@ (8005110 <HAL_RCC_OscConfig+0x248>)
 80050bc:	2201      	movs	r2, #1
 80050be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c0:	f7fc fb10 	bl	80016e4 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c8:	f7fc fb0c 	bl	80016e4 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e173      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050da:	4b0b      	ldr	r3, [pc, #44]	@ (8005108 <HAL_RCC_OscConfig+0x240>)
 80050dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0f0      	beq.n	80050c8 <HAL_RCC_OscConfig+0x200>
 80050e6:	e01b      	b.n	8005120 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050e8:	4b09      	ldr	r3, [pc, #36]	@ (8005110 <HAL_RCC_OscConfig+0x248>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ee:	f7fc faf9 	bl	80016e4 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	e00e      	b.n	8005114 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f6:	f7fc faf5 	bl	80016e4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	2b02      	cmp	r3, #2
 8005102:	d907      	bls.n	8005114 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e15c      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
 8005108:	40023800 	.word	0x40023800
 800510c:	42470000 	.word	0x42470000
 8005110:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005114:	4b8a      	ldr	r3, [pc, #552]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ea      	bne.n	80050f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 8097 	beq.w	800525c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800512e:	2300      	movs	r3, #0
 8005130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005132:	4b83      	ldr	r3, [pc, #524]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10f      	bne.n	800515e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]
 8005142:	4b7f      	ldr	r3, [pc, #508]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	4a7e      	ldr	r2, [pc, #504]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800514c:	6413      	str	r3, [r2, #64]	@ 0x40
 800514e:	4b7c      	ldr	r3, [pc, #496]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005156:	60bb      	str	r3, [r7, #8]
 8005158:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800515a:	2301      	movs	r3, #1
 800515c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515e:	4b79      	ldr	r3, [pc, #484]	@ (8005344 <HAL_RCC_OscConfig+0x47c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d118      	bne.n	800519c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800516a:	4b76      	ldr	r3, [pc, #472]	@ (8005344 <HAL_RCC_OscConfig+0x47c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a75      	ldr	r2, [pc, #468]	@ (8005344 <HAL_RCC_OscConfig+0x47c>)
 8005170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005174:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005176:	f7fc fab5 	bl	80016e4 <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517e:	f7fc fab1 	bl	80016e4 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e118      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005190:	4b6c      	ldr	r3, [pc, #432]	@ (8005344 <HAL_RCC_OscConfig+0x47c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d106      	bne.n	80051b2 <HAL_RCC_OscConfig+0x2ea>
 80051a4:	4b66      	ldr	r3, [pc, #408]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a8:	4a65      	ldr	r2, [pc, #404]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80051b0:	e01c      	b.n	80051ec <HAL_RCC_OscConfig+0x324>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	2b05      	cmp	r3, #5
 80051b8:	d10c      	bne.n	80051d4 <HAL_RCC_OscConfig+0x30c>
 80051ba:	4b61      	ldr	r3, [pc, #388]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051be:	4a60      	ldr	r2, [pc, #384]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051c0:	f043 0304 	orr.w	r3, r3, #4
 80051c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c6:	4b5e      	ldr	r3, [pc, #376]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	4a5d      	ldr	r2, [pc, #372]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d2:	e00b      	b.n	80051ec <HAL_RCC_OscConfig+0x324>
 80051d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d8:	4a59      	ldr	r2, [pc, #356]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	6713      	str	r3, [r2, #112]	@ 0x70
 80051e0:	4b57      	ldr	r3, [pc, #348]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e4:	4a56      	ldr	r2, [pc, #344]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80051e6:	f023 0304 	bic.w	r3, r3, #4
 80051ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d015      	beq.n	8005220 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f4:	f7fc fa76 	bl	80016e4 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051fa:	e00a      	b.n	8005212 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051fc:	f7fc fa72 	bl	80016e4 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800520a:	4293      	cmp	r3, r2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e0d7      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005212:	4b4b      	ldr	r3, [pc, #300]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ee      	beq.n	80051fc <HAL_RCC_OscConfig+0x334>
 800521e:	e014      	b.n	800524a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005220:	f7fc fa60 	bl	80016e4 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005226:	e00a      	b.n	800523e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005228:	f7fc fa5c 	bl	80016e4 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e0c1      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523e:	4b40      	ldr	r3, [pc, #256]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1ee      	bne.n	8005228 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800524a:	7dfb      	ldrb	r3, [r7, #23]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d105      	bne.n	800525c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005250:	4b3b      	ldr	r3, [pc, #236]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	4a3a      	ldr	r2, [pc, #232]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005256:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800525a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80ad 	beq.w	80053c0 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005266:	4b36      	ldr	r3, [pc, #216]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	2b08      	cmp	r3, #8
 8005270:	d060      	beq.n	8005334 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d145      	bne.n	8005306 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527a:	4b33      	ldr	r3, [pc, #204]	@ (8005348 <HAL_RCC_OscConfig+0x480>)
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fc fa30 	bl	80016e4 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005288:	f7fc fa2c 	bl	80016e4 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e093      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529a:	4b29      	ldr	r3, [pc, #164]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	019b      	lsls	r3, r3, #6
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	085b      	lsrs	r3, r3, #1
 80052be:	3b01      	subs	r3, #1
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c8:	061b      	lsls	r3, r3, #24
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d0:	071b      	lsls	r3, r3, #28
 80052d2:	491b      	ldr	r1, [pc, #108]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d8:	4b1b      	ldr	r3, [pc, #108]	@ (8005348 <HAL_RCC_OscConfig+0x480>)
 80052da:	2201      	movs	r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052de:	f7fc fa01 	bl	80016e4 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e6:	f7fc f9fd 	bl	80016e4 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e064      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f8:	4b11      	ldr	r3, [pc, #68]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x41e>
 8005304:	e05c      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005306:	4b10      	ldr	r3, [pc, #64]	@ (8005348 <HAL_RCC_OscConfig+0x480>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fc f9ea 	bl	80016e4 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005314:	f7fc f9e6 	bl	80016e4 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e04d      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005326:	4b06      	ldr	r3, [pc, #24]	@ (8005340 <HAL_RCC_OscConfig+0x478>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x44c>
 8005332:	e045      	b.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d107      	bne.n	800534c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e040      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
 8005340:	40023800 	.word	0x40023800
 8005344:	40007000 	.word	0x40007000
 8005348:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800534c:	4b1f      	ldr	r3, [pc, #124]	@ (80053cc <HAL_RCC_OscConfig+0x504>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d030      	beq.n	80053bc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005364:	429a      	cmp	r2, r3
 8005366:	d129      	bne.n	80053bc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005372:	429a      	cmp	r2, r3
 8005374:	d122      	bne.n	80053bc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800537c:	4013      	ands	r3, r2
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005382:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005384:	4293      	cmp	r3, r2
 8005386:	d119      	bne.n	80053bc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	3b01      	subs	r3, #1
 8005396:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005398:	429a      	cmp	r2, r3
 800539a:	d10f      	bne.n	80053bc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d107      	bne.n	80053bc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e000      	b.n	80053c2 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800

080053d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e07b      	b.n	80054da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d108      	bne.n	80053fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053f2:	d009      	beq.n	8005408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	61da      	str	r2, [r3, #28]
 80053fa:	e005      	b.n	8005408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d106      	bne.n	8005428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7fb fe1a 	bl	800105c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800543e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800545a:	431a      	orrs	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005482:	431a      	orrs	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800548c:	ea42 0103 	orr.w	r1, r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005494:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	0c1b      	lsrs	r3, r3, #16
 80054a6:	f003 0104 	and.w	r1, r3, #4
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	f003 0210 	and.w	r2, r3, #16
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69da      	ldr	r2, [r3, #28]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	099b      	lsrs	r3, r3, #6
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10f      	bne.n	8005528 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	099b      	lsrs	r3, r3, #6
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d004      	beq.n	8005528 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	4798      	blx	r3
    return;
 8005526:	e0d7      	b.n	80056d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_SPI_IRQHandler+0x66>
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	09db      	lsrs	r3, r3, #7
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d004      	beq.n	800554a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
    return;
 8005548:	e0c6      	b.n	80056d8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10c      	bne.n	8005570 <HAL_SPI_IRQHandler+0x8c>
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	099b      	lsrs	r3, r3, #6
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 80b4 	beq.w	80056d8 <HAL_SPI_IRQHandler+0x1f4>
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80ad 	beq.w	80056d8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	099b      	lsrs	r3, r3, #6
 8005582:	f003 0301 	and.w	r3, r3, #1
 8005586:	2b00      	cmp	r3, #0
 8005588:	d023      	beq.n	80055d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b03      	cmp	r3, #3
 8005594:	d011      	beq.n	80055ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800559a:	f043 0204 	orr.w	r2, r3, #4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055a2:	2300      	movs	r3, #0
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	e00b      	b.n	80055d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	693b      	ldr	r3, [r7, #16]
        return;
 80055d0:	e082      	b.n	80056d8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d014      	beq.n	8005608 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e2:	f043 0201 	orr.w	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00c      	beq.n	800562e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005618:	f043 0208 	orr.w	r2, r3, #8
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60bb      	str	r3, [r7, #8]
 800562c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04f      	beq.n	80056d6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005644:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f003 0302 	and.w	r3, r3, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <HAL_SPI_IRQHandler+0x17e>
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d034      	beq.n	80056cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0203 	bic.w	r2, r2, #3
 8005670:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d011      	beq.n	800569e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800567e:	4a18      	ldr	r2, [pc, #96]	@ (80056e0 <HAL_SPI_IRQHandler+0x1fc>)
 8005680:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005686:	4618      	mov	r0, r3
 8005688:	f7fd f80e 	bl	80026a8 <HAL_DMA_Abort_IT>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005696:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d016      	beq.n	80056d4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056aa:	4a0d      	ldr	r2, [pc, #52]	@ (80056e0 <HAL_SPI_IRQHandler+0x1fc>)
 80056ac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7fc fff8 	bl	80026a8 <HAL_DMA_Abort_IT>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80056ca:	e003      	b.n	80056d4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f809 	bl	80056e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80056d2:	e000      	b.n	80056d6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80056d4:	bf00      	nop
    return;
 80056d6:	bf00      	nop
  }
}
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	080056f9 	.word	0x080056f9

080056e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f7ff ffe6 	bl	80056e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005718:	bf00      	nop
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e03f      	b.n	80057b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fb fe02 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2224      	movs	r2, #36	@ 0x24
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fc7b 	bl	8006060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695a      	ldr	r2, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2220      	movs	r2, #32
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b0ba      	sub	sp, #232	@ 0xe8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10f      	bne.n	8005822 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <HAL_UART_IRQHandler+0x66>
 800580e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fb65 	bl	8005eea <UART_Receive_IT>
      return;
 8005820:	e256      	b.n	8005cd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80de 	beq.w	80059e8 <HAL_UART_IRQHandler+0x22c>
 800582c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800583c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80d1 	beq.w	80059e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00b      	beq.n	800586a <HAL_UART_IRQHandler+0xae>
 8005852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d005      	beq.n	800586a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005862:	f043 0201 	orr.w	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <HAL_UART_IRQHandler+0xd2>
 8005876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	f043 0202 	orr.w	r2, r3, #2
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800588e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00b      	beq.n	80058b2 <HAL_UART_IRQHandler+0xf6>
 800589a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80058b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b6:	f003 0308 	and.w	r3, r3, #8
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d011      	beq.n	80058e2 <HAL_UART_IRQHandler+0x126>
 80058be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d105      	bne.n	80058d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80058ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d005      	beq.n	80058e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	f043 0208 	orr.w	r2, r3, #8
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 81ed 	beq.w	8005cc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f0:	f003 0320 	and.w	r3, r3, #32
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_UART_IRQHandler+0x14e>
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fc:	f003 0320 	and.w	r3, r3, #32
 8005900:	2b00      	cmp	r3, #0
 8005902:	d002      	beq.n	800590a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 faf0 	bl	8005eea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005914:	2b40      	cmp	r3, #64	@ 0x40
 8005916:	bf0c      	ite	eq
 8005918:	2301      	moveq	r3, #1
 800591a:	2300      	movne	r3, #0
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	f003 0308 	and.w	r3, r3, #8
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <HAL_UART_IRQHandler+0x17a>
 800592e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005932:	2b00      	cmp	r3, #0
 8005934:	d04f      	beq.n	80059d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f9f8 	bl	8005d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005946:	2b40      	cmp	r3, #64	@ 0x40
 8005948:	d141      	bne.n	80059ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005954:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005960:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005968:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	3314      	adds	r3, #20
 8005972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005976:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800597a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800598e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1d9      	bne.n	800594a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599a:	2b00      	cmp	r3, #0
 800599c:	d013      	beq.n	80059c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a2:	4a7d      	ldr	r2, [pc, #500]	@ (8005b98 <HAL_UART_IRQHandler+0x3dc>)
 80059a4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fc fe7c 	bl	80026a8 <HAL_DMA_Abort_IT>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d016      	beq.n	80059e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80059c0:	4610      	mov	r0, r2
 80059c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c4:	e00e      	b.n	80059e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f99a 	bl	8005d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	e00a      	b.n	80059e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f996 	bl	8005d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d4:	e006      	b.n	80059e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f992 	bl	8005d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80059e2:	e170      	b.n	8005cc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059e4:	bf00      	nop
    return;
 80059e6:	e16e      	b.n	8005cc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	f040 814a 	bne.w	8005c86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 8143 	beq.w	8005c86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 813c 	beq.w	8005c86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60bb      	str	r3, [r7, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	60bb      	str	r3, [r7, #8]
 8005a22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2e:	2b40      	cmp	r3, #64	@ 0x40
 8005a30:	f040 80b4 	bne.w	8005b9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8140 	beq.w	8005cca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a52:	429a      	cmp	r2, r3
 8005a54:	f080 8139 	bcs.w	8005cca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a6a:	f000 8088 	beq.w	8005b7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005aaa:	e841 2300 	strex	r3, r2, [r1]
 8005aae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1d9      	bne.n	8005a6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3314      	adds	r3, #20
 8005ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ade:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ae2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e1      	bne.n	8005aba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3314      	adds	r3, #20
 8005b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e3      	bne.n	8005af6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b60:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e3      	bne.n	8005b3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fc fd25 	bl	80025c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f8c0 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b94:	e099      	b.n	8005cca <HAL_UART_IRQHandler+0x50e>
 8005b96:	bf00      	nop
 8005b98:	08005df3 	.word	0x08005df3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 808b 	beq.w	8005cce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8086 	beq.w	8005cce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	330c      	adds	r3, #12
 8005bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	330c      	adds	r3, #12
 8005be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005be6:	647a      	str	r2, [r7, #68]	@ 0x44
 8005be8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bee:	e841 2300 	strex	r3, r2, [r1]
 8005bf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1e3      	bne.n	8005bc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3314      	adds	r3, #20
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	623b      	str	r3, [r7, #32]
   return(result);
 8005c0a:	6a3b      	ldr	r3, [r7, #32]
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e3      	bne.n	8005bfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0310 	bic.w	r3, r3, #16
 8005c56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	330c      	adds	r3, #12
 8005c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c64:	61fa      	str	r2, [r7, #28]
 8005c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	69b9      	ldr	r1, [r7, #24]
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	617b      	str	r3, [r7, #20]
   return(result);
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e3      	bne.n	8005c40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f848 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c84:	e023      	b.n	8005cce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x4ea>
 8005c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f8bb 	bl	8005e1a <UART_Transmit_IT>
    return;
 8005ca4:	e014      	b.n	8005cd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x514>
 8005cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d008      	beq.n	8005cd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8fb 	bl	8005eba <UART_EndTransmit_IT>
    return;
 8005cc4:	e004      	b.n	8005cd0 <HAL_UART_IRQHandler+0x514>
    return;
 8005cc6:	bf00      	nop
 8005cc8:	e002      	b.n	8005cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8005cca:	bf00      	nop
 8005ccc:	e000      	b.n	8005cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8005cce:	bf00      	nop
  }
}
 8005cd0:	37e8      	adds	r7, #232	@ 0xe8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop

08005cd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b095      	sub	sp, #84	@ 0x54
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d54:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e5      	bne.n	8005d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3314      	adds	r3, #20
 8005d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f023 0301 	bic.w	r3, r3, #1
 8005d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3314      	adds	r3, #20
 8005d86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d119      	bne.n	8005dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc4:	61ba      	str	r2, [r7, #24]
 8005dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6979      	ldr	r1, [r7, #20]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e5      	bne.n	8005da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005de6:	bf00      	nop
 8005de8:	3754      	adds	r7, #84	@ 0x54
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff ff77 	bl	8005d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b21      	cmp	r3, #33	@ 0x21
 8005e2c:	d13e      	bne.n	8005eac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e36:	d114      	bne.n	8005e62 <UART_Transmit_IT+0x48>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d110      	bne.n	8005e62 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a1b      	ldr	r3, [r3, #32]
 8005e44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a1b      	ldr	r3, [r3, #32]
 8005e5a:	1c9a      	adds	r2, r3, #2
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	621a      	str	r2, [r3, #32]
 8005e60:	e008      	b.n	8005e74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	1c59      	adds	r1, r3, #1
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6211      	str	r1, [r2, #32]
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	4619      	mov	r1, r3
 8005e82:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10f      	bne.n	8005ea8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ea6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e000      	b.n	8005eae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eac:	2302      	movs	r3, #2
  }
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b082      	sub	sp, #8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ed0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7ff fefc 	bl	8005cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b08c      	sub	sp, #48	@ 0x30
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b22      	cmp	r3, #34	@ 0x22
 8005efc:	f040 80ab 	bne.w	8006056 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f08:	d117      	bne.n	8005f3a <UART_Receive_IT+0x50>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d113      	bne.n	8005f3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f32:	1c9a      	adds	r2, r3, #2
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f38:	e026      	b.n	8005f88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4c:	d007      	beq.n	8005f5e <UART_Receive_IT+0x74>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10a      	bne.n	8005f6c <UART_Receive_IT+0x82>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d106      	bne.n	8005f6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	e008      	b.n	8005f7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	1c5a      	adds	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	4619      	mov	r1, r3
 8005f96:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d15a      	bne.n	8006052 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68da      	ldr	r2, [r3, #12]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0220 	bic.w	r2, r2, #32
 8005faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695a      	ldr	r2, [r3, #20]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f022 0201 	bic.w	r2, r2, #1
 8005fca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d135      	bne.n	8006048 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f023 0310 	bic.w	r3, r3, #16
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006002:	623a      	str	r2, [r7, #32]
 8006004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	69f9      	ldr	r1, [r7, #28]
 8006008:	6a3a      	ldr	r2, [r7, #32]
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e5      	bne.n	8005fe2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0310 	and.w	r3, r3, #16
 8006020:	2b10      	cmp	r3, #16
 8006022:	d10a      	bne.n	800603a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800603e:	4619      	mov	r1, r3
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f7ff fe67 	bl	8005d14 <HAL_UARTEx_RxEventCallback>
 8006046:	e002      	b.n	800604e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fe4f 	bl	8005cec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	e002      	b.n	8006058 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	e000      	b.n	8006058 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006056:	2302      	movs	r3, #2
  }
}
 8006058:	4618      	mov	r0, r3
 800605a:	3730      	adds	r7, #48	@ 0x30
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006064:	b0c0      	sub	sp, #256	@ 0x100
 8006066:	af00      	add	r7, sp, #0
 8006068:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607c:	68d9      	ldr	r1, [r3, #12]
 800607e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	ea40 0301 	orr.w	r3, r0, r1
 8006088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	431a      	orrs	r2, r3
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	695b      	ldr	r3, [r3, #20]
 800609e:	431a      	orrs	r2, r3
 80060a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060b8:	f021 010c 	bic.w	r1, r1, #12
 80060bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060c6:	430b      	orrs	r3, r1
 80060c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060da:	6999      	ldr	r1, [r3, #24]
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	ea40 0301 	orr.w	r3, r0, r1
 80060e6:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80060e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	4b95      	ldr	r3, [pc, #596]	@ (8006344 <UART_SetConfig+0x2e4>)
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d011      	beq.n	8006118 <UART_SetConfig+0xb8>
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	4b93      	ldr	r3, [pc, #588]	@ (8006348 <UART_SetConfig+0x2e8>)
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d00b      	beq.n	8006118 <UART_SetConfig+0xb8>
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b91      	ldr	r3, [pc, #580]	@ (800634c <UART_SetConfig+0x2ec>)
 8006108:	429a      	cmp	r2, r3
 800610a:	d005      	beq.n	8006118 <UART_SetConfig+0xb8>
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b8f      	ldr	r3, [pc, #572]	@ (8006350 <UART_SetConfig+0x2f0>)
 8006114:	429a      	cmp	r2, r3
 8006116:	d104      	bne.n	8006122 <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006118:	f7fe fec2 	bl	8004ea0 <HAL_RCC_GetPCLK2Freq>
 800611c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006120:	e003      	b.n	800612a <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006122:	f7fe fea9 	bl	8004e78 <HAL_RCC_GetPCLK1Freq>
 8006126:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006134:	f040 8110 	bne.w	8006358 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800613c:	2200      	movs	r2, #0
 800613e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006142:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800614a:	4622      	mov	r2, r4
 800614c:	462b      	mov	r3, r5
 800614e:	1891      	adds	r1, r2, r2
 8006150:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006152:	415b      	adcs	r3, r3
 8006154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800615a:	4621      	mov	r1, r4
 800615c:	eb12 0801 	adds.w	r8, r2, r1
 8006160:	4629      	mov	r1, r5
 8006162:	eb43 0901 	adc.w	r9, r3, r1
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800617a:	4690      	mov	r8, r2
 800617c:	4699      	mov	r9, r3
 800617e:	4623      	mov	r3, r4
 8006180:	eb18 0303 	adds.w	r3, r8, r3
 8006184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006188:	462b      	mov	r3, r5
 800618a:	eb49 0303 	adc.w	r3, r9, r3
 800618e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800619e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061a6:	460b      	mov	r3, r1
 80061a8:	18db      	adds	r3, r3, r3
 80061aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ac:	4613      	mov	r3, r2
 80061ae:	eb42 0303 	adc.w	r3, r2, r3
 80061b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80061b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061bc:	f7fa f830 	bl	8000220 <__aeabi_uldivmod>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4b63      	ldr	r3, [pc, #396]	@ (8006354 <UART_SetConfig+0x2f4>)
 80061c6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	011c      	lsls	r4, r3, #4
 80061ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	1891      	adds	r1, r2, r2
 80061e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061e8:	415b      	adcs	r3, r3
 80061ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061f0:	4641      	mov	r1, r8
 80061f2:	eb12 0a01 	adds.w	sl, r2, r1
 80061f6:	4649      	mov	r1, r9
 80061f8:	eb43 0b01 	adc.w	fp, r3, r1
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800620c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006210:	4692      	mov	sl, r2
 8006212:	469b      	mov	fp, r3
 8006214:	4643      	mov	r3, r8
 8006216:	eb1a 0303 	adds.w	r3, sl, r3
 800621a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800621e:	464b      	mov	r3, r9
 8006220:	eb4b 0303 	adc.w	r3, fp, r3
 8006224:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006234:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800623c:	460b      	mov	r3, r1
 800623e:	18db      	adds	r3, r3, r3
 8006240:	643b      	str	r3, [r7, #64]	@ 0x40
 8006242:	4613      	mov	r3, r2
 8006244:	eb42 0303 	adc.w	r3, r2, r3
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
 800624a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800624e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006252:	f7f9 ffe5 	bl	8000220 <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4611      	mov	r1, r2
 800625c:	4b3d      	ldr	r3, [pc, #244]	@ (8006354 <UART_SetConfig+0x2f4>)
 800625e:	fba3 2301 	umull	r2, r3, r3, r1
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	2264      	movs	r2, #100	@ 0x64
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	1acb      	subs	r3, r1, r3
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006272:	4b38      	ldr	r3, [pc, #224]	@ (8006354 <UART_SetConfig+0x2f4>)
 8006274:	fba3 2302 	umull	r2, r3, r3, r2
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006280:	441c      	add	r4, r3
 8006282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006286:	2200      	movs	r2, #0
 8006288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800628c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006294:	4642      	mov	r2, r8
 8006296:	464b      	mov	r3, r9
 8006298:	1891      	adds	r1, r2, r2
 800629a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800629c:	415b      	adcs	r3, r3
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062a4:	4641      	mov	r1, r8
 80062a6:	1851      	adds	r1, r2, r1
 80062a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80062aa:	4649      	mov	r1, r9
 80062ac:	414b      	adcs	r3, r1
 80062ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062bc:	4659      	mov	r1, fp
 80062be:	00cb      	lsls	r3, r1, #3
 80062c0:	4651      	mov	r1, sl
 80062c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062c6:	4651      	mov	r1, sl
 80062c8:	00ca      	lsls	r2, r1, #3
 80062ca:	4610      	mov	r0, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	4642      	mov	r2, r8
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062d8:	464b      	mov	r3, r9
 80062da:	460a      	mov	r2, r1
 80062dc:	eb42 0303 	adc.w	r3, r2, r3
 80062e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062f8:	460b      	mov	r3, r1
 80062fa:	18db      	adds	r3, r3, r3
 80062fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062fe:	4613      	mov	r3, r2
 8006300:	eb42 0303 	adc.w	r3, r2, r3
 8006304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800630a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800630e:	f7f9 ff87 	bl	8000220 <__aeabi_uldivmod>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <UART_SetConfig+0x2f4>)
 8006318:	fba3 1302 	umull	r1, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	2164      	movs	r1, #100	@ 0x64
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	3332      	adds	r3, #50	@ 0x32
 800632a:	4a0a      	ldr	r2, [pc, #40]	@ (8006354 <UART_SetConfig+0x2f4>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f003 0207 	and.w	r2, r3, #7
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4422      	add	r2, r4
 800633e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006340:	e10a      	b.n	8006558 <UART_SetConfig+0x4f8>
 8006342:	bf00      	nop
 8006344:	40011000 	.word	0x40011000
 8006348:	40011400 	.word	0x40011400
 800634c:	40011800 	.word	0x40011800
 8006350:	40011c00 	.word	0x40011c00
 8006354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800635c:	2200      	movs	r2, #0
 800635e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006362:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800636a:	4642      	mov	r2, r8
 800636c:	464b      	mov	r3, r9
 800636e:	1891      	adds	r1, r2, r2
 8006370:	6239      	str	r1, [r7, #32]
 8006372:	415b      	adcs	r3, r3
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
 8006376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800637a:	4641      	mov	r1, r8
 800637c:	1854      	adds	r4, r2, r1
 800637e:	4649      	mov	r1, r9
 8006380:	eb43 0501 	adc.w	r5, r3, r1
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	f04f 0300 	mov.w	r3, #0
 800638c:	00eb      	lsls	r3, r5, #3
 800638e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006392:	00e2      	lsls	r2, r4, #3
 8006394:	4614      	mov	r4, r2
 8006396:	461d      	mov	r5, r3
 8006398:	4643      	mov	r3, r8
 800639a:	18e3      	adds	r3, r4, r3
 800639c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80063a0:	464b      	mov	r3, r9
 80063a2:	eb45 0303 	adc.w	r3, r5, r3
 80063a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063c6:	4629      	mov	r1, r5
 80063c8:	008b      	lsls	r3, r1, #2
 80063ca:	4621      	mov	r1, r4
 80063cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063d0:	4621      	mov	r1, r4
 80063d2:	008a      	lsls	r2, r1, #2
 80063d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063d8:	f7f9 ff22 	bl	8000220 <__aeabi_uldivmod>
 80063dc:	4602      	mov	r2, r0
 80063de:	460b      	mov	r3, r1
 80063e0:	4b60      	ldr	r3, [pc, #384]	@ (8006564 <UART_SetConfig+0x504>)
 80063e2:	fba3 2302 	umull	r2, r3, r3, r2
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	011c      	lsls	r4, r3, #4
 80063ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063fc:	4642      	mov	r2, r8
 80063fe:	464b      	mov	r3, r9
 8006400:	1891      	adds	r1, r2, r2
 8006402:	61b9      	str	r1, [r7, #24]
 8006404:	415b      	adcs	r3, r3
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800640c:	4641      	mov	r1, r8
 800640e:	1851      	adds	r1, r2, r1
 8006410:	6139      	str	r1, [r7, #16]
 8006412:	4649      	mov	r1, r9
 8006414:	414b      	adcs	r3, r1
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	f04f 0200 	mov.w	r2, #0
 800641c:	f04f 0300 	mov.w	r3, #0
 8006420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006424:	4659      	mov	r1, fp
 8006426:	00cb      	lsls	r3, r1, #3
 8006428:	4651      	mov	r1, sl
 800642a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800642e:	4651      	mov	r1, sl
 8006430:	00ca      	lsls	r2, r1, #3
 8006432:	4610      	mov	r0, r2
 8006434:	4619      	mov	r1, r3
 8006436:	4603      	mov	r3, r0
 8006438:	4642      	mov	r2, r8
 800643a:	189b      	adds	r3, r3, r2
 800643c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006440:	464b      	mov	r3, r9
 8006442:	460a      	mov	r2, r1
 8006444:	eb42 0303 	adc.w	r3, r2, r3
 8006448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006456:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006464:	4649      	mov	r1, r9
 8006466:	008b      	lsls	r3, r1, #2
 8006468:	4641      	mov	r1, r8
 800646a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800646e:	4641      	mov	r1, r8
 8006470:	008a      	lsls	r2, r1, #2
 8006472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006476:	f7f9 fed3 	bl	8000220 <__aeabi_uldivmod>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4611      	mov	r1, r2
 8006480:	4b38      	ldr	r3, [pc, #224]	@ (8006564 <UART_SetConfig+0x504>)
 8006482:	fba3 2301 	umull	r2, r3, r3, r1
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2264      	movs	r2, #100	@ 0x64
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	1acb      	subs	r3, r1, r3
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	3332      	adds	r3, #50	@ 0x32
 8006494:	4a33      	ldr	r2, [pc, #204]	@ (8006564 <UART_SetConfig+0x504>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	095b      	lsrs	r3, r3, #5
 800649c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064a0:	441c      	add	r4, r3
 80064a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064a6:	2200      	movs	r2, #0
 80064a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80064aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80064ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064b0:	4642      	mov	r2, r8
 80064b2:	464b      	mov	r3, r9
 80064b4:	1891      	adds	r1, r2, r2
 80064b6:	60b9      	str	r1, [r7, #8]
 80064b8:	415b      	adcs	r3, r3
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064c0:	4641      	mov	r1, r8
 80064c2:	1851      	adds	r1, r2, r1
 80064c4:	6039      	str	r1, [r7, #0]
 80064c6:	4649      	mov	r1, r9
 80064c8:	414b      	adcs	r3, r1
 80064ca:	607b      	str	r3, [r7, #4]
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064d8:	4659      	mov	r1, fp
 80064da:	00cb      	lsls	r3, r1, #3
 80064dc:	4651      	mov	r1, sl
 80064de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064e2:	4651      	mov	r1, sl
 80064e4:	00ca      	lsls	r2, r1, #3
 80064e6:	4610      	mov	r0, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	4603      	mov	r3, r0
 80064ec:	4642      	mov	r2, r8
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064f2:	464b      	mov	r3, r9
 80064f4:	460a      	mov	r2, r1
 80064f6:	eb42 0303 	adc.w	r3, r2, r3
 80064fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	663b      	str	r3, [r7, #96]	@ 0x60
 8006506:	667a      	str	r2, [r7, #100]	@ 0x64
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006514:	4649      	mov	r1, r9
 8006516:	008b      	lsls	r3, r1, #2
 8006518:	4641      	mov	r1, r8
 800651a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800651e:	4641      	mov	r1, r8
 8006520:	008a      	lsls	r2, r1, #2
 8006522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006526:	f7f9 fe7b 	bl	8000220 <__aeabi_uldivmod>
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <UART_SetConfig+0x504>)
 8006530:	fba3 1302 	umull	r1, r3, r3, r2
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	2164      	movs	r1, #100	@ 0x64
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	3332      	adds	r3, #50	@ 0x32
 8006542:	4a08      	ldr	r2, [pc, #32]	@ (8006564 <UART_SetConfig+0x504>)
 8006544:	fba2 2303 	umull	r2, r3, r2, r3
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	f003 020f 	and.w	r2, r3, #15
 800654e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4422      	add	r2, r4
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800655e:	46bd      	mov	sp, r7
 8006560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006564:	51eb851f 	.word	0x51eb851f

08006568 <__NVIC_SetPriority>:
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	6039      	str	r1, [r7, #0]
 8006572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006578:	2b00      	cmp	r3, #0
 800657a:	db0a      	blt.n	8006592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	b2da      	uxtb	r2, r3
 8006580:	490c      	ldr	r1, [pc, #48]	@ (80065b4 <__NVIC_SetPriority+0x4c>)
 8006582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006586:	0112      	lsls	r2, r2, #4
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	440b      	add	r3, r1
 800658c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006590:	e00a      	b.n	80065a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	4908      	ldr	r1, [pc, #32]	@ (80065b8 <__NVIC_SetPriority+0x50>)
 8006598:	79fb      	ldrb	r3, [r7, #7]
 800659a:	f003 030f 	and.w	r3, r3, #15
 800659e:	3b04      	subs	r3, #4
 80065a0:	0112      	lsls	r2, r2, #4
 80065a2:	b2d2      	uxtb	r2, r2
 80065a4:	440b      	add	r3, r1
 80065a6:	761a      	strb	r2, [r3, #24]
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	e000e100 	.word	0xe000e100
 80065b8:	e000ed00 	.word	0xe000ed00

080065bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80065bc:	b580      	push	{r7, lr}
 80065be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80065c0:	2100      	movs	r1, #0
 80065c2:	f06f 0004 	mvn.w	r0, #4
 80065c6:	f7ff ffcf 	bl	8006568 <__NVIC_SetPriority>
#endif
}
 80065ca:	bf00      	nop
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d6:	f3ef 8305 	mrs	r3, IPSR
 80065da:	603b      	str	r3, [r7, #0]
  return(result);
 80065dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80065e2:	f06f 0305 	mvn.w	r3, #5
 80065e6:	607b      	str	r3, [r7, #4]
 80065e8:	e00c      	b.n	8006604 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80065ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006614 <osKernelInitialize+0x44>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d105      	bne.n	80065fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80065f2:	4b08      	ldr	r3, [pc, #32]	@ (8006614 <osKernelInitialize+0x44>)
 80065f4:	2201      	movs	r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	607b      	str	r3, [r7, #4]
 80065fc:	e002      	b.n	8006604 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80065fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006602:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006604:	687b      	ldr	r3, [r7, #4]
}
 8006606:	4618      	mov	r0, r3
 8006608:	370c      	adds	r7, #12
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20000558 	.word	0x20000558

08006618 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800661e:	f3ef 8305 	mrs	r3, IPSR
 8006622:	603b      	str	r3, [r7, #0]
  return(result);
 8006624:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <osKernelStart+0x1a>
    stat = osErrorISR;
 800662a:	f06f 0305 	mvn.w	r3, #5
 800662e:	607b      	str	r3, [r7, #4]
 8006630:	e010      	b.n	8006654 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006632:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <osKernelStart+0x48>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d109      	bne.n	800664e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800663a:	f7ff ffbf 	bl	80065bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800663e:	4b08      	ldr	r3, [pc, #32]	@ (8006660 <osKernelStart+0x48>)
 8006640:	2202      	movs	r2, #2
 8006642:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006644:	f001 f9fa 	bl	8007a3c <vTaskStartScheduler>
      stat = osOK;
 8006648:	2300      	movs	r3, #0
 800664a:	607b      	str	r3, [r7, #4]
 800664c:	e002      	b.n	8006654 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800664e:	f04f 33ff 	mov.w	r3, #4294967295
 8006652:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006654:	687b      	ldr	r3, [r7, #4]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000558 	.word	0x20000558

08006664 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b08e      	sub	sp, #56	@ 0x38
 8006668:	af04      	add	r7, sp, #16
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006670:	2300      	movs	r3, #0
 8006672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006674:	f3ef 8305 	mrs	r3, IPSR
 8006678:	617b      	str	r3, [r7, #20]
  return(result);
 800667a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800667c:	2b00      	cmp	r3, #0
 800667e:	d17e      	bne.n	800677e <osThreadNew+0x11a>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d07b      	beq.n	800677e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006686:	2380      	movs	r3, #128	@ 0x80
 8006688:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800668a:	2318      	movs	r3, #24
 800668c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006692:	f04f 33ff 	mov.w	r3, #4294967295
 8006696:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d045      	beq.n	800672a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <osThreadNew+0x48>
        name = attr->name;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d008      	beq.n	80066d2 <osThreadNew+0x6e>
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b38      	cmp	r3, #56	@ 0x38
 80066c4:	d805      	bhi.n	80066d2 <osThreadNew+0x6e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <osThreadNew+0x72>
        return (NULL);
 80066d2:	2300      	movs	r3, #0
 80066d4:	e054      	b.n	8006780 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	089b      	lsrs	r3, r3, #2
 80066e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00e      	beq.n	800670c <osThreadNew+0xa8>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	2b5b      	cmp	r3, #91	@ 0x5b
 80066f4:	d90a      	bls.n	800670c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d006      	beq.n	800670c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <osThreadNew+0xa8>
        mem = 1;
 8006706:	2301      	movs	r3, #1
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e010      	b.n	800672e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10c      	bne.n	800672e <osThreadNew+0xca>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d108      	bne.n	800672e <osThreadNew+0xca>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <osThreadNew+0xca>
          mem = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	e001      	b.n	800672e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d110      	bne.n	8006756 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800673c:	9202      	str	r2, [sp, #8]
 800673e:	9301      	str	r3, [sp, #4]
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 ff9a 	bl	8007684 <xTaskCreateStatic>
 8006750:	4603      	mov	r3, r0
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	e013      	b.n	800677e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d110      	bne.n	800677e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800675c:	6a3b      	ldr	r3, [r7, #32]
 800675e:	b29a      	uxth	r2, r3
 8006760:	f107 0310 	add.w	r3, r7, #16
 8006764:	9301      	str	r3, [sp, #4]
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 ffe8 	bl	8007744 <xTaskCreate>
 8006774:	4603      	mov	r3, r0
 8006776:	2b01      	cmp	r3, #1
 8006778:	d001      	beq.n	800677e <osThreadNew+0x11a>
            hTask = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800677e:	693b      	ldr	r3, [r7, #16]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3728      	adds	r7, #40	@ 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006790:	f3ef 8305 	mrs	r3, IPSR
 8006794:	60bb      	str	r3, [r7, #8]
  return(result);
 8006796:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <osDelay+0x1c>
    stat = osErrorISR;
 800679c:	f06f 0305 	mvn.w	r3, #5
 80067a0:	60fb      	str	r3, [r7, #12]
 80067a2:	e007      	b.n	80067b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 f90e 	bl	80079d0 <vTaskDelay>
    }
  }

  return (stat);
 80067b4:	68fb      	ldr	r3, [r7, #12]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80067be:	b580      	push	{r7, lr}
 80067c0:	b088      	sub	sp, #32
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ca:	f3ef 8305 	mrs	r3, IPSR
 80067ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80067d0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d174      	bne.n	80068c0 <osMutexNew+0x102>
    if (attr != NULL) {
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	e001      	b.n	80067e8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <osMutexNew+0x3a>
      rmtx = 1U;
 80067f2:	2301      	movs	r3, #1
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e001      	b.n	80067fc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d15c      	bne.n	80068c0 <osMutexNew+0x102>
      mem = -1;
 8006806:	f04f 33ff 	mov.w	r3, #4294967295
 800680a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d015      	beq.n	800683e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d006      	beq.n	8006828 <osMutexNew+0x6a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b4f      	cmp	r3, #79	@ 0x4f
 8006820:	d902      	bls.n	8006828 <osMutexNew+0x6a>
          mem = 1;
 8006822:	2301      	movs	r3, #1
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	e00c      	b.n	8006842 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d108      	bne.n	8006842 <osMutexNew+0x84>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <osMutexNew+0x84>
            mem = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	613b      	str	r3, [r7, #16]
 800683c:	e001      	b.n	8006842 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d112      	bne.n	800686e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	4619      	mov	r1, r3
 8006854:	2004      	movs	r0, #4
 8006856:	f000 fb0a 	bl	8006e6e <xQueueCreateMutexStatic>
 800685a:	61f8      	str	r0, [r7, #28]
 800685c:	e016      	b.n	800688c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	4619      	mov	r1, r3
 8006864:	2001      	movs	r0, #1
 8006866:	f000 fb02 	bl	8006e6e <xQueueCreateMutexStatic>
 800686a:	61f8      	str	r0, [r7, #28]
 800686c:	e00e      	b.n	800688c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10b      	bne.n	800688c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800687a:	2004      	movs	r0, #4
 800687c:	f000 fadf 	bl	8006e3e <xQueueCreateMutex>
 8006880:	61f8      	str	r0, [r7, #28]
 8006882:	e003      	b.n	800688c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006884:	2001      	movs	r0, #1
 8006886:	f000 fada 	bl	8006e3e <xQueueCreateMutex>
 800688a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <osMutexNew+0xee>
        if (attr != NULL) {
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <osMutexNew+0xe2>
          name = attr->name;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	e001      	b.n	80068a4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80068a4:	68f9      	ldr	r1, [r7, #12]
 80068a6:	69f8      	ldr	r0, [r7, #28]
 80068a8:	f000 fe8e 	bl	80075c8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d006      	beq.n	80068c0 <osMutexNew+0x102>
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f043 0301 	orr.w	r3, r3, #1
 80068be:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80068c0:	69fb      	ldr	r3, [r7, #28]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3720      	adds	r7, #32
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b08a      	sub	sp, #40	@ 0x28
 80068ce:	af02      	add	r7, sp, #8
 80068d0:	60f8      	str	r0, [r7, #12]
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80068d6:	2300      	movs	r3, #0
 80068d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068da:	f3ef 8305 	mrs	r3, IPSR
 80068de:	613b      	str	r3, [r7, #16]
  return(result);
 80068e0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d15f      	bne.n	80069a6 <osMessageQueueNew+0xdc>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d05c      	beq.n	80069a6 <osMessageQueueNew+0xdc>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d059      	beq.n	80069a6 <osMessageQueueNew+0xdc>
    mem = -1;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d029      	beq.n	8006952 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d012      	beq.n	800692c <osMessageQueueNew+0x62>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b4f      	cmp	r3, #79	@ 0x4f
 800690c:	d90e      	bls.n	800692c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00a      	beq.n	800692c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	695a      	ldr	r2, [r3, #20]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68b9      	ldr	r1, [r7, #8]
 800691e:	fb01 f303 	mul.w	r3, r1, r3
 8006922:	429a      	cmp	r2, r3
 8006924:	d302      	bcc.n	800692c <osMessageQueueNew+0x62>
        mem = 1;
 8006926:	2301      	movs	r3, #1
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	e014      	b.n	8006956 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d110      	bne.n	8006956 <osMessageQueueNew+0x8c>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10c      	bne.n	8006956 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006940:	2b00      	cmp	r3, #0
 8006942:	d108      	bne.n	8006956 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d104      	bne.n	8006956 <osMessageQueueNew+0x8c>
          mem = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	e001      	b.n	8006956 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006952:	2300      	movs	r3, #0
 8006954:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d10b      	bne.n	8006974 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691a      	ldr	r2, [r3, #16]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2100      	movs	r1, #0
 8006966:	9100      	str	r1, [sp, #0]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f972 	bl	8006c54 <xQueueGenericCreateStatic>
 8006970:	61f8      	str	r0, [r7, #28]
 8006972:	e008      	b.n	8006986 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d105      	bne.n	8006986 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800697a:	2200      	movs	r2, #0
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f9e5 	bl	8006d4e <xQueueGenericCreate>
 8006984:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00c      	beq.n	80069a6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d003      	beq.n	800699a <osMessageQueueNew+0xd0>
        name = attr->name;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e001      	b.n	800699e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800699e:	6979      	ldr	r1, [r7, #20]
 80069a0:	69f8      	ldr	r0, [r7, #28]
 80069a2:	f000 fe11 	bl	80075c8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80069a6:	69fb      	ldr	r3, [r7, #28]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3720      	adds	r7, #32
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a07      	ldr	r2, [pc, #28]	@ (80069dc <vApplicationGetIdleTaskMemory+0x2c>)
 80069c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	4a06      	ldr	r2, [pc, #24]	@ (80069e0 <vApplicationGetIdleTaskMemory+0x30>)
 80069c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2280      	movs	r2, #128	@ 0x80
 80069cc:	601a      	str	r2, [r3, #0]
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	2000055c 	.word	0x2000055c
 80069e0:	200005b8 	.word	0x200005b8

080069e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a07      	ldr	r2, [pc, #28]	@ (8006a10 <vApplicationGetTimerTaskMemory+0x2c>)
 80069f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4a06      	ldr	r2, [pc, #24]	@ (8006a14 <vApplicationGetTimerTaskMemory+0x30>)
 80069fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a02:	601a      	str	r2, [r3, #0]
}
 8006a04:	bf00      	nop
 8006a06:	3714      	adds	r7, #20
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr
 8006a10:	200007b8 	.word	0x200007b8
 8006a14:	20000814 	.word	0x20000814

08006a18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f103 0208 	add.w	r2, r3, #8
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f103 0208 	add.w	r2, r3, #8
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f103 0208 	add.w	r2, r3, #8
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b083      	sub	sp, #12
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a72:	b480      	push	{r7}
 8006a74:	b085      	sub	sp, #20
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
 8006a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
}
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aba:	b480      	push	{r7}
 8006abc:	b085      	sub	sp, #20
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	6078      	str	r0, [r7, #4]
 8006ac2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad0:	d103      	bne.n	8006ada <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e00c      	b.n	8006af4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3308      	adds	r3, #8
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	e002      	b.n	8006ae8 <vListInsert+0x2e>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d2f6      	bcs.n	8006ae2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	601a      	str	r2, [r3, #0]
}
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6892      	ldr	r2, [r2, #8]
 8006b42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	6852      	ldr	r2, [r2, #4]
 8006b4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d103      	bne.n	8006b60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	1e5a      	subs	r2, r3, #1
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006bac:	f002 f904 	bl	8008db8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb8:	68f9      	ldr	r1, [r7, #12]
 8006bba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006bbc:	fb01 f303 	mul.w	r3, r1, r3
 8006bc0:	441a      	add	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	68f9      	ldr	r1, [r7, #12]
 8006be0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	441a      	add	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	22ff      	movs	r2, #255	@ 0xff
 8006bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	22ff      	movs	r2, #255	@ 0xff
 8006bf8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d114      	bne.n	8006c2c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01a      	beq.n	8006c40 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	3310      	adds	r3, #16
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f001 f9a2 	bl	8007f58 <xTaskRemoveFromEventList>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d012      	beq.n	8006c40 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c50 <xQueueGenericReset+0xd0>)
 8006c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	e009      	b.n	8006c40 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3310      	adds	r3, #16
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff fef1 	bl	8006a18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	3324      	adds	r3, #36	@ 0x24
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff feec 	bl	8006a18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c40:	f002 f8ec 	bl	8008e1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c44:	2301      	movs	r3, #1
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b08e      	sub	sp, #56	@ 0x38
 8006c58:	af02      	add	r7, sp, #8
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	e7fd      	b.n	8006c7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <xQueueGenericCreateStatic+0x56>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <xQueueGenericCreateStatic+0x5a>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <xQueueGenericCreateStatic+0x5c>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10b      	bne.n	8006ccc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	623b      	str	r3, [r7, #32]
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d102      	bne.n	8006cd8 <xQueueGenericCreateStatic+0x84>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <xQueueGenericCreateStatic+0x88>
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e000      	b.n	8006cde <xQueueGenericCreateStatic+0x8a>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	61fb      	str	r3, [r7, #28]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cfa:	2350      	movs	r3, #80	@ 0x50
 8006cfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b50      	cmp	r3, #80	@ 0x50
 8006d02:	d00b      	beq.n	8006d1c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	61bb      	str	r3, [r7, #24]
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d1c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00d      	beq.n	8006d44 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d30:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	68b9      	ldr	r1, [r7, #8]
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f840 	bl	8006dc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3730      	adds	r7, #48	@ 0x30
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b08a      	sub	sp, #40	@ 0x28
 8006d52:	af02      	add	r7, sp, #8
 8006d54:	60f8      	str	r0, [r7, #12]
 8006d56:	60b9      	str	r1, [r7, #8]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10b      	bne.n	8006d7a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	613b      	str	r3, [r7, #16]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	fb02 f303 	mul.w	r3, r2, r3
 8006d82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	3350      	adds	r3, #80	@ 0x50
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f002 f937 	bl	8008ffc <pvPortMalloc>
 8006d8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d011      	beq.n	8006dba <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	3350      	adds	r3, #80	@ 0x50
 8006d9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006da8:	79fa      	ldrb	r2, [r7, #7]
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	4613      	mov	r3, r2
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	68b9      	ldr	r1, [r7, #8]
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 f805 	bl	8006dc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dba:	69bb      	ldr	r3, [r7, #24]
	}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3720      	adds	r7, #32
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d103      	bne.n	8006de0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	601a      	str	r2, [r3, #0]
 8006dde:	e002      	b.n	8006de6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	68fa      	ldr	r2, [r7, #12]
 8006dea:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006df2:	2101      	movs	r1, #1
 8006df4:	69b8      	ldr	r0, [r7, #24]
 8006df6:	f7ff fec3 	bl	8006b80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b082      	sub	sp, #8
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00e      	beq.n	8006e36 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	2100      	movs	r1, #0
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f837 	bl	8006ea4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e36:	bf00      	nop
 8006e38:	3708      	adds	r7, #8
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b086      	sub	sp, #24
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	4603      	mov	r3, r0
 8006e46:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6939      	ldr	r1, [r7, #16]
 8006e56:	6978      	ldr	r0, [r7, #20]
 8006e58:	f7ff ff79 	bl	8006d4e <xQueueGenericCreate>
 8006e5c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7ff ffd3 	bl	8006e0a <prvInitialiseMutex>

		return xNewQueue;
 8006e64:	68fb      	ldr	r3, [r7, #12]
	}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b088      	sub	sp, #32
 8006e72:	af02      	add	r7, sp, #8
 8006e74:	4603      	mov	r3, r0
 8006e76:	6039      	str	r1, [r7, #0]
 8006e78:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006e82:	79fb      	ldrb	r3, [r7, #7]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	6939      	ldr	r1, [r7, #16]
 8006e8c:	6978      	ldr	r0, [r7, #20]
 8006e8e:	f7ff fee1 	bl	8006c54 <xQueueGenericCreateStatic>
 8006e92:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff ffb8 	bl	8006e0a <prvInitialiseMutex>

		return xNewQueue;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
	}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08e      	sub	sp, #56	@ 0x38
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10b      	bne.n	8006ed8 <xQueueGenericSend+0x34>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	e7fd      	b.n	8006ed4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <xQueueGenericSend+0x42>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d101      	bne.n	8006eea <xQueueGenericSend+0x46>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e000      	b.n	8006eec <xQueueGenericSend+0x48>
 8006eea:	2300      	movs	r3, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10b      	bne.n	8006f08 <xQueueGenericSend+0x64>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	e7fd      	b.n	8006f04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d103      	bne.n	8006f16 <xQueueGenericSend+0x72>
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d101      	bne.n	8006f1a <xQueueGenericSend+0x76>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <xQueueGenericSend+0x78>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10b      	bne.n	8006f38 <xQueueGenericSend+0x94>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	623b      	str	r3, [r7, #32]
}
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f38:	f001 f9ce 	bl	80082d8 <xTaskGetSchedulerState>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d102      	bne.n	8006f48 <xQueueGenericSend+0xa4>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <xQueueGenericSend+0xa8>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <xQueueGenericSend+0xaa>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10b      	bne.n	8006f6a <xQueueGenericSend+0xc6>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	61fb      	str	r3, [r7, #28]
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	e7fd      	b.n	8006f66 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f6a:	f001 ff25 	bl	8008db8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d302      	bcc.n	8006f80 <xQueueGenericSend+0xdc>
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	2b02      	cmp	r3, #2
 8006f7e:	d129      	bne.n	8006fd4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f86:	f000 fa0f 	bl	80073a8 <prvCopyDataToQueue>
 8006f8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d010      	beq.n	8006fb6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f96:	3324      	adds	r3, #36	@ 0x24
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 ffdd 	bl	8007f58 <xTaskRemoveFromEventList>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d013      	beq.n	8006fcc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fa4:	4b3f      	ldr	r3, [pc, #252]	@ (80070a4 <xQueueGenericSend+0x200>)
 8006fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006faa:	601a      	str	r2, [r3, #0]
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	f3bf 8f6f 	isb	sy
 8006fb4:	e00a      	b.n	8006fcc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d007      	beq.n	8006fcc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fbc:	4b39      	ldr	r3, [pc, #228]	@ (80070a4 <xQueueGenericSend+0x200>)
 8006fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fcc:	f001 ff26 	bl	8008e1c <vPortExitCritical>
				return pdPASS;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e063      	b.n	800709c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d103      	bne.n	8006fe2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fda:	f001 ff1f 	bl	8008e1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	e05c      	b.n	800709c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d106      	bne.n	8006ff6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fe8:	f107 0314 	add.w	r3, r7, #20
 8006fec:	4618      	mov	r0, r3
 8006fee:	f001 f817 	bl	8008020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ff6:	f001 ff11 	bl	8008e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ffa:	f000 fd87 	bl	8007b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ffe:	f001 fedb 	bl	8008db8 <vPortEnterCritical>
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007008:	b25b      	sxtb	r3, r3
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d103      	bne.n	8007018 <xQueueGenericSend+0x174>
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800701e:	b25b      	sxtb	r3, r3
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d103      	bne.n	800702e <xQueueGenericSend+0x18a>
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800702e:	f001 fef5 	bl	8008e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007032:	1d3a      	adds	r2, r7, #4
 8007034:	f107 0314 	add.w	r3, r7, #20
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f001 f806 	bl	800804c <xTaskCheckForTimeOut>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d124      	bne.n	8007090 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007046:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007048:	f000 faa6 	bl	8007598 <prvIsQueueFull>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d018      	beq.n	8007084 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	3310      	adds	r3, #16
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f000 ff2a 	bl	8007eb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007060:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007062:	f000 fa31 	bl	80074c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007066:	f000 fd5f 	bl	8007b28 <xTaskResumeAll>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	f47f af7c 	bne.w	8006f6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007072:	4b0c      	ldr	r3, [pc, #48]	@ (80070a4 <xQueueGenericSend+0x200>)
 8007074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	e772      	b.n	8006f6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007086:	f000 fa1f 	bl	80074c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800708a:	f000 fd4d 	bl	8007b28 <xTaskResumeAll>
 800708e:	e76c      	b.n	8006f6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007092:	f000 fa19 	bl	80074c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007096:	f000 fd47 	bl	8007b28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800709a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800709c:	4618      	mov	r0, r3
 800709e:	3738      	adds	r7, #56	@ 0x38
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b090      	sub	sp, #64	@ 0x40
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
 80070b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80070ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10b      	bne.n	80070d8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070d2:	bf00      	nop
 80070d4:	bf00      	nop
 80070d6:	e7fd      	b.n	80070d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d103      	bne.n	80070e6 <xQueueGenericSendFromISR+0x3e>
 80070de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <xQueueGenericSendFromISR+0x42>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <xQueueGenericSendFromISR+0x44>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	2b02      	cmp	r3, #2
 800710c:	d103      	bne.n	8007116 <xQueueGenericSendFromISR+0x6e>
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <xQueueGenericSendFromISR+0x72>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <xQueueGenericSendFromISR+0x74>
 800711a:	2300      	movs	r3, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	623b      	str	r3, [r7, #32]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007138:	f001 ff1e 	bl	8008f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800713c:	f3ef 8211 	mrs	r2, BASEPRI
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	61fa      	str	r2, [r7, #28]
 8007152:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007154:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007156:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007160:	429a      	cmp	r2, r3
 8007162:	d302      	bcc.n	800716a <xQueueGenericSendFromISR+0xc2>
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d12f      	bne.n	80071ca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800716a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007170:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007178:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	68b9      	ldr	r1, [r7, #8]
 800717e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007180:	f000 f912 	bl	80073a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007184:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800718c:	d112      	bne.n	80071b4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800718e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d016      	beq.n	80071c4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007198:	3324      	adds	r3, #36	@ 0x24
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fedc 	bl	8007f58 <xTaskRemoveFromEventList>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00e      	beq.n	80071c4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e007      	b.n	80071c4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80071b8:	3301      	adds	r3, #1
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	b25a      	sxtb	r2, r3
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80071c4:	2301      	movs	r3, #1
 80071c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80071c8:	e001      	b.n	80071ce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071d0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3740      	adds	r7, #64	@ 0x40
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08c      	sub	sp, #48	@ 0x30
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071f0:	2300      	movs	r3, #0
 80071f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10b      	bne.n	8007216 <xQueueReceive+0x32>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	623b      	str	r3, [r7, #32]
}
 8007210:	bf00      	nop
 8007212:	bf00      	nop
 8007214:	e7fd      	b.n	8007212 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d103      	bne.n	8007224 <xQueueReceive+0x40>
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d101      	bne.n	8007228 <xQueueReceive+0x44>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <xQueueReceive+0x46>
 8007228:	2300      	movs	r3, #0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <xQueueReceive+0x62>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	61fb      	str	r3, [r7, #28]
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	e7fd      	b.n	8007242 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007246:	f001 f847 	bl	80082d8 <xTaskGetSchedulerState>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <xQueueReceive+0x72>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <xQueueReceive+0x76>
 8007256:	2301      	movs	r3, #1
 8007258:	e000      	b.n	800725c <xQueueReceive+0x78>
 800725a:	2300      	movs	r3, #0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d10b      	bne.n	8007278 <xQueueReceive+0x94>
	__asm volatile
 8007260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007264:	f383 8811 	msr	BASEPRI, r3
 8007268:	f3bf 8f6f 	isb	sy
 800726c:	f3bf 8f4f 	dsb	sy
 8007270:	61bb      	str	r3, [r7, #24]
}
 8007272:	bf00      	nop
 8007274:	bf00      	nop
 8007276:	e7fd      	b.n	8007274 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007278:	f001 fd9e 	bl	8008db8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01f      	beq.n	80072c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800728c:	f000 f8f6 	bl	800747c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007292:	1e5a      	subs	r2, r3, #1
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800729a:	691b      	ldr	r3, [r3, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00f      	beq.n	80072c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a2:	3310      	adds	r3, #16
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 fe57 	bl	8007f58 <xTaskRemoveFromEventList>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d007      	beq.n	80072c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072b0:	4b3c      	ldr	r3, [pc, #240]	@ (80073a4 <xQueueReceive+0x1c0>)
 80072b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072c0:	f001 fdac 	bl	8008e1c <vPortExitCritical>
				return pdPASS;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e069      	b.n	800739c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072ce:	f001 fda5 	bl	8008e1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072d2:	2300      	movs	r3, #0
 80072d4:	e062      	b.n	800739c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d106      	bne.n	80072ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072dc:	f107 0310 	add.w	r3, r7, #16
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fe9d 	bl	8008020 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072e6:	2301      	movs	r3, #1
 80072e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072ea:	f001 fd97 	bl	8008e1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072ee:	f000 fc0d 	bl	8007b0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072f2:	f001 fd61 	bl	8008db8 <vPortEnterCritical>
 80072f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072fc:	b25b      	sxtb	r3, r3
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007302:	d103      	bne.n	800730c <xQueueReceive+0x128>
 8007304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007312:	b25b      	sxtb	r3, r3
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d103      	bne.n	8007322 <xQueueReceive+0x13e>
 800731a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731c:	2200      	movs	r2, #0
 800731e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007322:	f001 fd7b 	bl	8008e1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007326:	1d3a      	adds	r2, r7, #4
 8007328:	f107 0310 	add.w	r3, r7, #16
 800732c:	4611      	mov	r1, r2
 800732e:	4618      	mov	r0, r3
 8007330:	f000 fe8c 	bl	800804c <xTaskCheckForTimeOut>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d123      	bne.n	8007382 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800733a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800733c:	f000 f916 	bl	800756c <prvIsQueueEmpty>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d017      	beq.n	8007376 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	3324      	adds	r3, #36	@ 0x24
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	4611      	mov	r1, r2
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fdb0 	bl	8007eb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007354:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007356:	f000 f8b7 	bl	80074c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800735a:	f000 fbe5 	bl	8007b28 <xTaskResumeAll>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d189      	bne.n	8007278 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007364:	4b0f      	ldr	r3, [pc, #60]	@ (80073a4 <xQueueReceive+0x1c0>)
 8007366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800736a:	601a      	str	r2, [r3, #0]
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	e780      	b.n	8007278 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007378:	f000 f8a6 	bl	80074c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800737c:	f000 fbd4 	bl	8007b28 <xTaskResumeAll>
 8007380:	e77a      	b.n	8007278 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007384:	f000 f8a0 	bl	80074c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007388:	f000 fbce 	bl	8007b28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800738c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800738e:	f000 f8ed 	bl	800756c <prvIsQueueEmpty>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	f43f af6f 	beq.w	8007278 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800739a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800739c:	4618      	mov	r0, r3
 800739e:	3730      	adds	r7, #48	@ 0x30
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	e000ed04 	.word	0xe000ed04

080073a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10d      	bne.n	80073e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d14d      	bne.n	800746a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 ff9e 	bl	8008314 <xTaskPriorityDisinherit>
 80073d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	609a      	str	r2, [r3, #8]
 80073e0:	e043      	b.n	800746a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d119      	bne.n	800741c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6858      	ldr	r0, [r3, #4]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f0:	461a      	mov	r2, r3
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	f002 f81c 	bl	8009430 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007400:	441a      	add	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	429a      	cmp	r2, r3
 8007410:	d32b      	bcc.n	800746a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]
 800741a:	e026      	b.n	800746a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68d8      	ldr	r0, [r3, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007424:	461a      	mov	r2, r3
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	f002 f802 	bl	8009430 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007434:	425b      	negs	r3, r3
 8007436:	441a      	add	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d207      	bcs.n	8007458 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007450:	425b      	negs	r3, r3
 8007452:	441a      	add	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d105      	bne.n	800746a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	3b01      	subs	r3, #1
 8007468:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007472:	697b      	ldr	r3, [r7, #20]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748a:	2b00      	cmp	r3, #0
 800748c:	d018      	beq.n	80074c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68da      	ldr	r2, [r3, #12]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007496:	441a      	add	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d303      	bcc.n	80074b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	68d9      	ldr	r1, [r3, #12]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b8:	461a      	mov	r2, r3
 80074ba:	6838      	ldr	r0, [r7, #0]
 80074bc:	f001 ffb8 	bl	8009430 <memcpy>
	}
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074d0:	f001 fc72 	bl	8008db8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074dc:	e011      	b.n	8007502 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d012      	beq.n	800750c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	3324      	adds	r3, #36	@ 0x24
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fd34 	bl	8007f58 <xTaskRemoveFromEventList>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074f6:	f000 fe0d 	bl	8008114 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007506:	2b00      	cmp	r3, #0
 8007508:	dce9      	bgt.n	80074de <prvUnlockQueue+0x16>
 800750a:	e000      	b.n	800750e <prvUnlockQueue+0x46>
					break;
 800750c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	22ff      	movs	r2, #255	@ 0xff
 8007512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007516:	f001 fc81 	bl	8008e1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800751a:	f001 fc4d 	bl	8008db8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007524:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007526:	e011      	b.n	800754c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d012      	beq.n	8007556 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3310      	adds	r3, #16
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fd0f 	bl	8007f58 <xTaskRemoveFromEventList>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d001      	beq.n	8007544 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007540:	f000 fde8 	bl	8008114 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	3b01      	subs	r3, #1
 8007548:	b2db      	uxtb	r3, r3
 800754a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800754c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007550:	2b00      	cmp	r3, #0
 8007552:	dce9      	bgt.n	8007528 <prvUnlockQueue+0x60>
 8007554:	e000      	b.n	8007558 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007556:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	22ff      	movs	r2, #255	@ 0xff
 800755c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007560:	f001 fc5c 	bl	8008e1c <vPortExitCritical>
}
 8007564:	bf00      	nop
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007574:	f001 fc20 	bl	8008db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007580:	2301      	movs	r3, #1
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	e001      	b.n	800758a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800758a:	f001 fc47 	bl	8008e1c <vPortExitCritical>

	return xReturn;
 800758e:	68fb      	ldr	r3, [r7, #12]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075a0:	f001 fc0a 	bl	8008db8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d102      	bne.n	80075b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075b0:	2301      	movs	r3, #1
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	e001      	b.n	80075ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075ba:	f001 fc2f 	bl	8008e1c <vPortExitCritical>

	return xReturn;
 80075be:	68fb      	ldr	r3, [r7, #12]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075d2:	2300      	movs	r3, #0
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	e014      	b.n	8007602 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075d8:	4a0f      	ldr	r2, [pc, #60]	@ (8007618 <vQueueAddToRegistry+0x50>)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075e4:	490c      	ldr	r1, [pc, #48]	@ (8007618 <vQueueAddToRegistry+0x50>)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007618 <vQueueAddToRegistry+0x50>)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	4413      	add	r3, r2
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075fa:	e006      	b.n	800760a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3301      	adds	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b07      	cmp	r3, #7
 8007606:	d9e7      	bls.n	80075d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000c14 	.word	0x20000c14

0800761c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800762c:	f001 fbc4 	bl	8008db8 <vPortEnterCritical>
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007636:	b25b      	sxtb	r3, r3
 8007638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763c:	d103      	bne.n	8007646 <vQueueWaitForMessageRestricted+0x2a>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800764c:	b25b      	sxtb	r3, r3
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d103      	bne.n	800765c <vQueueWaitForMessageRestricted+0x40>
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800765c:	f001 fbde 	bl	8008e1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	3324      	adds	r3, #36	@ 0x24
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	68b9      	ldr	r1, [r7, #8]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fc45 	bl	8007f00 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007676:	6978      	ldr	r0, [r7, #20]
 8007678:	f7ff ff26 	bl	80074c8 <prvUnlockQueue>
	}
 800767c:	bf00      	nop
 800767e:	3718      	adds	r7, #24
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	@ 0x38
 8007688:	af04      	add	r7, sp, #16
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	623b      	str	r3, [r7, #32]
}
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80076b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10b      	bne.n	80076ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	61fb      	str	r3, [r7, #28]
}
 80076c8:	bf00      	nop
 80076ca:	bf00      	nop
 80076cc:	e7fd      	b.n	80076ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80076ce:	235c      	movs	r3, #92	@ 0x5c
 80076d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80076d6:	d00b      	beq.n	80076f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80076d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	61bb      	str	r3, [r7, #24]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01e      	beq.n	8007736 <xTaskCreateStatic+0xb2>
 80076f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d01b      	beq.n	8007736 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007700:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007704:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770a:	2202      	movs	r2, #2
 800770c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007710:	2300      	movs	r3, #0
 8007712:	9303      	str	r3, [sp, #12]
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	9302      	str	r3, [sp, #8]
 8007718:	f107 0314 	add.w	r3, r7, #20
 800771c:	9301      	str	r3, [sp, #4]
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	68b9      	ldr	r1, [r7, #8]
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f850 	bl	80077ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800772e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007730:	f000 f8de 	bl	80078f0 <prvAddNewTaskToReadyList>
 8007734:	e001      	b.n	800773a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007736:	2300      	movs	r3, #0
 8007738:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800773a:	697b      	ldr	r3, [r7, #20]
	}
 800773c:	4618      	mov	r0, r3
 800773e:	3728      	adds	r7, #40	@ 0x28
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	@ 0x30
 8007748:	af04      	add	r7, sp, #16
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	603b      	str	r3, [r7, #0]
 8007750:	4613      	mov	r3, r2
 8007752:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4618      	mov	r0, r3
 800775a:	f001 fc4f 	bl	8008ffc <pvPortMalloc>
 800775e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00e      	beq.n	8007784 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007766:	205c      	movs	r0, #92	@ 0x5c
 8007768:	f001 fc48 	bl	8008ffc <pvPortMalloc>
 800776c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	631a      	str	r2, [r3, #48]	@ 0x30
 800777a:	e005      	b.n	8007788 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800777c:	6978      	ldr	r0, [r7, #20]
 800777e:	f001 fd0b 	bl	8009198 <vPortFree>
 8007782:	e001      	b.n	8007788 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007784:	2300      	movs	r3, #0
 8007786:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d017      	beq.n	80077be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007796:	88fa      	ldrh	r2, [r7, #6]
 8007798:	2300      	movs	r3, #0
 800779a:	9303      	str	r3, [sp, #12]
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	9302      	str	r3, [sp, #8]
 80077a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077a2:	9301      	str	r3, [sp, #4]
 80077a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a6:	9300      	str	r3, [sp, #0]
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	68b9      	ldr	r1, [r7, #8]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f80e 	bl	80077ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077b2:	69f8      	ldr	r0, [r7, #28]
 80077b4:	f000 f89c 	bl	80078f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80077b8:	2301      	movs	r3, #1
 80077ba:	61bb      	str	r3, [r7, #24]
 80077bc:	e002      	b.n	80077c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80077be:	f04f 33ff 	mov.w	r3, #4294967295
 80077c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077c4:	69bb      	ldr	r3, [r7, #24]
	}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b088      	sub	sp, #32
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	60f8      	str	r0, [r7, #12]
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80077dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	461a      	mov	r2, r3
 80077e6:	21a5      	movs	r1, #165	@ 0xa5
 80077e8:	f001 fdf6 	bl	80093d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80077ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80077f6:	3b01      	subs	r3, #1
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	4413      	add	r3, r2
 80077fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	f023 0307 	bic.w	r3, r3, #7
 8007804:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00b      	beq.n	8007828 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	617b      	str	r3, [r7, #20]
}
 8007822:	bf00      	nop
 8007824:	bf00      	nop
 8007826:	e7fd      	b.n	8007824 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01f      	beq.n	800786e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800782e:	2300      	movs	r3, #0
 8007830:	61fb      	str	r3, [r7, #28]
 8007832:	e012      	b.n	800785a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	7819      	ldrb	r1, [r3, #0]
 800783c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	4413      	add	r3, r2
 8007842:	3334      	adds	r3, #52	@ 0x34
 8007844:	460a      	mov	r2, r1
 8007846:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	4413      	add	r3, r2
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d006      	beq.n	8007862 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	3301      	adds	r3, #1
 8007858:	61fb      	str	r3, [r7, #28]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	2b0f      	cmp	r3, #15
 800785e:	d9e9      	bls.n	8007834 <prvInitialiseNewTask+0x66>
 8007860:	e000      	b.n	8007864 <prvInitialiseNewTask+0x96>
			{
				break;
 8007862:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800786c:	e003      	b.n	8007876 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	2b37      	cmp	r3, #55	@ 0x37
 800787a:	d901      	bls.n	8007880 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800787c:	2337      	movs	r3, #55	@ 0x37
 800787e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007884:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800788a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	2200      	movs	r2, #0
 8007890:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	3304      	adds	r3, #4
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff f8de 	bl	8006a58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800789c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789e:	3318      	adds	r3, #24
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7ff f8d9 	bl	8006a58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80078b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80078bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078be:	2200      	movs	r2, #0
 80078c0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80078c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80078ca:	683a      	ldr	r2, [r7, #0]
 80078cc:	68f9      	ldr	r1, [r7, #12]
 80078ce:	69b8      	ldr	r0, [r7, #24]
 80078d0:	f001 f93e 	bl	8008b50 <pxPortInitialiseStack>
 80078d4:	4602      	mov	r2, r0
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078e6:	bf00      	nop
 80078e8:	3720      	adds	r7, #32
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
	...

080078f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078f8:	f001 fa5e 	bl	8008db8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078fc:	4b2d      	ldr	r3, [pc, #180]	@ (80079b4 <prvAddNewTaskToReadyList+0xc4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	4a2c      	ldr	r2, [pc, #176]	@ (80079b4 <prvAddNewTaskToReadyList+0xc4>)
 8007904:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007906:	4b2c      	ldr	r3, [pc, #176]	@ (80079b8 <prvAddNewTaskToReadyList+0xc8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800790e:	4a2a      	ldr	r2, [pc, #168]	@ (80079b8 <prvAddNewTaskToReadyList+0xc8>)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007914:	4b27      	ldr	r3, [pc, #156]	@ (80079b4 <prvAddNewTaskToReadyList+0xc4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d110      	bne.n	800793e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800791c:	f000 fc1e 	bl	800815c <prvInitialiseTaskLists>
 8007920:	e00d      	b.n	800793e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007922:	4b26      	ldr	r3, [pc, #152]	@ (80079bc <prvAddNewTaskToReadyList+0xcc>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d109      	bne.n	800793e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800792a:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <prvAddNewTaskToReadyList+0xc8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	429a      	cmp	r2, r3
 8007936:	d802      	bhi.n	800793e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007938:	4a1f      	ldr	r2, [pc, #124]	@ (80079b8 <prvAddNewTaskToReadyList+0xc8>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800793e:	4b20      	ldr	r3, [pc, #128]	@ (80079c0 <prvAddNewTaskToReadyList+0xd0>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	4a1e      	ldr	r2, [pc, #120]	@ (80079c0 <prvAddNewTaskToReadyList+0xd0>)
 8007946:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007948:	4b1d      	ldr	r3, [pc, #116]	@ (80079c0 <prvAddNewTaskToReadyList+0xd0>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007954:	4b1b      	ldr	r3, [pc, #108]	@ (80079c4 <prvAddNewTaskToReadyList+0xd4>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	429a      	cmp	r2, r3
 800795a:	d903      	bls.n	8007964 <prvAddNewTaskToReadyList+0x74>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007960:	4a18      	ldr	r2, [pc, #96]	@ (80079c4 <prvAddNewTaskToReadyList+0xd4>)
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4a15      	ldr	r2, [pc, #84]	@ (80079c8 <prvAddNewTaskToReadyList+0xd8>)
 8007972:	441a      	add	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3304      	adds	r3, #4
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f7ff f879 	bl	8006a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007980:	f001 fa4c 	bl	8008e1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007984:	4b0d      	ldr	r3, [pc, #52]	@ (80079bc <prvAddNewTaskToReadyList+0xcc>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d00e      	beq.n	80079aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800798c:	4b0a      	ldr	r3, [pc, #40]	@ (80079b8 <prvAddNewTaskToReadyList+0xc8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007996:	429a      	cmp	r2, r3
 8007998:	d207      	bcs.n	80079aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800799a:	4b0c      	ldr	r3, [pc, #48]	@ (80079cc <prvAddNewTaskToReadyList+0xdc>)
 800799c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20001128 	.word	0x20001128
 80079b8:	20000c54 	.word	0x20000c54
 80079bc:	20001134 	.word	0x20001134
 80079c0:	20001144 	.word	0x20001144
 80079c4:	20001130 	.word	0x20001130
 80079c8:	20000c58 	.word	0x20000c58
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d018      	beq.n	8007a14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079e2:	4b14      	ldr	r3, [pc, #80]	@ (8007a34 <vTaskDelay+0x64>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <vTaskDelay+0x32>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60bb      	str	r3, [r7, #8]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a02:	f000 f883 	bl	8007b0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a06:	2100      	movs	r1, #0
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fcf3 	bl	80083f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a0e:	f000 f88b 	bl	8007b28 <xTaskResumeAll>
 8007a12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a1a:	4b07      	ldr	r3, [pc, #28]	@ (8007a38 <vTaskDelay+0x68>)
 8007a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20001150 	.word	0x20001150
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08a      	sub	sp, #40	@ 0x28
 8007a40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a4a:	463a      	mov	r2, r7
 8007a4c:	1d39      	adds	r1, r7, #4
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe ffac 	bl	80069b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	9202      	str	r2, [sp, #8]
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	2300      	movs	r3, #0
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	2300      	movs	r3, #0
 8007a68:	460a      	mov	r2, r1
 8007a6a:	4922      	ldr	r1, [pc, #136]	@ (8007af4 <vTaskStartScheduler+0xb8>)
 8007a6c:	4822      	ldr	r0, [pc, #136]	@ (8007af8 <vTaskStartScheduler+0xbc>)
 8007a6e:	f7ff fe09 	bl	8007684 <xTaskCreateStatic>
 8007a72:	4603      	mov	r3, r0
 8007a74:	4a21      	ldr	r2, [pc, #132]	@ (8007afc <vTaskStartScheduler+0xc0>)
 8007a76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a78:	4b20      	ldr	r3, [pc, #128]	@ (8007afc <vTaskStartScheduler+0xc0>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a80:	2301      	movs	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e001      	b.n	8007a8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d102      	bne.n	8007a96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a90:	f000 fd04 	bl	800849c <xTimerCreateTimerTask>
 8007a94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d116      	bne.n	8007aca <vTaskStartScheduler+0x8e>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	613b      	str	r3, [r7, #16]
}
 8007aae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ab0:	4b13      	ldr	r3, [pc, #76]	@ (8007b00 <vTaskStartScheduler+0xc4>)
 8007ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ab6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ab8:	4b12      	ldr	r3, [pc, #72]	@ (8007b04 <vTaskStartScheduler+0xc8>)
 8007aba:	2201      	movs	r2, #1
 8007abc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007abe:	4b12      	ldr	r3, [pc, #72]	@ (8007b08 <vTaskStartScheduler+0xcc>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ac4:	f001 f8d4 	bl	8008c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ac8:	e00f      	b.n	8007aea <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad0:	d10b      	bne.n	8007aea <vTaskStartScheduler+0xae>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	60fb      	str	r3, [r7, #12]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <vTaskStartScheduler+0xaa>
}
 8007aea:	bf00      	nop
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	080094b0 	.word	0x080094b0
 8007af8:	0800812d 	.word	0x0800812d
 8007afc:	2000114c 	.word	0x2000114c
 8007b00:	20001148 	.word	0x20001148
 8007b04:	20001134 	.word	0x20001134
 8007b08:	2000112c 	.word	0x2000112c

08007b0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b10:	4b04      	ldr	r3, [pc, #16]	@ (8007b24 <vTaskSuspendAll+0x18>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	4a03      	ldr	r2, [pc, #12]	@ (8007b24 <vTaskSuspendAll+0x18>)
 8007b18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b1a:	bf00      	nop
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	20001150 	.word	0x20001150

08007b28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b36:	4b42      	ldr	r3, [pc, #264]	@ (8007c40 <xTaskResumeAll+0x118>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10b      	bne.n	8007b56 <xTaskResumeAll+0x2e>
	__asm volatile
 8007b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b42:	f383 8811 	msr	BASEPRI, r3
 8007b46:	f3bf 8f6f 	isb	sy
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	603b      	str	r3, [r7, #0]
}
 8007b50:	bf00      	nop
 8007b52:	bf00      	nop
 8007b54:	e7fd      	b.n	8007b52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b56:	f001 f92f 	bl	8008db8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b5a:	4b39      	ldr	r3, [pc, #228]	@ (8007c40 <xTaskResumeAll+0x118>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	4a37      	ldr	r2, [pc, #220]	@ (8007c40 <xTaskResumeAll+0x118>)
 8007b62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b64:	4b36      	ldr	r3, [pc, #216]	@ (8007c40 <xTaskResumeAll+0x118>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d162      	bne.n	8007c32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b6c:	4b35      	ldr	r3, [pc, #212]	@ (8007c44 <xTaskResumeAll+0x11c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d05e      	beq.n	8007c32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b74:	e02f      	b.n	8007bd6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b76:	4b34      	ldr	r3, [pc, #208]	@ (8007c48 <xTaskResumeAll+0x120>)
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3318      	adds	r3, #24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fe ffd2 	bl	8006b2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7fe ffcd 	bl	8006b2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b96:	4b2d      	ldr	r3, [pc, #180]	@ (8007c4c <xTaskResumeAll+0x124>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d903      	bls.n	8007ba6 <xTaskResumeAll+0x7e>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8007c4c <xTaskResumeAll+0x124>)
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4a27      	ldr	r2, [pc, #156]	@ (8007c50 <xTaskResumeAll+0x128>)
 8007bb4:	441a      	add	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	3304      	adds	r3, #4
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	f7fe ff58 	bl	8006a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc6:	4b23      	ldr	r3, [pc, #140]	@ (8007c54 <xTaskResumeAll+0x12c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d302      	bcc.n	8007bd6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007bd0:	4b21      	ldr	r3, [pc, #132]	@ (8007c58 <xTaskResumeAll+0x130>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c48 <xTaskResumeAll+0x120>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1cb      	bne.n	8007b76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007be4:	f000 fb58 	bl	8008298 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007be8:	4b1c      	ldr	r3, [pc, #112]	@ (8007c5c <xTaskResumeAll+0x134>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d010      	beq.n	8007c16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bf4:	f000 f846 	bl	8007c84 <xTaskIncrementTick>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007bfe:	4b16      	ldr	r3, [pc, #88]	@ (8007c58 <xTaskResumeAll+0x130>)
 8007c00:	2201      	movs	r2, #1
 8007c02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1f1      	bne.n	8007bf4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007c10:	4b12      	ldr	r3, [pc, #72]	@ (8007c5c <xTaskResumeAll+0x134>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c16:	4b10      	ldr	r3, [pc, #64]	@ (8007c58 <xTaskResumeAll+0x130>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d009      	beq.n	8007c32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c22:	4b0f      	ldr	r3, [pc, #60]	@ (8007c60 <xTaskResumeAll+0x138>)
 8007c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c32:	f001 f8f3 	bl	8008e1c <vPortExitCritical>

	return xAlreadyYielded;
 8007c36:	68bb      	ldr	r3, [r7, #8]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	20001150 	.word	0x20001150
 8007c44:	20001128 	.word	0x20001128
 8007c48:	200010e8 	.word	0x200010e8
 8007c4c:	20001130 	.word	0x20001130
 8007c50:	20000c58 	.word	0x20000c58
 8007c54:	20000c54 	.word	0x20000c54
 8007c58:	2000113c 	.word	0x2000113c
 8007c5c:	20001138 	.word	0x20001138
 8007c60:	e000ed04 	.word	0xe000ed04

08007c64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c6a:	4b05      	ldr	r3, [pc, #20]	@ (8007c80 <xTaskGetTickCount+0x1c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c70:	687b      	ldr	r3, [r7, #4]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	370c      	adds	r7, #12
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	2000112c 	.word	0x2000112c

08007c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b086      	sub	sp, #24
 8007c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c8e:	4b4f      	ldr	r3, [pc, #316]	@ (8007dcc <xTaskIncrementTick+0x148>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f040 8090 	bne.w	8007db8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c98:	4b4d      	ldr	r3, [pc, #308]	@ (8007dd0 <xTaskIncrementTick+0x14c>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8007dd0 <xTaskIncrementTick+0x14c>)
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d121      	bne.n	8007cf0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cac:	4b49      	ldr	r3, [pc, #292]	@ (8007dd4 <xTaskIncrementTick+0x150>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d00b      	beq.n	8007cce <xTaskIncrementTick+0x4a>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	603b      	str	r3, [r7, #0]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <xTaskIncrementTick+0x46>
 8007cce:	4b41      	ldr	r3, [pc, #260]	@ (8007dd4 <xTaskIncrementTick+0x150>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	4b40      	ldr	r3, [pc, #256]	@ (8007dd8 <xTaskIncrementTick+0x154>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a3e      	ldr	r2, [pc, #248]	@ (8007dd4 <xTaskIncrementTick+0x150>)
 8007cda:	6013      	str	r3, [r2, #0]
 8007cdc:	4a3e      	ldr	r2, [pc, #248]	@ (8007dd8 <xTaskIncrementTick+0x154>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	4b3e      	ldr	r3, [pc, #248]	@ (8007ddc <xTaskIncrementTick+0x158>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8007ddc <xTaskIncrementTick+0x158>)
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	f000 fad4 	bl	8008298 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8007de0 <xTaskIncrementTick+0x15c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d349      	bcc.n	8007d8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cfa:	4b36      	ldr	r3, [pc, #216]	@ (8007dd4 <xTaskIncrementTick+0x150>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d104      	bne.n	8007d0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d04:	4b36      	ldr	r3, [pc, #216]	@ (8007de0 <xTaskIncrementTick+0x15c>)
 8007d06:	f04f 32ff 	mov.w	r2, #4294967295
 8007d0a:	601a      	str	r2, [r3, #0]
					break;
 8007d0c:	e03f      	b.n	8007d8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0e:	4b31      	ldr	r3, [pc, #196]	@ (8007dd4 <xTaskIncrementTick+0x150>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d1e:	693a      	ldr	r2, [r7, #16]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d203      	bcs.n	8007d2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d26:	4a2e      	ldr	r2, [pc, #184]	@ (8007de0 <xTaskIncrementTick+0x15c>)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d2c:	e02f      	b.n	8007d8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	3304      	adds	r3, #4
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fefa 	bl	8006b2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	3318      	adds	r3, #24
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fe fef1 	bl	8006b2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d4e:	4b25      	ldr	r3, [pc, #148]	@ (8007de4 <xTaskIncrementTick+0x160>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d903      	bls.n	8007d5e <xTaskIncrementTick+0xda>
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5a:	4a22      	ldr	r2, [pc, #136]	@ (8007de4 <xTaskIncrementTick+0x160>)
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d62:	4613      	mov	r3, r2
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	4413      	add	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007de8 <xTaskIncrementTick+0x164>)
 8007d6c:	441a      	add	r2, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	3304      	adds	r3, #4
 8007d72:	4619      	mov	r1, r3
 8007d74:	4610      	mov	r0, r2
 8007d76:	f7fe fe7c 	bl	8006a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007dec <xTaskIncrementTick+0x168>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d3b8      	bcc.n	8007cfa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d8c:	e7b5      	b.n	8007cfa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d8e:	4b17      	ldr	r3, [pc, #92]	@ (8007dec <xTaskIncrementTick+0x168>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d94:	4914      	ldr	r1, [pc, #80]	@ (8007de8 <xTaskIncrementTick+0x164>)
 8007d96:	4613      	mov	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	440b      	add	r3, r1
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d901      	bls.n	8007daa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007da6:	2301      	movs	r3, #1
 8007da8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007daa:	4b11      	ldr	r3, [pc, #68]	@ (8007df0 <xTaskIncrementTick+0x16c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d007      	beq.n	8007dc2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007db2:	2301      	movs	r3, #1
 8007db4:	617b      	str	r3, [r7, #20]
 8007db6:	e004      	b.n	8007dc2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007db8:	4b0e      	ldr	r3, [pc, #56]	@ (8007df4 <xTaskIncrementTick+0x170>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007df4 <xTaskIncrementTick+0x170>)
 8007dc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007dc2:	697b      	ldr	r3, [r7, #20]
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20001150 	.word	0x20001150
 8007dd0:	2000112c 	.word	0x2000112c
 8007dd4:	200010e0 	.word	0x200010e0
 8007dd8:	200010e4 	.word	0x200010e4
 8007ddc:	20001140 	.word	0x20001140
 8007de0:	20001148 	.word	0x20001148
 8007de4:	20001130 	.word	0x20001130
 8007de8:	20000c58 	.word	0x20000c58
 8007dec:	20000c54 	.word	0x20000c54
 8007df0:	2000113c 	.word	0x2000113c
 8007df4:	20001138 	.word	0x20001138

08007df8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dfe:	4b28      	ldr	r3, [pc, #160]	@ (8007ea0 <vTaskSwitchContext+0xa8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d003      	beq.n	8007e0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e06:	4b27      	ldr	r3, [pc, #156]	@ (8007ea4 <vTaskSwitchContext+0xac>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e0c:	e042      	b.n	8007e94 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007e0e:	4b25      	ldr	r3, [pc, #148]	@ (8007ea4 <vTaskSwitchContext+0xac>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e14:	4b24      	ldr	r3, [pc, #144]	@ (8007ea8 <vTaskSwitchContext+0xb0>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	e011      	b.n	8007e40 <vTaskSwitchContext+0x48>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <vTaskSwitchContext+0x42>
	__asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	607b      	str	r3, [r7, #4]
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <vTaskSwitchContext+0x3e>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	491a      	ldr	r1, [pc, #104]	@ (8007eac <vTaskSwitchContext+0xb4>)
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0e3      	beq.n	8007e1c <vTaskSwitchContext+0x24>
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4a13      	ldr	r2, [pc, #76]	@ (8007eac <vTaskSwitchContext+0xb4>)
 8007e60:	4413      	add	r3, r2
 8007e62:	60bb      	str	r3, [r7, #8]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	605a      	str	r2, [r3, #4]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	3308      	adds	r3, #8
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d104      	bne.n	8007e84 <vTaskSwitchContext+0x8c>
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	605a      	str	r2, [r3, #4]
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	4a09      	ldr	r2, [pc, #36]	@ (8007eb0 <vTaskSwitchContext+0xb8>)
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	4a06      	ldr	r2, [pc, #24]	@ (8007ea8 <vTaskSwitchContext+0xb0>)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6013      	str	r3, [r2, #0]
}
 8007e94:	bf00      	nop
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr
 8007ea0:	20001150 	.word	0x20001150
 8007ea4:	2000113c 	.word	0x2000113c
 8007ea8:	20001130 	.word	0x20001130
 8007eac:	20000c58 	.word	0x20000c58
 8007eb0:	20000c54 	.word	0x20000c54

08007eb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10b      	bne.n	8007edc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	60fb      	str	r3, [r7, #12]
}
 8007ed6:	bf00      	nop
 8007ed8:	bf00      	nop
 8007eda:	e7fd      	b.n	8007ed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007edc:	4b07      	ldr	r3, [pc, #28]	@ (8007efc <vTaskPlaceOnEventList+0x48>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	3318      	adds	r3, #24
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fe fde8 	bl	8006aba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eea:	2101      	movs	r1, #1
 8007eec:	6838      	ldr	r0, [r7, #0]
 8007eee:	f000 fa81 	bl	80083f4 <prvAddCurrentTaskToDelayedList>
}
 8007ef2:	bf00      	nop
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000c54 	.word	0x20000c54

08007f00 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10b      	bne.n	8007f2a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f16:	f383 8811 	msr	BASEPRI, r3
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	f3bf 8f4f 	dsb	sy
 8007f22:	617b      	str	r3, [r7, #20]
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	e7fd      	b.n	8007f26 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f54 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3318      	adds	r3, #24
 8007f30:	4619      	mov	r1, r3
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7fe fd9d 	bl	8006a72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f42:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	68b8      	ldr	r0, [r7, #8]
 8007f48:	f000 fa54 	bl	80083f4 <prvAddCurrentTaskToDelayedList>
	}
 8007f4c:	bf00      	nop
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	20000c54 	.word	0x20000c54

08007f58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10b      	bne.n	8007f86 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	60fb      	str	r3, [r7, #12]
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop
 8007f84:	e7fd      	b.n	8007f82 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	3318      	adds	r3, #24
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fdce 	bl	8006b2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f90:	4b1d      	ldr	r3, [pc, #116]	@ (8008008 <xTaskRemoveFromEventList+0xb0>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d11d      	bne.n	8007fd4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	3304      	adds	r3, #4
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fe fdc5 	bl	8006b2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fa6:	4b19      	ldr	r3, [pc, #100]	@ (800800c <xTaskRemoveFromEventList+0xb4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d903      	bls.n	8007fb6 <xTaskRemoveFromEventList+0x5e>
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb2:	4a16      	ldr	r2, [pc, #88]	@ (800800c <xTaskRemoveFromEventList+0xb4>)
 8007fb4:	6013      	str	r3, [r2, #0]
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4a13      	ldr	r2, [pc, #76]	@ (8008010 <xTaskRemoveFromEventList+0xb8>)
 8007fc4:	441a      	add	r2, r3
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	3304      	adds	r3, #4
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4610      	mov	r0, r2
 8007fce:	f7fe fd50 	bl	8006a72 <vListInsertEnd>
 8007fd2:	e005      	b.n	8007fe0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	3318      	adds	r3, #24
 8007fd8:	4619      	mov	r1, r3
 8007fda:	480e      	ldr	r0, [pc, #56]	@ (8008014 <xTaskRemoveFromEventList+0xbc>)
 8007fdc:	f7fe fd49 	bl	8006a72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8008018 <xTaskRemoveFromEventList+0xc0>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d905      	bls.n	8007ffa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800801c <xTaskRemoveFromEventList+0xc4>)
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	e001      	b.n	8007ffe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ffe:	697b      	ldr	r3, [r7, #20]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20001150 	.word	0x20001150
 800800c:	20001130 	.word	0x20001130
 8008010:	20000c58 	.word	0x20000c58
 8008014:	200010e8 	.word	0x200010e8
 8008018:	20000c54 	.word	0x20000c54
 800801c:	2000113c 	.word	0x2000113c

08008020 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008028:	4b06      	ldr	r3, [pc, #24]	@ (8008044 <vTaskInternalSetTimeOutState+0x24>)
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008030:	4b05      	ldr	r3, [pc, #20]	@ (8008048 <vTaskInternalSetTimeOutState+0x28>)
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	605a      	str	r2, [r3, #4]
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	20001140 	.word	0x20001140
 8008048:	2000112c 	.word	0x2000112c

0800804c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d10b      	bne.n	8008074 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800805c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008060:	f383 8811 	msr	BASEPRI, r3
 8008064:	f3bf 8f6f 	isb	sy
 8008068:	f3bf 8f4f 	dsb	sy
 800806c:	613b      	str	r3, [r7, #16]
}
 800806e:	bf00      	nop
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10b      	bne.n	8008092 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	60fb      	str	r3, [r7, #12]
}
 800808c:	bf00      	nop
 800808e:	bf00      	nop
 8008090:	e7fd      	b.n	800808e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008092:	f000 fe91 	bl	8008db8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008096:	4b1d      	ldr	r3, [pc, #116]	@ (800810c <xTaskCheckForTimeOut+0xc0>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d102      	bne.n	80080b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080b0:	2300      	movs	r3, #0
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	e023      	b.n	80080fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	4b15      	ldr	r3, [pc, #84]	@ (8008110 <xTaskCheckForTimeOut+0xc4>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d007      	beq.n	80080d2 <xTaskCheckForTimeOut+0x86>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d302      	bcc.n	80080d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080cc:	2301      	movs	r3, #1
 80080ce:	61fb      	str	r3, [r7, #28]
 80080d0:	e015      	b.n	80080fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d20b      	bcs.n	80080f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	1ad2      	subs	r2, r2, r3
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7ff ff99 	bl	8008020 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61fb      	str	r3, [r7, #28]
 80080f2:	e004      	b.n	80080fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080fa:	2301      	movs	r3, #1
 80080fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080fe:	f000 fe8d 	bl	8008e1c <vPortExitCritical>

	return xReturn;
 8008102:	69fb      	ldr	r3, [r7, #28]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3720      	adds	r7, #32
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	2000112c 	.word	0x2000112c
 8008110:	20001140 	.word	0x20001140

08008114 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008118:	4b03      	ldr	r3, [pc, #12]	@ (8008128 <vTaskMissedYield+0x14>)
 800811a:	2201      	movs	r2, #1
 800811c:	601a      	str	r2, [r3, #0]
}
 800811e:	bf00      	nop
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr
 8008128:	2000113c 	.word	0x2000113c

0800812c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008134:	f000 f852 	bl	80081dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008138:	4b06      	ldr	r3, [pc, #24]	@ (8008154 <prvIdleTask+0x28>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d9f9      	bls.n	8008134 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008140:	4b05      	ldr	r3, [pc, #20]	@ (8008158 <prvIdleTask+0x2c>)
 8008142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008150:	e7f0      	b.n	8008134 <prvIdleTask+0x8>
 8008152:	bf00      	nop
 8008154:	20000c58 	.word	0x20000c58
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008162:	2300      	movs	r3, #0
 8008164:	607b      	str	r3, [r7, #4]
 8008166:	e00c      	b.n	8008182 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a12      	ldr	r2, [pc, #72]	@ (80081bc <prvInitialiseTaskLists+0x60>)
 8008174:	4413      	add	r3, r2
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fc4e 	bl	8006a18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3301      	adds	r3, #1
 8008180:	607b      	str	r3, [r7, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b37      	cmp	r3, #55	@ 0x37
 8008186:	d9ef      	bls.n	8008168 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008188:	480d      	ldr	r0, [pc, #52]	@ (80081c0 <prvInitialiseTaskLists+0x64>)
 800818a:	f7fe fc45 	bl	8006a18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800818e:	480d      	ldr	r0, [pc, #52]	@ (80081c4 <prvInitialiseTaskLists+0x68>)
 8008190:	f7fe fc42 	bl	8006a18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008194:	480c      	ldr	r0, [pc, #48]	@ (80081c8 <prvInitialiseTaskLists+0x6c>)
 8008196:	f7fe fc3f 	bl	8006a18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800819a:	480c      	ldr	r0, [pc, #48]	@ (80081cc <prvInitialiseTaskLists+0x70>)
 800819c:	f7fe fc3c 	bl	8006a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081a0:	480b      	ldr	r0, [pc, #44]	@ (80081d0 <prvInitialiseTaskLists+0x74>)
 80081a2:	f7fe fc39 	bl	8006a18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081a6:	4b0b      	ldr	r3, [pc, #44]	@ (80081d4 <prvInitialiseTaskLists+0x78>)
 80081a8:	4a05      	ldr	r2, [pc, #20]	@ (80081c0 <prvInitialiseTaskLists+0x64>)
 80081aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081ac:	4b0a      	ldr	r3, [pc, #40]	@ (80081d8 <prvInitialiseTaskLists+0x7c>)
 80081ae:	4a05      	ldr	r2, [pc, #20]	@ (80081c4 <prvInitialiseTaskLists+0x68>)
 80081b0:	601a      	str	r2, [r3, #0]
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000c58 	.word	0x20000c58
 80081c0:	200010b8 	.word	0x200010b8
 80081c4:	200010cc 	.word	0x200010cc
 80081c8:	200010e8 	.word	0x200010e8
 80081cc:	200010fc 	.word	0x200010fc
 80081d0:	20001114 	.word	0x20001114
 80081d4:	200010e0 	.word	0x200010e0
 80081d8:	200010e4 	.word	0x200010e4

080081dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e2:	e019      	b.n	8008218 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081e4:	f000 fde8 	bl	8008db8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e8:	4b10      	ldr	r3, [pc, #64]	@ (800822c <prvCheckTasksWaitingTermination+0x50>)
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fe fc99 	bl	8006b2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008230 <prvCheckTasksWaitingTermination+0x54>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3b01      	subs	r3, #1
 8008200:	4a0b      	ldr	r2, [pc, #44]	@ (8008230 <prvCheckTasksWaitingTermination+0x54>)
 8008202:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008204:	4b0b      	ldr	r3, [pc, #44]	@ (8008234 <prvCheckTasksWaitingTermination+0x58>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3b01      	subs	r3, #1
 800820a:	4a0a      	ldr	r2, [pc, #40]	@ (8008234 <prvCheckTasksWaitingTermination+0x58>)
 800820c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800820e:	f000 fe05 	bl	8008e1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f810 	bl	8008238 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008218:	4b06      	ldr	r3, [pc, #24]	@ (8008234 <prvCheckTasksWaitingTermination+0x58>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d1e1      	bne.n	80081e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008220:	bf00      	nop
 8008222:	bf00      	nop
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	200010fc 	.word	0x200010fc
 8008230:	20001128 	.word	0x20001128
 8008234:	20001110 	.word	0x20001110

08008238 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008246:	2b00      	cmp	r3, #0
 8008248:	d108      	bne.n	800825c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824e:	4618      	mov	r0, r3
 8008250:	f000 ffa2 	bl	8009198 <vPortFree>
				vPortFree( pxTCB );
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 ff9f 	bl	8009198 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800825a:	e019      	b.n	8008290 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008262:	2b01      	cmp	r3, #1
 8008264:	d103      	bne.n	800826e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 ff96 	bl	8009198 <vPortFree>
	}
 800826c:	e010      	b.n	8008290 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008274:	2b02      	cmp	r3, #2
 8008276:	d00b      	beq.n	8008290 <prvDeleteTCB+0x58>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	60fb      	str	r3, [r7, #12]
}
 800828a:	bf00      	nop
 800828c:	bf00      	nop
 800828e:	e7fd      	b.n	800828c <prvDeleteTCB+0x54>
	}
 8008290:	bf00      	nop
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800829e:	4b0c      	ldr	r3, [pc, #48]	@ (80082d0 <prvResetNextTaskUnblockTime+0x38>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d104      	bne.n	80082b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <prvResetNextTaskUnblockTime+0x3c>)
 80082aa:	f04f 32ff 	mov.w	r2, #4294967295
 80082ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082b0:	e008      	b.n	80082c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b2:	4b07      	ldr	r3, [pc, #28]	@ (80082d0 <prvResetNextTaskUnblockTime+0x38>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	68db      	ldr	r3, [r3, #12]
 80082ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4a04      	ldr	r2, [pc, #16]	@ (80082d4 <prvResetNextTaskUnblockTime+0x3c>)
 80082c2:	6013      	str	r3, [r2, #0]
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	200010e0 	.word	0x200010e0
 80082d4:	20001148 	.word	0x20001148

080082d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082de:	4b0b      	ldr	r3, [pc, #44]	@ (800830c <xTaskGetSchedulerState+0x34>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d102      	bne.n	80082ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082e6:	2301      	movs	r3, #1
 80082e8:	607b      	str	r3, [r7, #4]
 80082ea:	e008      	b.n	80082fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ec:	4b08      	ldr	r3, [pc, #32]	@ (8008310 <xTaskGetSchedulerState+0x38>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d102      	bne.n	80082fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082f4:	2302      	movs	r3, #2
 80082f6:	607b      	str	r3, [r7, #4]
 80082f8:	e001      	b.n	80082fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082fa:	2300      	movs	r3, #0
 80082fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082fe:	687b      	ldr	r3, [r7, #4]
	}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	20001134 	.word	0x20001134
 8008310:	20001150 	.word	0x20001150

08008314 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008320:	2300      	movs	r3, #0
 8008322:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d058      	beq.n	80083dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800832a:	4b2f      	ldr	r3, [pc, #188]	@ (80083e8 <xTaskPriorityDisinherit+0xd4>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	429a      	cmp	r2, r3
 8008332:	d00b      	beq.n	800834c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	60fb      	str	r3, [r7, #12]
}
 8008346:	bf00      	nop
 8008348:	bf00      	nop
 800834a:	e7fd      	b.n	8008348 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008350:	2b00      	cmp	r3, #0
 8008352:	d10b      	bne.n	800836c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	60bb      	str	r3, [r7, #8]
}
 8008366:	bf00      	nop
 8008368:	bf00      	nop
 800836a:	e7fd      	b.n	8008368 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008370:	1e5a      	subs	r2, r3, #1
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800837e:	429a      	cmp	r2, r3
 8008380:	d02c      	beq.n	80083dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008386:	2b00      	cmp	r3, #0
 8008388:	d128      	bne.n	80083dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	3304      	adds	r3, #4
 800838e:	4618      	mov	r0, r3
 8008390:	f7fe fbcc 	bl	8006b2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ac:	4b0f      	ldr	r3, [pc, #60]	@ (80083ec <xTaskPriorityDisinherit+0xd8>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d903      	bls.n	80083bc <xTaskPriorityDisinherit+0xa8>
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	4a0c      	ldr	r2, [pc, #48]	@ (80083ec <xTaskPriorityDisinherit+0xd8>)
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4a09      	ldr	r2, [pc, #36]	@ (80083f0 <xTaskPriorityDisinherit+0xdc>)
 80083ca:	441a      	add	r2, r3
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f7fe fb4d 	bl	8006a72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083d8:	2301      	movs	r3, #1
 80083da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083dc:	697b      	ldr	r3, [r7, #20]
	}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000c54 	.word	0x20000c54
 80083ec:	20001130 	.word	0x20001130
 80083f0:	20000c58 	.word	0x20000c58

080083f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083fe:	4b21      	ldr	r3, [pc, #132]	@ (8008484 <prvAddCurrentTaskToDelayedList+0x90>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008404:	4b20      	ldr	r3, [pc, #128]	@ (8008488 <prvAddCurrentTaskToDelayedList+0x94>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3304      	adds	r3, #4
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe fb8e 	bl	8006b2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d10a      	bne.n	800842e <prvAddCurrentTaskToDelayedList+0x3a>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d007      	beq.n	800842e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800841e:	4b1a      	ldr	r3, [pc, #104]	@ (8008488 <prvAddCurrentTaskToDelayedList+0x94>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	3304      	adds	r3, #4
 8008424:	4619      	mov	r1, r3
 8008426:	4819      	ldr	r0, [pc, #100]	@ (800848c <prvAddCurrentTaskToDelayedList+0x98>)
 8008428:	f7fe fb23 	bl	8006a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800842c:	e026      	b.n	800847c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4413      	add	r3, r2
 8008434:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008436:	4b14      	ldr	r3, [pc, #80]	@ (8008488 <prvAddCurrentTaskToDelayedList+0x94>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	429a      	cmp	r2, r3
 8008444:	d209      	bcs.n	800845a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008446:	4b12      	ldr	r3, [pc, #72]	@ (8008490 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	4b0f      	ldr	r3, [pc, #60]	@ (8008488 <prvAddCurrentTaskToDelayedList+0x94>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3304      	adds	r3, #4
 8008450:	4619      	mov	r1, r3
 8008452:	4610      	mov	r0, r2
 8008454:	f7fe fb31 	bl	8006aba <vListInsert>
}
 8008458:	e010      	b.n	800847c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800845a:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <prvAddCurrentTaskToDelayedList+0xa0>)
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	4b0a      	ldr	r3, [pc, #40]	@ (8008488 <prvAddCurrentTaskToDelayedList+0x94>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3304      	adds	r3, #4
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f7fe fb27 	bl	8006aba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800846c:	4b0a      	ldr	r3, [pc, #40]	@ (8008498 <prvAddCurrentTaskToDelayedList+0xa4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	68ba      	ldr	r2, [r7, #8]
 8008472:	429a      	cmp	r2, r3
 8008474:	d202      	bcs.n	800847c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008476:	4a08      	ldr	r2, [pc, #32]	@ (8008498 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	6013      	str	r3, [r2, #0]
}
 800847c:	bf00      	nop
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}
 8008484:	2000112c 	.word	0x2000112c
 8008488:	20000c54 	.word	0x20000c54
 800848c:	20001114 	.word	0x20001114
 8008490:	200010e4 	.word	0x200010e4
 8008494:	200010e0 	.word	0x200010e0
 8008498:	20001148 	.word	0x20001148

0800849c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b08a      	sub	sp, #40	@ 0x28
 80084a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084a6:	f000 fb13 	bl	8008ad0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008520 <xTimerCreateTimerTask+0x84>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d021      	beq.n	80084f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084ba:	1d3a      	adds	r2, r7, #4
 80084bc:	f107 0108 	add.w	r1, r7, #8
 80084c0:	f107 030c 	add.w	r3, r7, #12
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fa8d 	bl	80069e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	9202      	str	r2, [sp, #8]
 80084d2:	9301      	str	r3, [sp, #4]
 80084d4:	2302      	movs	r3, #2
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	2300      	movs	r3, #0
 80084da:	460a      	mov	r2, r1
 80084dc:	4911      	ldr	r1, [pc, #68]	@ (8008524 <xTimerCreateTimerTask+0x88>)
 80084de:	4812      	ldr	r0, [pc, #72]	@ (8008528 <xTimerCreateTimerTask+0x8c>)
 80084e0:	f7ff f8d0 	bl	8007684 <xTaskCreateStatic>
 80084e4:	4603      	mov	r3, r0
 80084e6:	4a11      	ldr	r2, [pc, #68]	@ (800852c <xTimerCreateTimerTask+0x90>)
 80084e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084ea:	4b10      	ldr	r3, [pc, #64]	@ (800852c <xTimerCreateTimerTask+0x90>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084f2:	2301      	movs	r3, #1
 80084f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10b      	bne.n	8008514 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80084fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008500:	f383 8811 	msr	BASEPRI, r3
 8008504:	f3bf 8f6f 	isb	sy
 8008508:	f3bf 8f4f 	dsb	sy
 800850c:	613b      	str	r3, [r7, #16]
}
 800850e:	bf00      	nop
 8008510:	bf00      	nop
 8008512:	e7fd      	b.n	8008510 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008514:	697b      	ldr	r3, [r7, #20]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20001184 	.word	0x20001184
 8008524:	080094b8 	.word	0x080094b8
 8008528:	08008669 	.word	0x08008669
 800852c:	20001188 	.word	0x20001188

08008530 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	@ 0x28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800853e:	2300      	movs	r3, #0
 8008540:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10b      	bne.n	8008560 <xTimerGenericCommand+0x30>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	623b      	str	r3, [r7, #32]
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	e7fd      	b.n	800855c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008560:	4b19      	ldr	r3, [pc, #100]	@ (80085c8 <xTimerGenericCommand+0x98>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d02a      	beq.n	80085be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b05      	cmp	r3, #5
 8008578:	dc18      	bgt.n	80085ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800857a:	f7ff fead 	bl	80082d8 <xTaskGetSchedulerState>
 800857e:	4603      	mov	r3, r0
 8008580:	2b02      	cmp	r3, #2
 8008582:	d109      	bne.n	8008598 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008584:	4b10      	ldr	r3, [pc, #64]	@ (80085c8 <xTimerGenericCommand+0x98>)
 8008586:	6818      	ldr	r0, [r3, #0]
 8008588:	f107 0110 	add.w	r1, r7, #16
 800858c:	2300      	movs	r3, #0
 800858e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008590:	f7fe fc88 	bl	8006ea4 <xQueueGenericSend>
 8008594:	6278      	str	r0, [r7, #36]	@ 0x24
 8008596:	e012      	b.n	80085be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008598:	4b0b      	ldr	r3, [pc, #44]	@ (80085c8 <xTimerGenericCommand+0x98>)
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	f107 0110 	add.w	r1, r7, #16
 80085a0:	2300      	movs	r3, #0
 80085a2:	2200      	movs	r2, #0
 80085a4:	f7fe fc7e 	bl	8006ea4 <xQueueGenericSend>
 80085a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80085aa:	e008      	b.n	80085be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085ac:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <xTimerGenericCommand+0x98>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	f107 0110 	add.w	r1, r7, #16
 80085b4:	2300      	movs	r3, #0
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	f7fe fd76 	bl	80070a8 <xQueueGenericSendFromISR>
 80085bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3728      	adds	r7, #40	@ 0x28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20001184 	.word	0x20001184

080085cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b088      	sub	sp, #32
 80085d0:	af02      	add	r7, sp, #8
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085d6:	4b23      	ldr	r3, [pc, #140]	@ (8008664 <prvProcessExpiredTimer+0x98>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	3304      	adds	r3, #4
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe faa1 	bl	8006b2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085f0:	f003 0304 	and.w	r3, r3, #4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d023      	beq.n	8008640 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	699a      	ldr	r2, [r3, #24]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	18d1      	adds	r1, r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	6978      	ldr	r0, [r7, #20]
 8008606:	f000 f8d5 	bl	80087b4 <prvInsertTimerInActiveList>
 800860a:	4603      	mov	r3, r0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d020      	beq.n	8008652 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008610:	2300      	movs	r3, #0
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	2300      	movs	r3, #0
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	2100      	movs	r1, #0
 800861a:	6978      	ldr	r0, [r7, #20]
 800861c:	f7ff ff88 	bl	8008530 <xTimerGenericCommand>
 8008620:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d114      	bne.n	8008652 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862c:	f383 8811 	msr	BASEPRI, r3
 8008630:	f3bf 8f6f 	isb	sy
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	60fb      	str	r3, [r7, #12]
}
 800863a:	bf00      	nop
 800863c:	bf00      	nop
 800863e:	e7fd      	b.n	800863c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008646:	f023 0301 	bic.w	r3, r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	6978      	ldr	r0, [r7, #20]
 8008658:	4798      	blx	r3
}
 800865a:	bf00      	nop
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000117c 	.word	0x2000117c

08008668 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008670:	f107 0308 	add.w	r3, r7, #8
 8008674:	4618      	mov	r0, r3
 8008676:	f000 f859 	bl	800872c <prvGetNextExpireTime>
 800867a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	4619      	mov	r1, r3
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f000 f805 	bl	8008690 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008686:	f000 f8d7 	bl	8008838 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800868a:	bf00      	nop
 800868c:	e7f0      	b.n	8008670 <prvTimerTask+0x8>
	...

08008690 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b084      	sub	sp, #16
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800869a:	f7ff fa37 	bl	8007b0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800869e:	f107 0308 	add.w	r3, r7, #8
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 f866 	bl	8008774 <prvSampleTimeNow>
 80086a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d130      	bne.n	8008712 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10a      	bne.n	80086cc <prvProcessTimerOrBlockTask+0x3c>
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d806      	bhi.n	80086cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086be:	f7ff fa33 	bl	8007b28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086c2:	68f9      	ldr	r1, [r7, #12]
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f7ff ff81 	bl	80085cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086ca:	e024      	b.n	8008716 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d008      	beq.n	80086e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086d2:	4b13      	ldr	r3, [pc, #76]	@ (8008720 <prvProcessTimerOrBlockTask+0x90>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <prvProcessTimerOrBlockTask+0x50>
 80086dc:	2301      	movs	r3, #1
 80086de:	e000      	b.n	80086e2 <prvProcessTimerOrBlockTask+0x52>
 80086e0:	2300      	movs	r3, #0
 80086e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008724 <prvProcessTimerOrBlockTask+0x94>)
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	4619      	mov	r1, r3
 80086f2:	f7fe ff93 	bl	800761c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086f6:	f7ff fa17 	bl	8007b28 <xTaskResumeAll>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10a      	bne.n	8008716 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008700:	4b09      	ldr	r3, [pc, #36]	@ (8008728 <prvProcessTimerOrBlockTask+0x98>)
 8008702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	f3bf 8f4f 	dsb	sy
 800870c:	f3bf 8f6f 	isb	sy
}
 8008710:	e001      	b.n	8008716 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008712:	f7ff fa09 	bl	8007b28 <xTaskResumeAll>
}
 8008716:	bf00      	nop
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20001180 	.word	0x20001180
 8008724:	20001184 	.word	0x20001184
 8008728:	e000ed04 	.word	0xe000ed04

0800872c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008734:	4b0e      	ldr	r3, [pc, #56]	@ (8008770 <prvGetNextExpireTime+0x44>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <prvGetNextExpireTime+0x16>
 800873e:	2201      	movs	r2, #1
 8008740:	e000      	b.n	8008744 <prvGetNextExpireTime+0x18>
 8008742:	2200      	movs	r2, #0
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d105      	bne.n	800875c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008750:	4b07      	ldr	r3, [pc, #28]	@ (8008770 <prvGetNextExpireTime+0x44>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68db      	ldr	r3, [r3, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	e001      	b.n	8008760 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008760:	68fb      	ldr	r3, [r7, #12]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	2000117c 	.word	0x2000117c

08008774 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800877c:	f7ff fa72 	bl	8007c64 <xTaskGetTickCount>
 8008780:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008782:	4b0b      	ldr	r3, [pc, #44]	@ (80087b0 <prvSampleTimeNow+0x3c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	429a      	cmp	r2, r3
 800878a:	d205      	bcs.n	8008798 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800878c:	f000 f93a 	bl	8008a04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	e002      	b.n	800879e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800879e:	4a04      	ldr	r2, [pc, #16]	@ (80087b0 <prvSampleTimeNow+0x3c>)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087a4:	68fb      	ldr	r3, [r7, #12]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	2000118c 	.word	0x2000118c

080087b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d812      	bhi.n	8008800 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d302      	bcc.n	80087ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087e8:	2301      	movs	r3, #1
 80087ea:	617b      	str	r3, [r7, #20]
 80087ec:	e01b      	b.n	8008826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087ee:	4b10      	ldr	r3, [pc, #64]	@ (8008830 <prvInsertTimerInActiveList+0x7c>)
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3304      	adds	r3, #4
 80087f6:	4619      	mov	r1, r3
 80087f8:	4610      	mov	r0, r2
 80087fa:	f7fe f95e 	bl	8006aba <vListInsert>
 80087fe:	e012      	b.n	8008826 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	429a      	cmp	r2, r3
 8008806:	d206      	bcs.n	8008816 <prvInsertTimerInActiveList+0x62>
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	429a      	cmp	r2, r3
 800880e:	d302      	bcc.n	8008816 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	e007      	b.n	8008826 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008816:	4b07      	ldr	r3, [pc, #28]	@ (8008834 <prvInsertTimerInActiveList+0x80>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3304      	adds	r3, #4
 800881e:	4619      	mov	r1, r3
 8008820:	4610      	mov	r0, r2
 8008822:	f7fe f94a 	bl	8006aba <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008826:	697b      	ldr	r3, [r7, #20]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20001180 	.word	0x20001180
 8008834:	2000117c 	.word	0x2000117c

08008838 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b08e      	sub	sp, #56	@ 0x38
 800883c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800883e:	e0ce      	b.n	80089de <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	da19      	bge.n	800887a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008846:	1d3b      	adds	r3, r7, #4
 8008848:	3304      	adds	r3, #4
 800884a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800884c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d10b      	bne.n	800886a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	61fb      	str	r3, [r7, #28]
}
 8008864:	bf00      	nop
 8008866:	bf00      	nop
 8008868:	e7fd      	b.n	8008866 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800886a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008870:	6850      	ldr	r0, [r2, #4]
 8008872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008874:	6892      	ldr	r2, [r2, #8]
 8008876:	4611      	mov	r1, r2
 8008878:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	f2c0 80ae 	blt.w	80089de <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d004      	beq.n	8008898 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	3304      	adds	r3, #4
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe f94a 	bl	8006b2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008898:	463b      	mov	r3, r7
 800889a:	4618      	mov	r0, r3
 800889c:	f7ff ff6a 	bl	8008774 <prvSampleTimeNow>
 80088a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	f200 8097 	bhi.w	80089d8 <prvProcessReceivedCommands+0x1a0>
 80088aa:	a201      	add	r2, pc, #4	@ (adr r2, 80088b0 <prvProcessReceivedCommands+0x78>)
 80088ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088d9 	.word	0x080088d9
 80088b8:	080088d9 	.word	0x080088d9
 80088bc:	0800894f 	.word	0x0800894f
 80088c0:	08008963 	.word	0x08008963
 80088c4:	080089af 	.word	0x080089af
 80088c8:	080088d9 	.word	0x080088d9
 80088cc:	080088d9 	.word	0x080088d9
 80088d0:	0800894f 	.word	0x0800894f
 80088d4:	08008963 	.word	0x08008963
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	18d1      	adds	r1, r2, r3
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088f8:	f7ff ff5c 	bl	80087b4 <prvInsertTimerInActiveList>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d06c      	beq.n	80089dc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008908:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008910:	f003 0304 	and.w	r3, r3, #4
 8008914:	2b00      	cmp	r3, #0
 8008916:	d061      	beq.n	80089dc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	441a      	add	r2, r3
 8008920:	2300      	movs	r3, #0
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	2100      	movs	r1, #0
 8008928:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800892a:	f7ff fe01 	bl	8008530 <xTimerGenericCommand>
 800892e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d152      	bne.n	80089dc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	61bb      	str	r3, [r7, #24]
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	e7fd      	b.n	800894a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800894e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008954:	f023 0301 	bic.w	r3, r3, #1
 8008958:	b2da      	uxtb	r2, r3
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008960:	e03d      	b.n	80089de <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008968:	f043 0301 	orr.w	r3, r3, #1
 800896c:	b2da      	uxtb	r2, r3
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008974:	68ba      	ldr	r2, [r7, #8]
 8008976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008978:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	699b      	ldr	r3, [r3, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10b      	bne.n	800899a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	617b      	str	r3, [r7, #20]
}
 8008994:	bf00      	nop
 8008996:	bf00      	nop
 8008998:	e7fd      	b.n	8008996 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800899a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	18d1      	adds	r1, r2, r3
 80089a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089a8:	f7ff ff04 	bl	80087b4 <prvInsertTimerInActiveList>
					break;
 80089ac:	e017      	b.n	80089de <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80089ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089b4:	f003 0302 	and.w	r3, r3, #2
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d103      	bne.n	80089c4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80089bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089be:	f000 fbeb 	bl	8009198 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089c2:	e00c      	b.n	80089de <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089ca:	f023 0301 	bic.w	r3, r3, #1
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089d6:	e002      	b.n	80089de <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80089d8:	bf00      	nop
 80089da:	e000      	b.n	80089de <prvProcessReceivedCommands+0x1a6>
					break;
 80089dc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089de:	4b08      	ldr	r3, [pc, #32]	@ (8008a00 <prvProcessReceivedCommands+0x1c8>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	1d39      	adds	r1, r7, #4
 80089e4:	2200      	movs	r2, #0
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fbfc 	bl	80071e4 <xQueueReceive>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f47f af26 	bne.w	8008840 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	3730      	adds	r7, #48	@ 0x30
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20001184 	.word	0x20001184

08008a04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b088      	sub	sp, #32
 8008a08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a0a:	e049      	b.n	8008aa0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8008ac8 <prvSwitchTimerLists+0xc4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a16:	4b2c      	ldr	r3, [pc, #176]	@ (8008ac8 <prvSwitchTimerLists+0xc4>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	3304      	adds	r3, #4
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fe f881 	bl	8006b2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d02f      	beq.n	8008aa0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4413      	add	r3, r2
 8008a48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a4a:	68ba      	ldr	r2, [r7, #8]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d90e      	bls.n	8008a70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac8 <prvSwitchTimerLists+0xc4>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3304      	adds	r3, #4
 8008a66:	4619      	mov	r1, r3
 8008a68:	4610      	mov	r0, r2
 8008a6a:	f7fe f826 	bl	8006aba <vListInsert>
 8008a6e:	e017      	b.n	8008aa0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a70:	2300      	movs	r3, #0
 8008a72:	9300      	str	r3, [sp, #0]
 8008a74:	2300      	movs	r3, #0
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	2100      	movs	r1, #0
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7ff fd58 	bl	8008530 <xTimerGenericCommand>
 8008a80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	603b      	str	r3, [r7, #0]
}
 8008a9a:	bf00      	nop
 8008a9c:	bf00      	nop
 8008a9e:	e7fd      	b.n	8008a9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008aa0:	4b09      	ldr	r3, [pc, #36]	@ (8008ac8 <prvSwitchTimerLists+0xc4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1b0      	bne.n	8008a0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008aaa:	4b07      	ldr	r3, [pc, #28]	@ (8008ac8 <prvSwitchTimerLists+0xc4>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ab0:	4b06      	ldr	r3, [pc, #24]	@ (8008acc <prvSwitchTimerLists+0xc8>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a04      	ldr	r2, [pc, #16]	@ (8008ac8 <prvSwitchTimerLists+0xc4>)
 8008ab6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008ab8:	4a04      	ldr	r2, [pc, #16]	@ (8008acc <prvSwitchTimerLists+0xc8>)
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	6013      	str	r3, [r2, #0]
}
 8008abe:	bf00      	nop
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	2000117c 	.word	0x2000117c
 8008acc:	20001180 	.word	0x20001180

08008ad0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b082      	sub	sp, #8
 8008ad4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008ad6:	f000 f96f 	bl	8008db8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ada:	4b15      	ldr	r3, [pc, #84]	@ (8008b30 <prvCheckForValidListAndQueue+0x60>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d120      	bne.n	8008b24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ae2:	4814      	ldr	r0, [pc, #80]	@ (8008b34 <prvCheckForValidListAndQueue+0x64>)
 8008ae4:	f7fd ff98 	bl	8006a18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008ae8:	4813      	ldr	r0, [pc, #76]	@ (8008b38 <prvCheckForValidListAndQueue+0x68>)
 8008aea:	f7fd ff95 	bl	8006a18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008aee:	4b13      	ldr	r3, [pc, #76]	@ (8008b3c <prvCheckForValidListAndQueue+0x6c>)
 8008af0:	4a10      	ldr	r2, [pc, #64]	@ (8008b34 <prvCheckForValidListAndQueue+0x64>)
 8008af2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008af4:	4b12      	ldr	r3, [pc, #72]	@ (8008b40 <prvCheckForValidListAndQueue+0x70>)
 8008af6:	4a10      	ldr	r2, [pc, #64]	@ (8008b38 <prvCheckForValidListAndQueue+0x68>)
 8008af8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008afa:	2300      	movs	r3, #0
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	4b11      	ldr	r3, [pc, #68]	@ (8008b44 <prvCheckForValidListAndQueue+0x74>)
 8008b00:	4a11      	ldr	r2, [pc, #68]	@ (8008b48 <prvCheckForValidListAndQueue+0x78>)
 8008b02:	2110      	movs	r1, #16
 8008b04:	200a      	movs	r0, #10
 8008b06:	f7fe f8a5 	bl	8006c54 <xQueueGenericCreateStatic>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	4a08      	ldr	r2, [pc, #32]	@ (8008b30 <prvCheckForValidListAndQueue+0x60>)
 8008b0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b10:	4b07      	ldr	r3, [pc, #28]	@ (8008b30 <prvCheckForValidListAndQueue+0x60>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d005      	beq.n	8008b24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b18:	4b05      	ldr	r3, [pc, #20]	@ (8008b30 <prvCheckForValidListAndQueue+0x60>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	490b      	ldr	r1, [pc, #44]	@ (8008b4c <prvCheckForValidListAndQueue+0x7c>)
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fd52 	bl	80075c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b24:	f000 f97a 	bl	8008e1c <vPortExitCritical>
}
 8008b28:	bf00      	nop
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	20001184 	.word	0x20001184
 8008b34:	20001154 	.word	0x20001154
 8008b38:	20001168 	.word	0x20001168
 8008b3c:	2000117c 	.word	0x2000117c
 8008b40:	20001180 	.word	0x20001180
 8008b44:	20001230 	.word	0x20001230
 8008b48:	20001190 	.word	0x20001190
 8008b4c:	080094c0 	.word	0x080094c0

08008b50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	60b9      	str	r1, [r7, #8]
 8008b5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	3b04      	subs	r3, #4
 8008b60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008b68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3b04      	subs	r3, #4
 8008b6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f023 0201 	bic.w	r2, r3, #1
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	3b04      	subs	r3, #4
 8008b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b80:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb4 <pxPortInitialiseStack+0x64>)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3b14      	subs	r3, #20
 8008b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	3b04      	subs	r3, #4
 8008b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f06f 0202 	mvn.w	r2, #2
 8008b9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	3b20      	subs	r3, #32
 8008ba4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	08008bb9 	.word	0x08008bb9

08008bb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008bc2:	4b13      	ldr	r3, [pc, #76]	@ (8008c10 <prvTaskExitError+0x58>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bca:	d00b      	beq.n	8008be4 <prvTaskExitError+0x2c>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	60fb      	str	r3, [r7, #12]
}
 8008bde:	bf00      	nop
 8008be0:	bf00      	nop
 8008be2:	e7fd      	b.n	8008be0 <prvTaskExitError+0x28>
	__asm volatile
 8008be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be8:	f383 8811 	msr	BASEPRI, r3
 8008bec:	f3bf 8f6f 	isb	sy
 8008bf0:	f3bf 8f4f 	dsb	sy
 8008bf4:	60bb      	str	r3, [r7, #8]
}
 8008bf6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bf8:	bf00      	nop
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0fc      	beq.n	8008bfa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c00:	bf00      	nop
 8008c02:	bf00      	nop
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
 8008c0e:	bf00      	nop
 8008c10:	2000000c 	.word	0x2000000c
	...

08008c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c20:	4b07      	ldr	r3, [pc, #28]	@ (8008c40 <pxCurrentTCBConst2>)
 8008c22:	6819      	ldr	r1, [r3, #0]
 8008c24:	6808      	ldr	r0, [r1, #0]
 8008c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2a:	f380 8809 	msr	PSP, r0
 8008c2e:	f3bf 8f6f 	isb	sy
 8008c32:	f04f 0000 	mov.w	r0, #0
 8008c36:	f380 8811 	msr	BASEPRI, r0
 8008c3a:	4770      	bx	lr
 8008c3c:	f3af 8000 	nop.w

08008c40 <pxCurrentTCBConst2>:
 8008c40:	20000c54 	.word	0x20000c54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop

08008c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008c48:	4808      	ldr	r0, [pc, #32]	@ (8008c6c <prvPortStartFirstTask+0x24>)
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	6800      	ldr	r0, [r0, #0]
 8008c4e:	f380 8808 	msr	MSP, r0
 8008c52:	f04f 0000 	mov.w	r0, #0
 8008c56:	f380 8814 	msr	CONTROL, r0
 8008c5a:	b662      	cpsie	i
 8008c5c:	b661      	cpsie	f
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	f3bf 8f6f 	isb	sy
 8008c66:	df00      	svc	0
 8008c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c6a:	bf00      	nop
 8008c6c:	e000ed08 	.word	0xe000ed08

08008c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008c76:	4b47      	ldr	r3, [pc, #284]	@ (8008d94 <xPortStartScheduler+0x124>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a47      	ldr	r2, [pc, #284]	@ (8008d98 <xPortStartScheduler+0x128>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d10b      	bne.n	8008c98 <xPortStartScheduler+0x28>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	60fb      	str	r3, [r7, #12]
}
 8008c92:	bf00      	nop
 8008c94:	bf00      	nop
 8008c96:	e7fd      	b.n	8008c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008c98:	4b3e      	ldr	r3, [pc, #248]	@ (8008d94 <xPortStartScheduler+0x124>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a3f      	ldr	r2, [pc, #252]	@ (8008d9c <xPortStartScheduler+0x12c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d10b      	bne.n	8008cba <xPortStartScheduler+0x4a>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	613b      	str	r3, [r7, #16]
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	e7fd      	b.n	8008cb6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008cba:	4b39      	ldr	r3, [pc, #228]	@ (8008da0 <xPortStartScheduler+0x130>)
 8008cbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	22ff      	movs	r2, #255	@ 0xff
 8008cca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cd4:	78fb      	ldrb	r3, [r7, #3]
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008cdc:	b2da      	uxtb	r2, r3
 8008cde:	4b31      	ldr	r3, [pc, #196]	@ (8008da4 <xPortStartScheduler+0x134>)
 8008ce0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ce2:	4b31      	ldr	r3, [pc, #196]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008ce4:	2207      	movs	r2, #7
 8008ce6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ce8:	e009      	b.n	8008cfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008cea:	4b2f      	ldr	r3, [pc, #188]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	4a2d      	ldr	r2, [pc, #180]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008cf2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d06:	2b80      	cmp	r3, #128	@ 0x80
 8008d08:	d0ef      	beq.n	8008cea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d0a:	4b27      	ldr	r3, [pc, #156]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f1c3 0307 	rsb	r3, r3, #7
 8008d12:	2b04      	cmp	r3, #4
 8008d14:	d00b      	beq.n	8008d2e <xPortStartScheduler+0xbe>
	__asm volatile
 8008d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d1a:	f383 8811 	msr	BASEPRI, r3
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f3bf 8f4f 	dsb	sy
 8008d26:	60bb      	str	r3, [r7, #8]
}
 8008d28:	bf00      	nop
 8008d2a:	bf00      	nop
 8008d2c:	e7fd      	b.n	8008d2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	021b      	lsls	r3, r3, #8
 8008d34:	4a1c      	ldr	r2, [pc, #112]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d38:	4b1b      	ldr	r3, [pc, #108]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d40:	4a19      	ldr	r2, [pc, #100]	@ (8008da8 <xPortStartScheduler+0x138>)
 8008d42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d4c:	4b17      	ldr	r3, [pc, #92]	@ (8008dac <xPortStartScheduler+0x13c>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a16      	ldr	r2, [pc, #88]	@ (8008dac <xPortStartScheduler+0x13c>)
 8008d52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d58:	4b14      	ldr	r3, [pc, #80]	@ (8008dac <xPortStartScheduler+0x13c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a13      	ldr	r2, [pc, #76]	@ (8008dac <xPortStartScheduler+0x13c>)
 8008d5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d64:	f000 f8da 	bl	8008f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d68:	4b11      	ldr	r3, [pc, #68]	@ (8008db0 <xPortStartScheduler+0x140>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d6e:	f000 f8f9 	bl	8008f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d72:	4b10      	ldr	r3, [pc, #64]	@ (8008db4 <xPortStartScheduler+0x144>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a0f      	ldr	r2, [pc, #60]	@ (8008db4 <xPortStartScheduler+0x144>)
 8008d78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d7e:	f7ff ff63 	bl	8008c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d82:	f7ff f839 	bl	8007df8 <vTaskSwitchContext>
	prvTaskExitError();
 8008d86:	f7ff ff17 	bl	8008bb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3718      	adds	r7, #24
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	e000ed00 	.word	0xe000ed00
 8008d98:	410fc271 	.word	0x410fc271
 8008d9c:	410fc270 	.word	0x410fc270
 8008da0:	e000e400 	.word	0xe000e400
 8008da4:	20001280 	.word	0x20001280
 8008da8:	20001284 	.word	0x20001284
 8008dac:	e000ed20 	.word	0xe000ed20
 8008db0:	2000000c 	.word	0x2000000c
 8008db4:	e000ef34 	.word	0xe000ef34

08008db8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	607b      	str	r3, [r7, #4]
}
 8008dd0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dd2:	4b10      	ldr	r3, [pc, #64]	@ (8008e14 <vPortEnterCritical+0x5c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	4a0e      	ldr	r2, [pc, #56]	@ (8008e14 <vPortEnterCritical+0x5c>)
 8008dda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e14 <vPortEnterCritical+0x5c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d110      	bne.n	8008e06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008de4:	4b0c      	ldr	r3, [pc, #48]	@ (8008e18 <vPortEnterCritical+0x60>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00b      	beq.n	8008e06 <vPortEnterCritical+0x4e>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	603b      	str	r3, [r7, #0]
}
 8008e00:	bf00      	nop
 8008e02:	bf00      	nop
 8008e04:	e7fd      	b.n	8008e02 <vPortEnterCritical+0x4a>
	}
}
 8008e06:	bf00      	nop
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	2000000c 	.word	0x2000000c
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e22:	4b12      	ldr	r3, [pc, #72]	@ (8008e6c <vPortExitCritical+0x50>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d10b      	bne.n	8008e42 <vPortExitCritical+0x26>
	__asm volatile
 8008e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e2e:	f383 8811 	msr	BASEPRI, r3
 8008e32:	f3bf 8f6f 	isb	sy
 8008e36:	f3bf 8f4f 	dsb	sy
 8008e3a:	607b      	str	r3, [r7, #4]
}
 8008e3c:	bf00      	nop
 8008e3e:	bf00      	nop
 8008e40:	e7fd      	b.n	8008e3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e42:	4b0a      	ldr	r3, [pc, #40]	@ (8008e6c <vPortExitCritical+0x50>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	4a08      	ldr	r2, [pc, #32]	@ (8008e6c <vPortExitCritical+0x50>)
 8008e4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e4c:	4b07      	ldr	r3, [pc, #28]	@ (8008e6c <vPortExitCritical+0x50>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d105      	bne.n	8008e60 <vPortExitCritical+0x44>
 8008e54:	2300      	movs	r3, #0
 8008e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	f383 8811 	msr	BASEPRI, r3
}
 8008e5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e60:	bf00      	nop
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	2000000c 	.word	0x2000000c

08008e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e70:	f3ef 8009 	mrs	r0, PSP
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	4b15      	ldr	r3, [pc, #84]	@ (8008ed0 <pxCurrentTCBConst>)
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	f01e 0f10 	tst.w	lr, #16
 8008e80:	bf08      	it	eq
 8008e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	6010      	str	r0, [r2, #0]
 8008e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008e90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008e94:	f380 8811 	msr	BASEPRI, r0
 8008e98:	f3bf 8f4f 	dsb	sy
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f7fe ffaa 	bl	8007df8 <vTaskSwitchContext>
 8008ea4:	f04f 0000 	mov.w	r0, #0
 8008ea8:	f380 8811 	msr	BASEPRI, r0
 8008eac:	bc09      	pop	{r0, r3}
 8008eae:	6819      	ldr	r1, [r3, #0]
 8008eb0:	6808      	ldr	r0, [r1, #0]
 8008eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb6:	f01e 0f10 	tst.w	lr, #16
 8008eba:	bf08      	it	eq
 8008ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ec0:	f380 8809 	msr	PSP, r0
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	f3af 8000 	nop.w

08008ed0 <pxCurrentTCBConst>:
 8008ed0:	20000c54 	.word	0x20000c54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	607b      	str	r3, [r7, #4]
}
 8008ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ef2:	f7fe fec7 	bl	8007c84 <xTaskIncrementTick>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008efc:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <xPortSysTickHandler+0x40>)
 8008efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	2300      	movs	r3, #0
 8008f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	f383 8811 	msr	BASEPRI, r3
}
 8008f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	e000ed04 	.word	0xe000ed04

08008f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f20:	4b0b      	ldr	r3, [pc, #44]	@ (8008f50 <vPortSetupTimerInterrupt+0x34>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f26:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <vPortSetupTimerInterrupt+0x38>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008f58 <vPortSetupTimerInterrupt+0x3c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a0a      	ldr	r2, [pc, #40]	@ (8008f5c <vPortSetupTimerInterrupt+0x40>)
 8008f32:	fba2 2303 	umull	r2, r3, r2, r3
 8008f36:	099b      	lsrs	r3, r3, #6
 8008f38:	4a09      	ldr	r2, [pc, #36]	@ (8008f60 <vPortSetupTimerInterrupt+0x44>)
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f3e:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <vPortSetupTimerInterrupt+0x34>)
 8008f40:	2207      	movs	r2, #7
 8008f42:	601a      	str	r2, [r3, #0]
}
 8008f44:	bf00      	nop
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	e000e010 	.word	0xe000e010
 8008f54:	e000e018 	.word	0xe000e018
 8008f58:	20000000 	.word	0x20000000
 8008f5c:	10624dd3 	.word	0x10624dd3
 8008f60:	e000e014 	.word	0xe000e014

08008f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f74 <vPortEnableVFP+0x10>
 8008f68:	6801      	ldr	r1, [r0, #0]
 8008f6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f6e:	6001      	str	r1, [r0, #0]
 8008f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f72:	bf00      	nop
 8008f74:	e000ed88 	.word	0xe000ed88

08008f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f7e:	f3ef 8305 	mrs	r3, IPSR
 8008f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b0f      	cmp	r3, #15
 8008f88:	d915      	bls.n	8008fb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f8a:	4a18      	ldr	r2, [pc, #96]	@ (8008fec <vPortValidateInterruptPriority+0x74>)
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f94:	4b16      	ldr	r3, [pc, #88]	@ (8008ff0 <vPortValidateInterruptPriority+0x78>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	7afa      	ldrb	r2, [r7, #11]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d20b      	bcs.n	8008fb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	607b      	str	r3, [r7, #4]
}
 8008fb0:	bf00      	nop
 8008fb2:	bf00      	nop
 8008fb4:	e7fd      	b.n	8008fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff4 <vPortValidateInterruptPriority+0x7c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8008ff8 <vPortValidateInterruptPriority+0x80>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d90b      	bls.n	8008fde <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fca:	f383 8811 	msr	BASEPRI, r3
 8008fce:	f3bf 8f6f 	isb	sy
 8008fd2:	f3bf 8f4f 	dsb	sy
 8008fd6:	603b      	str	r3, [r7, #0]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <vPortValidateInterruptPriority+0x62>
	}
 8008fde:	bf00      	nop
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	e000e3f0 	.word	0xe000e3f0
 8008ff0:	20001280 	.word	0x20001280
 8008ff4:	e000ed0c 	.word	0xe000ed0c
 8008ff8:	20001284 	.word	0x20001284

08008ffc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08a      	sub	sp, #40	@ 0x28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009004:	2300      	movs	r3, #0
 8009006:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009008:	f7fe fd80 	bl	8007b0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800900c:	4b5c      	ldr	r3, [pc, #368]	@ (8009180 <pvPortMalloc+0x184>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009014:	f000 f924 	bl	8009260 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009018:	4b5a      	ldr	r3, [pc, #360]	@ (8009184 <pvPortMalloc+0x188>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4013      	ands	r3, r2
 8009020:	2b00      	cmp	r3, #0
 8009022:	f040 8095 	bne.w	8009150 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01e      	beq.n	800906a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800902c:	2208      	movs	r2, #8
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4413      	add	r3, r2
 8009032:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	2b00      	cmp	r3, #0
 800903c:	d015      	beq.n	800906a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f023 0307 	bic.w	r3, r3, #7
 8009044:	3308      	adds	r3, #8
 8009046:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f003 0307 	and.w	r3, r3, #7
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <pvPortMalloc+0x6e>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	617b      	str	r3, [r7, #20]
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	e7fd      	b.n	8009066 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d06f      	beq.n	8009150 <pvPortMalloc+0x154>
 8009070:	4b45      	ldr	r3, [pc, #276]	@ (8009188 <pvPortMalloc+0x18c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	429a      	cmp	r2, r3
 8009078:	d86a      	bhi.n	8009150 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800907a:	4b44      	ldr	r3, [pc, #272]	@ (800918c <pvPortMalloc+0x190>)
 800907c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800907e:	4b43      	ldr	r3, [pc, #268]	@ (800918c <pvPortMalloc+0x190>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009084:	e004      	b.n	8009090 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800908a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d903      	bls.n	80090a2 <pvPortMalloc+0xa6>
 800909a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d1f1      	bne.n	8009086 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090a2:	4b37      	ldr	r3, [pc, #220]	@ (8009180 <pvPortMalloc+0x184>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d051      	beq.n	8009150 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090ac:	6a3b      	ldr	r3, [r7, #32]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2208      	movs	r2, #8
 80090b2:	4413      	add	r3, r2
 80090b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	1ad2      	subs	r2, r2, r3
 80090c6:	2308      	movs	r3, #8
 80090c8:	005b      	lsls	r3, r3, #1
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d920      	bls.n	8009110 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4413      	add	r3, r2
 80090d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	f003 0307 	and.w	r3, r3, #7
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <pvPortMalloc+0xfc>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	613b      	str	r3, [r7, #16]
}
 80090f2:	bf00      	nop
 80090f4:	bf00      	nop
 80090f6:	e7fd      	b.n	80090f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80090f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800910a:	69b8      	ldr	r0, [r7, #24]
 800910c:	f000 f90a 	bl	8009324 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009110:	4b1d      	ldr	r3, [pc, #116]	@ (8009188 <pvPortMalloc+0x18c>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	4a1b      	ldr	r2, [pc, #108]	@ (8009188 <pvPortMalloc+0x18c>)
 800911c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800911e:	4b1a      	ldr	r3, [pc, #104]	@ (8009188 <pvPortMalloc+0x18c>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b1b      	ldr	r3, [pc, #108]	@ (8009190 <pvPortMalloc+0x194>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d203      	bcs.n	8009132 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800912a:	4b17      	ldr	r3, [pc, #92]	@ (8009188 <pvPortMalloc+0x18c>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a18      	ldr	r2, [pc, #96]	@ (8009190 <pvPortMalloc+0x194>)
 8009130:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	4b13      	ldr	r3, [pc, #76]	@ (8009184 <pvPortMalloc+0x188>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	431a      	orrs	r2, r3
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009142:	2200      	movs	r2, #0
 8009144:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009146:	4b13      	ldr	r3, [pc, #76]	@ (8009194 <pvPortMalloc+0x198>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3301      	adds	r3, #1
 800914c:	4a11      	ldr	r2, [pc, #68]	@ (8009194 <pvPortMalloc+0x198>)
 800914e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009150:	f7fe fcea 	bl	8007b28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	f003 0307 	and.w	r3, r3, #7
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00b      	beq.n	8009176 <pvPortMalloc+0x17a>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	60fb      	str	r3, [r7, #12]
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	e7fd      	b.n	8009172 <pvPortMalloc+0x176>
	return pvReturn;
 8009176:	69fb      	ldr	r3, [r7, #28]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3728      	adds	r7, #40	@ 0x28
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	20004e90 	.word	0x20004e90
 8009184:	20004ea4 	.word	0x20004ea4
 8009188:	20004e94 	.word	0x20004e94
 800918c:	20004e88 	.word	0x20004e88
 8009190:	20004e98 	.word	0x20004e98
 8009194:	20004e9c 	.word	0x20004e9c

08009198 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b086      	sub	sp, #24
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d04f      	beq.n	800924a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091aa:	2308      	movs	r3, #8
 80091ac:	425b      	negs	r3, r3
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4413      	add	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	4b25      	ldr	r3, [pc, #148]	@ (8009254 <vPortFree+0xbc>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4013      	ands	r3, r2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10b      	bne.n	80091de <vPortFree+0x46>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	60fb      	str	r3, [r7, #12]
}
 80091d8:	bf00      	nop
 80091da:	bf00      	nop
 80091dc:	e7fd      	b.n	80091da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00b      	beq.n	80091fe <vPortFree+0x66>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	60bb      	str	r3, [r7, #8]
}
 80091f8:	bf00      	nop
 80091fa:	bf00      	nop
 80091fc:	e7fd      	b.n	80091fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	4b14      	ldr	r3, [pc, #80]	@ (8009254 <vPortFree+0xbc>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4013      	ands	r3, r2
 8009208:	2b00      	cmp	r3, #0
 800920a:	d01e      	beq.n	800924a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d11a      	bne.n	800924a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	4b0e      	ldr	r3, [pc, #56]	@ (8009254 <vPortFree+0xbc>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	43db      	mvns	r3, r3
 800921e:	401a      	ands	r2, r3
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009224:	f7fe fc72 	bl	8007b0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	685a      	ldr	r2, [r3, #4]
 800922c:	4b0a      	ldr	r3, [pc, #40]	@ (8009258 <vPortFree+0xc0>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4413      	add	r3, r2
 8009232:	4a09      	ldr	r2, [pc, #36]	@ (8009258 <vPortFree+0xc0>)
 8009234:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009236:	6938      	ldr	r0, [r7, #16]
 8009238:	f000 f874 	bl	8009324 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800923c:	4b07      	ldr	r3, [pc, #28]	@ (800925c <vPortFree+0xc4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3301      	adds	r3, #1
 8009242:	4a06      	ldr	r2, [pc, #24]	@ (800925c <vPortFree+0xc4>)
 8009244:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009246:	f7fe fc6f 	bl	8007b28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800924a:	bf00      	nop
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20004ea4 	.word	0x20004ea4
 8009258:	20004e94 	.word	0x20004e94
 800925c:	20004ea0 	.word	0x20004ea0

08009260 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009266:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800926a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800926c:	4b27      	ldr	r3, [pc, #156]	@ (800930c <prvHeapInit+0xac>)
 800926e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00c      	beq.n	8009294 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	3307      	adds	r3, #7
 800927e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0307 	bic.w	r3, r3, #7
 8009286:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	4a1f      	ldr	r2, [pc, #124]	@ (800930c <prvHeapInit+0xac>)
 8009290:	4413      	add	r3, r2
 8009292:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009298:	4a1d      	ldr	r2, [pc, #116]	@ (8009310 <prvHeapInit+0xb0>)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800929e:	4b1c      	ldr	r3, [pc, #112]	@ (8009310 <prvHeapInit+0xb0>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68ba      	ldr	r2, [r7, #8]
 80092a8:	4413      	add	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092ac:	2208      	movs	r2, #8
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	1a9b      	subs	r3, r3, r2
 80092b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0307 	bic.w	r3, r3, #7
 80092ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	4a15      	ldr	r2, [pc, #84]	@ (8009314 <prvHeapInit+0xb4>)
 80092c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092c2:	4b14      	ldr	r3, [pc, #80]	@ (8009314 <prvHeapInit+0xb4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2200      	movs	r2, #0
 80092c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ca:	4b12      	ldr	r3, [pc, #72]	@ (8009314 <prvHeapInit+0xb4>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	1ad2      	subs	r2, r2, r3
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80092e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009314 <prvHeapInit+0xb4>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009318 <prvHeapInit+0xb8>)
 80092ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	4a09      	ldr	r2, [pc, #36]	@ (800931c <prvHeapInit+0xbc>)
 80092f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092f8:	4b09      	ldr	r3, [pc, #36]	@ (8009320 <prvHeapInit+0xc0>)
 80092fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80092fe:	601a      	str	r2, [r3, #0]
}
 8009300:	bf00      	nop
 8009302:	3714      	adds	r7, #20
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	20001288 	.word	0x20001288
 8009310:	20004e88 	.word	0x20004e88
 8009314:	20004e90 	.word	0x20004e90
 8009318:	20004e98 	.word	0x20004e98
 800931c:	20004e94 	.word	0x20004e94
 8009320:	20004ea4 	.word	0x20004ea4

08009324 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800932c:	4b28      	ldr	r3, [pc, #160]	@ (80093d0 <prvInsertBlockIntoFreeList+0xac>)
 800932e:	60fb      	str	r3, [r7, #12]
 8009330:	e002      	b.n	8009338 <prvInsertBlockIntoFreeList+0x14>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	429a      	cmp	r2, r3
 8009340:	d8f7      	bhi.n	8009332 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	4413      	add	r3, r2
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	429a      	cmp	r2, r3
 8009352:	d108      	bne.n	8009366 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	441a      	add	r2, r3
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	441a      	add	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	429a      	cmp	r2, r3
 8009378:	d118      	bne.n	80093ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4b15      	ldr	r3, [pc, #84]	@ (80093d4 <prvInsertBlockIntoFreeList+0xb0>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d00d      	beq.n	80093a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	441a      	add	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	e008      	b.n	80093b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093a2:	4b0c      	ldr	r3, [pc, #48]	@ (80093d4 <prvInsertBlockIntoFreeList+0xb0>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	e003      	b.n	80093b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d002      	beq.n	80093c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093c2:	bf00      	nop
 80093c4:	3714      	adds	r7, #20
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
 80093ce:	bf00      	nop
 80093d0:	20004e88 	.word	0x20004e88
 80093d4:	20004e90 	.word	0x20004e90

080093d8 <memset>:
 80093d8:	4402      	add	r2, r0
 80093da:	4603      	mov	r3, r0
 80093dc:	4293      	cmp	r3, r2
 80093de:	d100      	bne.n	80093e2 <memset+0xa>
 80093e0:	4770      	bx	lr
 80093e2:	f803 1b01 	strb.w	r1, [r3], #1
 80093e6:	e7f9      	b.n	80093dc <memset+0x4>

080093e8 <__libc_init_array>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	4d0d      	ldr	r5, [pc, #52]	@ (8009420 <__libc_init_array+0x38>)
 80093ec:	4c0d      	ldr	r4, [pc, #52]	@ (8009424 <__libc_init_array+0x3c>)
 80093ee:	1b64      	subs	r4, r4, r5
 80093f0:	10a4      	asrs	r4, r4, #2
 80093f2:	2600      	movs	r6, #0
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	d109      	bne.n	800940c <__libc_init_array+0x24>
 80093f8:	4d0b      	ldr	r5, [pc, #44]	@ (8009428 <__libc_init_array+0x40>)
 80093fa:	4c0c      	ldr	r4, [pc, #48]	@ (800942c <__libc_init_array+0x44>)
 80093fc:	f000 f826 	bl	800944c <_init>
 8009400:	1b64      	subs	r4, r4, r5
 8009402:	10a4      	asrs	r4, r4, #2
 8009404:	2600      	movs	r6, #0
 8009406:	42a6      	cmp	r6, r4
 8009408:	d105      	bne.n	8009416 <__libc_init_array+0x2e>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009410:	4798      	blx	r3
 8009412:	3601      	adds	r6, #1
 8009414:	e7ee      	b.n	80093f4 <__libc_init_array+0xc>
 8009416:	f855 3b04 	ldr.w	r3, [r5], #4
 800941a:	4798      	blx	r3
 800941c:	3601      	adds	r6, #1
 800941e:	e7f2      	b.n	8009406 <__libc_init_array+0x1e>
 8009420:	080095cc 	.word	0x080095cc
 8009424:	080095cc 	.word	0x080095cc
 8009428:	080095cc 	.word	0x080095cc
 800942c:	080095d0 	.word	0x080095d0

08009430 <memcpy>:
 8009430:	440a      	add	r2, r1
 8009432:	4291      	cmp	r1, r2
 8009434:	f100 33ff 	add.w	r3, r0, #4294967295
 8009438:	d100      	bne.n	800943c <memcpy+0xc>
 800943a:	4770      	bx	lr
 800943c:	b510      	push	{r4, lr}
 800943e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009446:	4291      	cmp	r1, r2
 8009448:	d1f9      	bne.n	800943e <memcpy+0xe>
 800944a:	bd10      	pop	{r4, pc}

0800944c <_init>:
 800944c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944e:	bf00      	nop
 8009450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009452:	bc08      	pop	{r3}
 8009454:	469e      	mov	lr, r3
 8009456:	4770      	bx	lr

08009458 <_fini>:
 8009458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800945a:	bf00      	nop
 800945c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800945e:	bc08      	pop	{r3}
 8009460:	469e      	mov	lr, r3
 8009462:	4770      	bx	lr
